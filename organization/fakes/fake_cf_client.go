// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmwarepivotallabs/cf-mgmt/organization"
)

type FakeCFClient struct {
	CreateOrgStub        func(cfclient.OrgRequest) (cfclient.Org, error)
	createOrgMutex       sync.RWMutex
	createOrgArgsForCall []struct {
		arg1 cfclient.OrgRequest
	}
	createOrgReturns struct {
		result1 cfclient.Org
		result2 error
	}
	createOrgReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	DeleteOrgStub        func(string, bool, bool) error
	deleteOrgMutex       sync.RWMutex
	deleteOrgArgsForCall []struct {
		arg1 string
		arg2 bool
		arg3 bool
	}
	deleteOrgReturns struct {
		result1 error
	}
	deleteOrgReturnsOnCall map[int]struct {
		result1 error
	}
	OrgMetadataStub        func(string) (*cfclient.Metadata, error)
	orgMetadataMutex       sync.RWMutex
	orgMetadataArgsForCall []struct {
		arg1 string
	}
	orgMetadataReturns struct {
		result1 *cfclient.Metadata
		result2 error
	}
	orgMetadataReturnsOnCall map[int]struct {
		result1 *cfclient.Metadata
		result2 error
	}
	RemoveOrgMetadataStub        func(string) error
	removeOrgMetadataMutex       sync.RWMutex
	removeOrgMetadataArgsForCall []struct {
		arg1 string
	}
	removeOrgMetadataReturns struct {
		result1 error
	}
	removeOrgMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	SupportsMetadataAPIStub        func() (bool, error)
	supportsMetadataAPIMutex       sync.RWMutex
	supportsMetadataAPIArgsForCall []struct {
	}
	supportsMetadataAPIReturns struct {
		result1 bool
		result2 error
	}
	supportsMetadataAPIReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	UnshareOrgPrivateDomainStub        func(string, string) error
	unshareOrgPrivateDomainMutex       sync.RWMutex
	unshareOrgPrivateDomainArgsForCall []struct {
		arg1 string
		arg2 string
	}
	unshareOrgPrivateDomainReturns struct {
		result1 error
	}
	unshareOrgPrivateDomainReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateOrgStub        func(string, cfclient.OrgRequest) (cfclient.Org, error)
	updateOrgMutex       sync.RWMutex
	updateOrgArgsForCall []struct {
		arg1 string
		arg2 cfclient.OrgRequest
	}
	updateOrgReturns struct {
		result1 cfclient.Org
		result2 error
	}
	updateOrgReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	UpdateOrgMetadataStub        func(string, cfclient.Metadata) error
	updateOrgMetadataMutex       sync.RWMutex
	updateOrgMetadataArgsForCall []struct {
		arg1 string
		arg2 cfclient.Metadata
	}
	updateOrgMetadataReturns struct {
		result1 error
	}
	updateOrgMetadataReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) CreateOrg(arg1 cfclient.OrgRequest) (cfclient.Org, error) {
	fake.createOrgMutex.Lock()
	ret, specificReturn := fake.createOrgReturnsOnCall[len(fake.createOrgArgsForCall)]
	fake.createOrgArgsForCall = append(fake.createOrgArgsForCall, struct {
		arg1 cfclient.OrgRequest
	}{arg1})
	stub := fake.CreateOrgStub
	fakeReturns := fake.createOrgReturns
	fake.recordInvocation("CreateOrg", []interface{}{arg1})
	fake.createOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateOrgCallCount() int {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return len(fake.createOrgArgsForCall)
}

func (fake *FakeCFClient) CreateOrgCalls(stub func(cfclient.OrgRequest) (cfclient.Org, error)) {
	fake.createOrgMutex.Lock()
	defer fake.createOrgMutex.Unlock()
	fake.CreateOrgStub = stub
}

func (fake *FakeCFClient) CreateOrgArgsForCall(i int) cfclient.OrgRequest {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	argsForCall := fake.createOrgArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateOrgReturns(result1 cfclient.Org, result2 error) {
	fake.createOrgMutex.Lock()
	defer fake.createOrgMutex.Unlock()
	fake.CreateOrgStub = nil
	fake.createOrgReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateOrgReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.createOrgMutex.Lock()
	defer fake.createOrgMutex.Unlock()
	fake.CreateOrgStub = nil
	if fake.createOrgReturnsOnCall == nil {
		fake.createOrgReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.createOrgReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DeleteOrg(arg1 string, arg2 bool, arg3 bool) error {
	fake.deleteOrgMutex.Lock()
	ret, specificReturn := fake.deleteOrgReturnsOnCall[len(fake.deleteOrgArgsForCall)]
	fake.deleteOrgArgsForCall = append(fake.deleteOrgArgsForCall, struct {
		arg1 string
		arg2 bool
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.DeleteOrgStub
	fakeReturns := fake.deleteOrgReturns
	fake.recordInvocation("DeleteOrg", []interface{}{arg1, arg2, arg3})
	fake.deleteOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteOrgCallCount() int {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return len(fake.deleteOrgArgsForCall)
}

func (fake *FakeCFClient) DeleteOrgCalls(stub func(string, bool, bool) error) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = stub
}

func (fake *FakeCFClient) DeleteOrgArgsForCall(i int) (string, bool, bool) {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	argsForCall := fake.deleteOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) DeleteOrgReturns(result1 error) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = nil
	fake.deleteOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteOrgReturnsOnCall(i int, result1 error) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = nil
	if fake.deleteOrgReturnsOnCall == nil {
		fake.deleteOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) OrgMetadata(arg1 string) (*cfclient.Metadata, error) {
	fake.orgMetadataMutex.Lock()
	ret, specificReturn := fake.orgMetadataReturnsOnCall[len(fake.orgMetadataArgsForCall)]
	fake.orgMetadataArgsForCall = append(fake.orgMetadataArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.OrgMetadataStub
	fakeReturns := fake.orgMetadataReturns
	fake.recordInvocation("OrgMetadata", []interface{}{arg1})
	fake.orgMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) OrgMetadataCallCount() int {
	fake.orgMetadataMutex.RLock()
	defer fake.orgMetadataMutex.RUnlock()
	return len(fake.orgMetadataArgsForCall)
}

func (fake *FakeCFClient) OrgMetadataCalls(stub func(string) (*cfclient.Metadata, error)) {
	fake.orgMetadataMutex.Lock()
	defer fake.orgMetadataMutex.Unlock()
	fake.OrgMetadataStub = stub
}

func (fake *FakeCFClient) OrgMetadataArgsForCall(i int) string {
	fake.orgMetadataMutex.RLock()
	defer fake.orgMetadataMutex.RUnlock()
	argsForCall := fake.orgMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) OrgMetadataReturns(result1 *cfclient.Metadata, result2 error) {
	fake.orgMetadataMutex.Lock()
	defer fake.orgMetadataMutex.Unlock()
	fake.OrgMetadataStub = nil
	fake.orgMetadataReturns = struct {
		result1 *cfclient.Metadata
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) OrgMetadataReturnsOnCall(i int, result1 *cfclient.Metadata, result2 error) {
	fake.orgMetadataMutex.Lock()
	defer fake.orgMetadataMutex.Unlock()
	fake.OrgMetadataStub = nil
	if fake.orgMetadataReturnsOnCall == nil {
		fake.orgMetadataReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Metadata
			result2 error
		})
	}
	fake.orgMetadataReturnsOnCall[i] = struct {
		result1 *cfclient.Metadata
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) RemoveOrgMetadata(arg1 string) error {
	fake.removeOrgMetadataMutex.Lock()
	ret, specificReturn := fake.removeOrgMetadataReturnsOnCall[len(fake.removeOrgMetadataArgsForCall)]
	fake.removeOrgMetadataArgsForCall = append(fake.removeOrgMetadataArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RemoveOrgMetadataStub
	fakeReturns := fake.removeOrgMetadataReturns
	fake.recordInvocation("RemoveOrgMetadata", []interface{}{arg1})
	fake.removeOrgMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveOrgMetadataCallCount() int {
	fake.removeOrgMetadataMutex.RLock()
	defer fake.removeOrgMetadataMutex.RUnlock()
	return len(fake.removeOrgMetadataArgsForCall)
}

func (fake *FakeCFClient) RemoveOrgMetadataCalls(stub func(string) error) {
	fake.removeOrgMetadataMutex.Lock()
	defer fake.removeOrgMetadataMutex.Unlock()
	fake.RemoveOrgMetadataStub = stub
}

func (fake *FakeCFClient) RemoveOrgMetadataArgsForCall(i int) string {
	fake.removeOrgMetadataMutex.RLock()
	defer fake.removeOrgMetadataMutex.RUnlock()
	argsForCall := fake.removeOrgMetadataArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) RemoveOrgMetadataReturns(result1 error) {
	fake.removeOrgMetadataMutex.Lock()
	defer fake.removeOrgMetadataMutex.Unlock()
	fake.RemoveOrgMetadataStub = nil
	fake.removeOrgMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveOrgMetadataReturnsOnCall(i int, result1 error) {
	fake.removeOrgMetadataMutex.Lock()
	defer fake.removeOrgMetadataMutex.Unlock()
	fake.RemoveOrgMetadataStub = nil
	if fake.removeOrgMetadataReturnsOnCall == nil {
		fake.removeOrgMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeOrgMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) SupportsMetadataAPI() (bool, error) {
	fake.supportsMetadataAPIMutex.Lock()
	ret, specificReturn := fake.supportsMetadataAPIReturnsOnCall[len(fake.supportsMetadataAPIArgsForCall)]
	fake.supportsMetadataAPIArgsForCall = append(fake.supportsMetadataAPIArgsForCall, struct {
	}{})
	stub := fake.SupportsMetadataAPIStub
	fakeReturns := fake.supportsMetadataAPIReturns
	fake.recordInvocation("SupportsMetadataAPI", []interface{}{})
	fake.supportsMetadataAPIMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) SupportsMetadataAPICallCount() int {
	fake.supportsMetadataAPIMutex.RLock()
	defer fake.supportsMetadataAPIMutex.RUnlock()
	return len(fake.supportsMetadataAPIArgsForCall)
}

func (fake *FakeCFClient) SupportsMetadataAPICalls(stub func() (bool, error)) {
	fake.supportsMetadataAPIMutex.Lock()
	defer fake.supportsMetadataAPIMutex.Unlock()
	fake.SupportsMetadataAPIStub = stub
}

func (fake *FakeCFClient) SupportsMetadataAPIReturns(result1 bool, result2 error) {
	fake.supportsMetadataAPIMutex.Lock()
	defer fake.supportsMetadataAPIMutex.Unlock()
	fake.SupportsMetadataAPIStub = nil
	fake.supportsMetadataAPIReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) SupportsMetadataAPIReturnsOnCall(i int, result1 bool, result2 error) {
	fake.supportsMetadataAPIMutex.Lock()
	defer fake.supportsMetadataAPIMutex.Unlock()
	fake.SupportsMetadataAPIStub = nil
	if fake.supportsMetadataAPIReturnsOnCall == nil {
		fake.supportsMetadataAPIReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.supportsMetadataAPIReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UnshareOrgPrivateDomain(arg1 string, arg2 string) error {
	fake.unshareOrgPrivateDomainMutex.Lock()
	ret, specificReturn := fake.unshareOrgPrivateDomainReturnsOnCall[len(fake.unshareOrgPrivateDomainArgsForCall)]
	fake.unshareOrgPrivateDomainArgsForCall = append(fake.unshareOrgPrivateDomainArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.UnshareOrgPrivateDomainStub
	fakeReturns := fake.unshareOrgPrivateDomainReturns
	fake.recordInvocation("UnshareOrgPrivateDomain", []interface{}{arg1, arg2})
	fake.unshareOrgPrivateDomainMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainCallCount() int {
	fake.unshareOrgPrivateDomainMutex.RLock()
	defer fake.unshareOrgPrivateDomainMutex.RUnlock()
	return len(fake.unshareOrgPrivateDomainArgsForCall)
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainCalls(stub func(string, string) error) {
	fake.unshareOrgPrivateDomainMutex.Lock()
	defer fake.unshareOrgPrivateDomainMutex.Unlock()
	fake.UnshareOrgPrivateDomainStub = stub
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainArgsForCall(i int) (string, string) {
	fake.unshareOrgPrivateDomainMutex.RLock()
	defer fake.unshareOrgPrivateDomainMutex.RUnlock()
	argsForCall := fake.unshareOrgPrivateDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainReturns(result1 error) {
	fake.unshareOrgPrivateDomainMutex.Lock()
	defer fake.unshareOrgPrivateDomainMutex.Unlock()
	fake.UnshareOrgPrivateDomainStub = nil
	fake.unshareOrgPrivateDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainReturnsOnCall(i int, result1 error) {
	fake.unshareOrgPrivateDomainMutex.Lock()
	defer fake.unshareOrgPrivateDomainMutex.Unlock()
	fake.UnshareOrgPrivateDomainStub = nil
	if fake.unshareOrgPrivateDomainReturnsOnCall == nil {
		fake.unshareOrgPrivateDomainReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unshareOrgPrivateDomainReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UpdateOrg(arg1 string, arg2 cfclient.OrgRequest) (cfclient.Org, error) {
	fake.updateOrgMutex.Lock()
	ret, specificReturn := fake.updateOrgReturnsOnCall[len(fake.updateOrgArgsForCall)]
	fake.updateOrgArgsForCall = append(fake.updateOrgArgsForCall, struct {
		arg1 string
		arg2 cfclient.OrgRequest
	}{arg1, arg2})
	stub := fake.UpdateOrgStub
	fakeReturns := fake.updateOrgReturns
	fake.recordInvocation("UpdateOrg", []interface{}{arg1, arg2})
	fake.updateOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpdateOrgCallCount() int {
	fake.updateOrgMutex.RLock()
	defer fake.updateOrgMutex.RUnlock()
	return len(fake.updateOrgArgsForCall)
}

func (fake *FakeCFClient) UpdateOrgCalls(stub func(string, cfclient.OrgRequest) (cfclient.Org, error)) {
	fake.updateOrgMutex.Lock()
	defer fake.updateOrgMutex.Unlock()
	fake.UpdateOrgStub = stub
}

func (fake *FakeCFClient) UpdateOrgArgsForCall(i int) (string, cfclient.OrgRequest) {
	fake.updateOrgMutex.RLock()
	defer fake.updateOrgMutex.RUnlock()
	argsForCall := fake.updateOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UpdateOrgReturns(result1 cfclient.Org, result2 error) {
	fake.updateOrgMutex.Lock()
	defer fake.updateOrgMutex.Unlock()
	fake.UpdateOrgStub = nil
	fake.updateOrgReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateOrgReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.updateOrgMutex.Lock()
	defer fake.updateOrgMutex.Unlock()
	fake.UpdateOrgStub = nil
	if fake.updateOrgReturnsOnCall == nil {
		fake.updateOrgReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.updateOrgReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateOrgMetadata(arg1 string, arg2 cfclient.Metadata) error {
	fake.updateOrgMetadataMutex.Lock()
	ret, specificReturn := fake.updateOrgMetadataReturnsOnCall[len(fake.updateOrgMetadataArgsForCall)]
	fake.updateOrgMetadataArgsForCall = append(fake.updateOrgMetadataArgsForCall, struct {
		arg1 string
		arg2 cfclient.Metadata
	}{arg1, arg2})
	stub := fake.UpdateOrgMetadataStub
	fakeReturns := fake.updateOrgMetadataReturns
	fake.recordInvocation("UpdateOrgMetadata", []interface{}{arg1, arg2})
	fake.updateOrgMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) UpdateOrgMetadataCallCount() int {
	fake.updateOrgMetadataMutex.RLock()
	defer fake.updateOrgMetadataMutex.RUnlock()
	return len(fake.updateOrgMetadataArgsForCall)
}

func (fake *FakeCFClient) UpdateOrgMetadataCalls(stub func(string, cfclient.Metadata) error) {
	fake.updateOrgMetadataMutex.Lock()
	defer fake.updateOrgMetadataMutex.Unlock()
	fake.UpdateOrgMetadataStub = stub
}

func (fake *FakeCFClient) UpdateOrgMetadataArgsForCall(i int) (string, cfclient.Metadata) {
	fake.updateOrgMetadataMutex.RLock()
	defer fake.updateOrgMetadataMutex.RUnlock()
	argsForCall := fake.updateOrgMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UpdateOrgMetadataReturns(result1 error) {
	fake.updateOrgMetadataMutex.Lock()
	defer fake.updateOrgMetadataMutex.Unlock()
	fake.UpdateOrgMetadataStub = nil
	fake.updateOrgMetadataReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UpdateOrgMetadataReturnsOnCall(i int, result1 error) {
	fake.updateOrgMetadataMutex.Lock()
	defer fake.updateOrgMetadataMutex.Unlock()
	fake.UpdateOrgMetadataStub = nil
	if fake.updateOrgMetadataReturnsOnCall == nil {
		fake.updateOrgMetadataReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateOrgMetadataReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	fake.orgMetadataMutex.RLock()
	defer fake.orgMetadataMutex.RUnlock()
	fake.removeOrgMetadataMutex.RLock()
	defer fake.removeOrgMetadataMutex.RUnlock()
	fake.supportsMetadataAPIMutex.RLock()
	defer fake.supportsMetadataAPIMutex.RUnlock()
	fake.unshareOrgPrivateDomainMutex.RLock()
	defer fake.unshareOrgPrivateDomainMutex.RUnlock()
	fake.updateOrgMutex.RLock()
	defer fake.updateOrgMutex.RUnlock()
	fake.updateOrgMetadataMutex.RLock()
	defer fake.updateOrgMetadataMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ organization.CFClient = new(FakeCFClient)
