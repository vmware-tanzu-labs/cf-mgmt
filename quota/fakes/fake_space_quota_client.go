// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry-community/go-cfclient/v3/client"
	"github.com/cloudfoundry-community/go-cfclient/v3/resource"
	"github.com/vmwarepivotallabs/cf-mgmt/quota"
)

type FakeCFSpaceQuotaClient struct {
	ApplyStub        func(context.Context, string, []string) ([]string, error)
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	applyReturns struct {
		result1 []string
		result2 error
	}
	applyReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	CreateStub        func(context.Context, *resource.SpaceQuotaCreateOrUpdate) (*resource.SpaceQuota, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 *resource.SpaceQuotaCreateOrUpdate
	}
	createReturns struct {
		result1 *resource.SpaceQuota
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *resource.SpaceQuota
		result2 error
	}
	GetStub        func(context.Context, string) (*resource.SpaceQuota, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getReturns struct {
		result1 *resource.SpaceQuota
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *resource.SpaceQuota
		result2 error
	}
	ListAllStub        func(context.Context, *client.SpaceQuotaListOptions) ([]*resource.SpaceQuota, error)
	listAllMutex       sync.RWMutex
	listAllArgsForCall []struct {
		arg1 context.Context
		arg2 *client.SpaceQuotaListOptions
	}
	listAllReturns struct {
		result1 []*resource.SpaceQuota
		result2 error
	}
	listAllReturnsOnCall map[int]struct {
		result1 []*resource.SpaceQuota
		result2 error
	}
	UpdateStub        func(context.Context, string, *resource.SpaceQuotaCreateOrUpdate) (*resource.SpaceQuota, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *resource.SpaceQuotaCreateOrUpdate
	}
	updateReturns struct {
		result1 *resource.SpaceQuota
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 *resource.SpaceQuota
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFSpaceQuotaClient) Apply(arg1 context.Context, arg2 string, arg3 []string) ([]string, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3Copy})
	stub := fake.ApplyStub
	fakeReturns := fake.applyReturns
	fake.recordInvocation("Apply", []interface{}{arg1, arg2, arg3Copy})
	fake.applyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSpaceQuotaClient) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeCFSpaceQuotaClient) ApplyCalls(stub func(context.Context, string, []string) ([]string, error)) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = stub
}

func (fake *FakeCFSpaceQuotaClient) ApplyArgsForCall(i int) (context.Context, string, []string) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	argsForCall := fake.applyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFSpaceQuotaClient) ApplyReturns(result1 []string, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceQuotaClient) ApplyReturnsOnCall(i int, result1 []string, result2 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceQuotaClient) Create(arg1 context.Context, arg2 *resource.SpaceQuotaCreateOrUpdate) (*resource.SpaceQuota, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 *resource.SpaceQuotaCreateOrUpdate
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSpaceQuotaClient) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeCFSpaceQuotaClient) CreateCalls(stub func(context.Context, *resource.SpaceQuotaCreateOrUpdate) (*resource.SpaceQuota, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeCFSpaceQuotaClient) CreateArgsForCall(i int) (context.Context, *resource.SpaceQuotaCreateOrUpdate) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFSpaceQuotaClient) CreateReturns(result1 *resource.SpaceQuota, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *resource.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceQuotaClient) CreateReturnsOnCall(i int, result1 *resource.SpaceQuota, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *resource.SpaceQuota
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *resource.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceQuotaClient) Get(arg1 context.Context, arg2 string) (*resource.SpaceQuota, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSpaceQuotaClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeCFSpaceQuotaClient) GetCalls(stub func(context.Context, string) (*resource.SpaceQuota, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeCFSpaceQuotaClient) GetArgsForCall(i int) (context.Context, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFSpaceQuotaClient) GetReturns(result1 *resource.SpaceQuota, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *resource.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceQuotaClient) GetReturnsOnCall(i int, result1 *resource.SpaceQuota, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *resource.SpaceQuota
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *resource.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceQuotaClient) ListAll(arg1 context.Context, arg2 *client.SpaceQuotaListOptions) ([]*resource.SpaceQuota, error) {
	fake.listAllMutex.Lock()
	ret, specificReturn := fake.listAllReturnsOnCall[len(fake.listAllArgsForCall)]
	fake.listAllArgsForCall = append(fake.listAllArgsForCall, struct {
		arg1 context.Context
		arg2 *client.SpaceQuotaListOptions
	}{arg1, arg2})
	stub := fake.ListAllStub
	fakeReturns := fake.listAllReturns
	fake.recordInvocation("ListAll", []interface{}{arg1, arg2})
	fake.listAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSpaceQuotaClient) ListAllCallCount() int {
	fake.listAllMutex.RLock()
	defer fake.listAllMutex.RUnlock()
	return len(fake.listAllArgsForCall)
}

func (fake *FakeCFSpaceQuotaClient) ListAllCalls(stub func(context.Context, *client.SpaceQuotaListOptions) ([]*resource.SpaceQuota, error)) {
	fake.listAllMutex.Lock()
	defer fake.listAllMutex.Unlock()
	fake.ListAllStub = stub
}

func (fake *FakeCFSpaceQuotaClient) ListAllArgsForCall(i int) (context.Context, *client.SpaceQuotaListOptions) {
	fake.listAllMutex.RLock()
	defer fake.listAllMutex.RUnlock()
	argsForCall := fake.listAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFSpaceQuotaClient) ListAllReturns(result1 []*resource.SpaceQuota, result2 error) {
	fake.listAllMutex.Lock()
	defer fake.listAllMutex.Unlock()
	fake.ListAllStub = nil
	fake.listAllReturns = struct {
		result1 []*resource.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceQuotaClient) ListAllReturnsOnCall(i int, result1 []*resource.SpaceQuota, result2 error) {
	fake.listAllMutex.Lock()
	defer fake.listAllMutex.Unlock()
	fake.ListAllStub = nil
	if fake.listAllReturnsOnCall == nil {
		fake.listAllReturnsOnCall = make(map[int]struct {
			result1 []*resource.SpaceQuota
			result2 error
		})
	}
	fake.listAllReturnsOnCall[i] = struct {
		result1 []*resource.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceQuotaClient) Update(arg1 context.Context, arg2 string, arg3 *resource.SpaceQuotaCreateOrUpdate) (*resource.SpaceQuota, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *resource.SpaceQuotaCreateOrUpdate
	}{arg1, arg2, arg3})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSpaceQuotaClient) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeCFSpaceQuotaClient) UpdateCalls(stub func(context.Context, string, *resource.SpaceQuotaCreateOrUpdate) (*resource.SpaceQuota, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeCFSpaceQuotaClient) UpdateArgsForCall(i int) (context.Context, string, *resource.SpaceQuotaCreateOrUpdate) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFSpaceQuotaClient) UpdateReturns(result1 *resource.SpaceQuota, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *resource.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceQuotaClient) UpdateReturnsOnCall(i int, result1 *resource.SpaceQuota, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 *resource.SpaceQuota
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 *resource.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceQuotaClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listAllMutex.RLock()
	defer fake.listAllMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFSpaceQuotaClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ quota.CFSpaceQuotaClient = new(FakeCFSpaceQuotaClient)
