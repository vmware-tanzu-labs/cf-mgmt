// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmwarepivotallabs/cf-mgmt/quota"
)

type FakeCFClient struct {
	AssignSpaceQuotaStub        func(string, string) error
	assignSpaceQuotaMutex       sync.RWMutex
	assignSpaceQuotaArgsForCall []struct {
		arg1 string
		arg2 string
	}
	assignSpaceQuotaReturns struct {
		result1 error
	}
	assignSpaceQuotaReturnsOnCall map[int]struct {
		result1 error
	}
	CreateOrgQuotaStub        func(cfclient.OrgQuotaRequest) (*cfclient.OrgQuota, error)
	createOrgQuotaMutex       sync.RWMutex
	createOrgQuotaArgsForCall []struct {
		arg1 cfclient.OrgQuotaRequest
	}
	createOrgQuotaReturns struct {
		result1 *cfclient.OrgQuota
		result2 error
	}
	createOrgQuotaReturnsOnCall map[int]struct {
		result1 *cfclient.OrgQuota
		result2 error
	}
	CreateSpaceQuotaStub        func(cfclient.SpaceQuotaRequest) (*cfclient.SpaceQuota, error)
	createSpaceQuotaMutex       sync.RWMutex
	createSpaceQuotaArgsForCall []struct {
		arg1 cfclient.SpaceQuotaRequest
	}
	createSpaceQuotaReturns struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}
	createSpaceQuotaReturnsOnCall map[int]struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}
	GetOrgQuotaByNameStub        func(string) (cfclient.OrgQuota, error)
	getOrgQuotaByNameMutex       sync.RWMutex
	getOrgQuotaByNameArgsForCall []struct {
		arg1 string
	}
	getOrgQuotaByNameReturns struct {
		result1 cfclient.OrgQuota
		result2 error
	}
	getOrgQuotaByNameReturnsOnCall map[int]struct {
		result1 cfclient.OrgQuota
		result2 error
	}
	GetSpaceQuotaByNameStub        func(string) (cfclient.SpaceQuota, error)
	getSpaceQuotaByNameMutex       sync.RWMutex
	getSpaceQuotaByNameArgsForCall []struct {
		arg1 string
	}
	getSpaceQuotaByNameReturns struct {
		result1 cfclient.SpaceQuota
		result2 error
	}
	getSpaceQuotaByNameReturnsOnCall map[int]struct {
		result1 cfclient.SpaceQuota
		result2 error
	}
	ListOrgQuotasStub        func() ([]cfclient.OrgQuota, error)
	listOrgQuotasMutex       sync.RWMutex
	listOrgQuotasArgsForCall []struct {
	}
	listOrgQuotasReturns struct {
		result1 []cfclient.OrgQuota
		result2 error
	}
	listOrgQuotasReturnsOnCall map[int]struct {
		result1 []cfclient.OrgQuota
		result2 error
	}
	ListOrgSpaceQuotasStub        func(string) ([]cfclient.SpaceQuota, error)
	listOrgSpaceQuotasMutex       sync.RWMutex
	listOrgSpaceQuotasArgsForCall []struct {
		arg1 string
	}
	listOrgSpaceQuotasReturns struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}
	listOrgSpaceQuotasReturnsOnCall map[int]struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}
	UpdateOrgQuotaStub        func(string, cfclient.OrgQuotaRequest) (*cfclient.OrgQuota, error)
	updateOrgQuotaMutex       sync.RWMutex
	updateOrgQuotaArgsForCall []struct {
		arg1 string
		arg2 cfclient.OrgQuotaRequest
	}
	updateOrgQuotaReturns struct {
		result1 *cfclient.OrgQuota
		result2 error
	}
	updateOrgQuotaReturnsOnCall map[int]struct {
		result1 *cfclient.OrgQuota
		result2 error
	}
	UpdateSpaceQuotaStub        func(string, cfclient.SpaceQuotaRequest) (*cfclient.SpaceQuota, error)
	updateSpaceQuotaMutex       sync.RWMutex
	updateSpaceQuotaArgsForCall []struct {
		arg1 string
		arg2 cfclient.SpaceQuotaRequest
	}
	updateSpaceQuotaReturns struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}
	updateSpaceQuotaReturnsOnCall map[int]struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) AssignSpaceQuota(arg1 string, arg2 string) error {
	fake.assignSpaceQuotaMutex.Lock()
	ret, specificReturn := fake.assignSpaceQuotaReturnsOnCall[len(fake.assignSpaceQuotaArgsForCall)]
	fake.assignSpaceQuotaArgsForCall = append(fake.assignSpaceQuotaArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AssignSpaceQuotaStub
	fakeReturns := fake.assignSpaceQuotaReturns
	fake.recordInvocation("AssignSpaceQuota", []interface{}{arg1, arg2})
	fake.assignSpaceQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) AssignSpaceQuotaCallCount() int {
	fake.assignSpaceQuotaMutex.RLock()
	defer fake.assignSpaceQuotaMutex.RUnlock()
	return len(fake.assignSpaceQuotaArgsForCall)
}

func (fake *FakeCFClient) AssignSpaceQuotaCalls(stub func(string, string) error) {
	fake.assignSpaceQuotaMutex.Lock()
	defer fake.assignSpaceQuotaMutex.Unlock()
	fake.AssignSpaceQuotaStub = stub
}

func (fake *FakeCFClient) AssignSpaceQuotaArgsForCall(i int) (string, string) {
	fake.assignSpaceQuotaMutex.RLock()
	defer fake.assignSpaceQuotaMutex.RUnlock()
	argsForCall := fake.assignSpaceQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AssignSpaceQuotaReturns(result1 error) {
	fake.assignSpaceQuotaMutex.Lock()
	defer fake.assignSpaceQuotaMutex.Unlock()
	fake.AssignSpaceQuotaStub = nil
	fake.assignSpaceQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AssignSpaceQuotaReturnsOnCall(i int, result1 error) {
	fake.assignSpaceQuotaMutex.Lock()
	defer fake.assignSpaceQuotaMutex.Unlock()
	fake.AssignSpaceQuotaStub = nil
	if fake.assignSpaceQuotaReturnsOnCall == nil {
		fake.assignSpaceQuotaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.assignSpaceQuotaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) CreateOrgQuota(arg1 cfclient.OrgQuotaRequest) (*cfclient.OrgQuota, error) {
	fake.createOrgQuotaMutex.Lock()
	ret, specificReturn := fake.createOrgQuotaReturnsOnCall[len(fake.createOrgQuotaArgsForCall)]
	fake.createOrgQuotaArgsForCall = append(fake.createOrgQuotaArgsForCall, struct {
		arg1 cfclient.OrgQuotaRequest
	}{arg1})
	stub := fake.CreateOrgQuotaStub
	fakeReturns := fake.createOrgQuotaReturns
	fake.recordInvocation("CreateOrgQuota", []interface{}{arg1})
	fake.createOrgQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateOrgQuotaCallCount() int {
	fake.createOrgQuotaMutex.RLock()
	defer fake.createOrgQuotaMutex.RUnlock()
	return len(fake.createOrgQuotaArgsForCall)
}

func (fake *FakeCFClient) CreateOrgQuotaCalls(stub func(cfclient.OrgQuotaRequest) (*cfclient.OrgQuota, error)) {
	fake.createOrgQuotaMutex.Lock()
	defer fake.createOrgQuotaMutex.Unlock()
	fake.CreateOrgQuotaStub = stub
}

func (fake *FakeCFClient) CreateOrgQuotaArgsForCall(i int) cfclient.OrgQuotaRequest {
	fake.createOrgQuotaMutex.RLock()
	defer fake.createOrgQuotaMutex.RUnlock()
	argsForCall := fake.createOrgQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateOrgQuotaReturns(result1 *cfclient.OrgQuota, result2 error) {
	fake.createOrgQuotaMutex.Lock()
	defer fake.createOrgQuotaMutex.Unlock()
	fake.CreateOrgQuotaStub = nil
	fake.createOrgQuotaReturns = struct {
		result1 *cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateOrgQuotaReturnsOnCall(i int, result1 *cfclient.OrgQuota, result2 error) {
	fake.createOrgQuotaMutex.Lock()
	defer fake.createOrgQuotaMutex.Unlock()
	fake.CreateOrgQuotaStub = nil
	if fake.createOrgQuotaReturnsOnCall == nil {
		fake.createOrgQuotaReturnsOnCall = make(map[int]struct {
			result1 *cfclient.OrgQuota
			result2 error
		})
	}
	fake.createOrgQuotaReturnsOnCall[i] = struct {
		result1 *cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSpaceQuota(arg1 cfclient.SpaceQuotaRequest) (*cfclient.SpaceQuota, error) {
	fake.createSpaceQuotaMutex.Lock()
	ret, specificReturn := fake.createSpaceQuotaReturnsOnCall[len(fake.createSpaceQuotaArgsForCall)]
	fake.createSpaceQuotaArgsForCall = append(fake.createSpaceQuotaArgsForCall, struct {
		arg1 cfclient.SpaceQuotaRequest
	}{arg1})
	stub := fake.CreateSpaceQuotaStub
	fakeReturns := fake.createSpaceQuotaReturns
	fake.recordInvocation("CreateSpaceQuota", []interface{}{arg1})
	fake.createSpaceQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateSpaceQuotaCallCount() int {
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	return len(fake.createSpaceQuotaArgsForCall)
}

func (fake *FakeCFClient) CreateSpaceQuotaCalls(stub func(cfclient.SpaceQuotaRequest) (*cfclient.SpaceQuota, error)) {
	fake.createSpaceQuotaMutex.Lock()
	defer fake.createSpaceQuotaMutex.Unlock()
	fake.CreateSpaceQuotaStub = stub
}

func (fake *FakeCFClient) CreateSpaceQuotaArgsForCall(i int) cfclient.SpaceQuotaRequest {
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	argsForCall := fake.createSpaceQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateSpaceQuotaReturns(result1 *cfclient.SpaceQuota, result2 error) {
	fake.createSpaceQuotaMutex.Lock()
	defer fake.createSpaceQuotaMutex.Unlock()
	fake.CreateSpaceQuotaStub = nil
	fake.createSpaceQuotaReturns = struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSpaceQuotaReturnsOnCall(i int, result1 *cfclient.SpaceQuota, result2 error) {
	fake.createSpaceQuotaMutex.Lock()
	defer fake.createSpaceQuotaMutex.Unlock()
	fake.CreateSpaceQuotaStub = nil
	if fake.createSpaceQuotaReturnsOnCall == nil {
		fake.createSpaceQuotaReturnsOnCall = make(map[int]struct {
			result1 *cfclient.SpaceQuota
			result2 error
		})
	}
	fake.createSpaceQuotaReturnsOnCall[i] = struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetOrgQuotaByName(arg1 string) (cfclient.OrgQuota, error) {
	fake.getOrgQuotaByNameMutex.Lock()
	ret, specificReturn := fake.getOrgQuotaByNameReturnsOnCall[len(fake.getOrgQuotaByNameArgsForCall)]
	fake.getOrgQuotaByNameArgsForCall = append(fake.getOrgQuotaByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetOrgQuotaByNameStub
	fakeReturns := fake.getOrgQuotaByNameReturns
	fake.recordInvocation("GetOrgQuotaByName", []interface{}{arg1})
	fake.getOrgQuotaByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetOrgQuotaByNameCallCount() int {
	fake.getOrgQuotaByNameMutex.RLock()
	defer fake.getOrgQuotaByNameMutex.RUnlock()
	return len(fake.getOrgQuotaByNameArgsForCall)
}

func (fake *FakeCFClient) GetOrgQuotaByNameCalls(stub func(string) (cfclient.OrgQuota, error)) {
	fake.getOrgQuotaByNameMutex.Lock()
	defer fake.getOrgQuotaByNameMutex.Unlock()
	fake.GetOrgQuotaByNameStub = stub
}

func (fake *FakeCFClient) GetOrgQuotaByNameArgsForCall(i int) string {
	fake.getOrgQuotaByNameMutex.RLock()
	defer fake.getOrgQuotaByNameMutex.RUnlock()
	argsForCall := fake.getOrgQuotaByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetOrgQuotaByNameReturns(result1 cfclient.OrgQuota, result2 error) {
	fake.getOrgQuotaByNameMutex.Lock()
	defer fake.getOrgQuotaByNameMutex.Unlock()
	fake.GetOrgQuotaByNameStub = nil
	fake.getOrgQuotaByNameReturns = struct {
		result1 cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetOrgQuotaByNameReturnsOnCall(i int, result1 cfclient.OrgQuota, result2 error) {
	fake.getOrgQuotaByNameMutex.Lock()
	defer fake.getOrgQuotaByNameMutex.Unlock()
	fake.GetOrgQuotaByNameStub = nil
	if fake.getOrgQuotaByNameReturnsOnCall == nil {
		fake.getOrgQuotaByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.OrgQuota
			result2 error
		})
	}
	fake.getOrgQuotaByNameReturnsOnCall[i] = struct {
		result1 cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSpaceQuotaByName(arg1 string) (cfclient.SpaceQuota, error) {
	fake.getSpaceQuotaByNameMutex.Lock()
	ret, specificReturn := fake.getSpaceQuotaByNameReturnsOnCall[len(fake.getSpaceQuotaByNameArgsForCall)]
	fake.getSpaceQuotaByNameArgsForCall = append(fake.getSpaceQuotaByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetSpaceQuotaByNameStub
	fakeReturns := fake.getSpaceQuotaByNameReturns
	fake.recordInvocation("GetSpaceQuotaByName", []interface{}{arg1})
	fake.getSpaceQuotaByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetSpaceQuotaByNameCallCount() int {
	fake.getSpaceQuotaByNameMutex.RLock()
	defer fake.getSpaceQuotaByNameMutex.RUnlock()
	return len(fake.getSpaceQuotaByNameArgsForCall)
}

func (fake *FakeCFClient) GetSpaceQuotaByNameCalls(stub func(string) (cfclient.SpaceQuota, error)) {
	fake.getSpaceQuotaByNameMutex.Lock()
	defer fake.getSpaceQuotaByNameMutex.Unlock()
	fake.GetSpaceQuotaByNameStub = stub
}

func (fake *FakeCFClient) GetSpaceQuotaByNameArgsForCall(i int) string {
	fake.getSpaceQuotaByNameMutex.RLock()
	defer fake.getSpaceQuotaByNameMutex.RUnlock()
	argsForCall := fake.getSpaceQuotaByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetSpaceQuotaByNameReturns(result1 cfclient.SpaceQuota, result2 error) {
	fake.getSpaceQuotaByNameMutex.Lock()
	defer fake.getSpaceQuotaByNameMutex.Unlock()
	fake.GetSpaceQuotaByNameStub = nil
	fake.getSpaceQuotaByNameReturns = struct {
		result1 cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetSpaceQuotaByNameReturnsOnCall(i int, result1 cfclient.SpaceQuota, result2 error) {
	fake.getSpaceQuotaByNameMutex.Lock()
	defer fake.getSpaceQuotaByNameMutex.Unlock()
	fake.GetSpaceQuotaByNameStub = nil
	if fake.getSpaceQuotaByNameReturnsOnCall == nil {
		fake.getSpaceQuotaByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.SpaceQuota
			result2 error
		})
	}
	fake.getSpaceQuotaByNameReturnsOnCall[i] = struct {
		result1 cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgQuotas() ([]cfclient.OrgQuota, error) {
	fake.listOrgQuotasMutex.Lock()
	ret, specificReturn := fake.listOrgQuotasReturnsOnCall[len(fake.listOrgQuotasArgsForCall)]
	fake.listOrgQuotasArgsForCall = append(fake.listOrgQuotasArgsForCall, struct {
	}{})
	stub := fake.ListOrgQuotasStub
	fakeReturns := fake.listOrgQuotasReturns
	fake.recordInvocation("ListOrgQuotas", []interface{}{})
	fake.listOrgQuotasMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgQuotasCallCount() int {
	fake.listOrgQuotasMutex.RLock()
	defer fake.listOrgQuotasMutex.RUnlock()
	return len(fake.listOrgQuotasArgsForCall)
}

func (fake *FakeCFClient) ListOrgQuotasCalls(stub func() ([]cfclient.OrgQuota, error)) {
	fake.listOrgQuotasMutex.Lock()
	defer fake.listOrgQuotasMutex.Unlock()
	fake.ListOrgQuotasStub = stub
}

func (fake *FakeCFClient) ListOrgQuotasReturns(result1 []cfclient.OrgQuota, result2 error) {
	fake.listOrgQuotasMutex.Lock()
	defer fake.listOrgQuotasMutex.Unlock()
	fake.ListOrgQuotasStub = nil
	fake.listOrgQuotasReturns = struct {
		result1 []cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgQuotasReturnsOnCall(i int, result1 []cfclient.OrgQuota, result2 error) {
	fake.listOrgQuotasMutex.Lock()
	defer fake.listOrgQuotasMutex.Unlock()
	fake.ListOrgQuotasStub = nil
	if fake.listOrgQuotasReturnsOnCall == nil {
		fake.listOrgQuotasReturnsOnCall = make(map[int]struct {
			result1 []cfclient.OrgQuota
			result2 error
		})
	}
	fake.listOrgQuotasReturnsOnCall[i] = struct {
		result1 []cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgSpaceQuotas(arg1 string) ([]cfclient.SpaceQuota, error) {
	fake.listOrgSpaceQuotasMutex.Lock()
	ret, specificReturn := fake.listOrgSpaceQuotasReturnsOnCall[len(fake.listOrgSpaceQuotasArgsForCall)]
	fake.listOrgSpaceQuotasArgsForCall = append(fake.listOrgSpaceQuotasArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ListOrgSpaceQuotasStub
	fakeReturns := fake.listOrgSpaceQuotasReturns
	fake.recordInvocation("ListOrgSpaceQuotas", []interface{}{arg1})
	fake.listOrgSpaceQuotasMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgSpaceQuotasCallCount() int {
	fake.listOrgSpaceQuotasMutex.RLock()
	defer fake.listOrgSpaceQuotasMutex.RUnlock()
	return len(fake.listOrgSpaceQuotasArgsForCall)
}

func (fake *FakeCFClient) ListOrgSpaceQuotasCalls(stub func(string) ([]cfclient.SpaceQuota, error)) {
	fake.listOrgSpaceQuotasMutex.Lock()
	defer fake.listOrgSpaceQuotasMutex.Unlock()
	fake.ListOrgSpaceQuotasStub = stub
}

func (fake *FakeCFClient) ListOrgSpaceQuotasArgsForCall(i int) string {
	fake.listOrgSpaceQuotasMutex.RLock()
	defer fake.listOrgSpaceQuotasMutex.RUnlock()
	argsForCall := fake.listOrgSpaceQuotasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListOrgSpaceQuotasReturns(result1 []cfclient.SpaceQuota, result2 error) {
	fake.listOrgSpaceQuotasMutex.Lock()
	defer fake.listOrgSpaceQuotasMutex.Unlock()
	fake.ListOrgSpaceQuotasStub = nil
	fake.listOrgSpaceQuotasReturns = struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgSpaceQuotasReturnsOnCall(i int, result1 []cfclient.SpaceQuota, result2 error) {
	fake.listOrgSpaceQuotasMutex.Lock()
	defer fake.listOrgSpaceQuotasMutex.Unlock()
	fake.ListOrgSpaceQuotasStub = nil
	if fake.listOrgSpaceQuotasReturnsOnCall == nil {
		fake.listOrgSpaceQuotasReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SpaceQuota
			result2 error
		})
	}
	fake.listOrgSpaceQuotasReturnsOnCall[i] = struct {
		result1 []cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateOrgQuota(arg1 string, arg2 cfclient.OrgQuotaRequest) (*cfclient.OrgQuota, error) {
	fake.updateOrgQuotaMutex.Lock()
	ret, specificReturn := fake.updateOrgQuotaReturnsOnCall[len(fake.updateOrgQuotaArgsForCall)]
	fake.updateOrgQuotaArgsForCall = append(fake.updateOrgQuotaArgsForCall, struct {
		arg1 string
		arg2 cfclient.OrgQuotaRequest
	}{arg1, arg2})
	stub := fake.UpdateOrgQuotaStub
	fakeReturns := fake.updateOrgQuotaReturns
	fake.recordInvocation("UpdateOrgQuota", []interface{}{arg1, arg2})
	fake.updateOrgQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpdateOrgQuotaCallCount() int {
	fake.updateOrgQuotaMutex.RLock()
	defer fake.updateOrgQuotaMutex.RUnlock()
	return len(fake.updateOrgQuotaArgsForCall)
}

func (fake *FakeCFClient) UpdateOrgQuotaCalls(stub func(string, cfclient.OrgQuotaRequest) (*cfclient.OrgQuota, error)) {
	fake.updateOrgQuotaMutex.Lock()
	defer fake.updateOrgQuotaMutex.Unlock()
	fake.UpdateOrgQuotaStub = stub
}

func (fake *FakeCFClient) UpdateOrgQuotaArgsForCall(i int) (string, cfclient.OrgQuotaRequest) {
	fake.updateOrgQuotaMutex.RLock()
	defer fake.updateOrgQuotaMutex.RUnlock()
	argsForCall := fake.updateOrgQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UpdateOrgQuotaReturns(result1 *cfclient.OrgQuota, result2 error) {
	fake.updateOrgQuotaMutex.Lock()
	defer fake.updateOrgQuotaMutex.Unlock()
	fake.UpdateOrgQuotaStub = nil
	fake.updateOrgQuotaReturns = struct {
		result1 *cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateOrgQuotaReturnsOnCall(i int, result1 *cfclient.OrgQuota, result2 error) {
	fake.updateOrgQuotaMutex.Lock()
	defer fake.updateOrgQuotaMutex.Unlock()
	fake.UpdateOrgQuotaStub = nil
	if fake.updateOrgQuotaReturnsOnCall == nil {
		fake.updateOrgQuotaReturnsOnCall = make(map[int]struct {
			result1 *cfclient.OrgQuota
			result2 error
		})
	}
	fake.updateOrgQuotaReturnsOnCall[i] = struct {
		result1 *cfclient.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSpaceQuota(arg1 string, arg2 cfclient.SpaceQuotaRequest) (*cfclient.SpaceQuota, error) {
	fake.updateSpaceQuotaMutex.Lock()
	ret, specificReturn := fake.updateSpaceQuotaReturnsOnCall[len(fake.updateSpaceQuotaArgsForCall)]
	fake.updateSpaceQuotaArgsForCall = append(fake.updateSpaceQuotaArgsForCall, struct {
		arg1 string
		arg2 cfclient.SpaceQuotaRequest
	}{arg1, arg2})
	stub := fake.UpdateSpaceQuotaStub
	fakeReturns := fake.updateSpaceQuotaReturns
	fake.recordInvocation("UpdateSpaceQuota", []interface{}{arg1, arg2})
	fake.updateSpaceQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) UpdateSpaceQuotaCallCount() int {
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	return len(fake.updateSpaceQuotaArgsForCall)
}

func (fake *FakeCFClient) UpdateSpaceQuotaCalls(stub func(string, cfclient.SpaceQuotaRequest) (*cfclient.SpaceQuota, error)) {
	fake.updateSpaceQuotaMutex.Lock()
	defer fake.updateSpaceQuotaMutex.Unlock()
	fake.UpdateSpaceQuotaStub = stub
}

func (fake *FakeCFClient) UpdateSpaceQuotaArgsForCall(i int) (string, cfclient.SpaceQuotaRequest) {
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	argsForCall := fake.updateSpaceQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UpdateSpaceQuotaReturns(result1 *cfclient.SpaceQuota, result2 error) {
	fake.updateSpaceQuotaMutex.Lock()
	defer fake.updateSpaceQuotaMutex.Unlock()
	fake.UpdateSpaceQuotaStub = nil
	fake.updateSpaceQuotaReturns = struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UpdateSpaceQuotaReturnsOnCall(i int, result1 *cfclient.SpaceQuota, result2 error) {
	fake.updateSpaceQuotaMutex.Lock()
	defer fake.updateSpaceQuotaMutex.Unlock()
	fake.UpdateSpaceQuotaStub = nil
	if fake.updateSpaceQuotaReturnsOnCall == nil {
		fake.updateSpaceQuotaReturnsOnCall = make(map[int]struct {
			result1 *cfclient.SpaceQuota
			result2 error
		})
	}
	fake.updateSpaceQuotaReturnsOnCall[i] = struct {
		result1 *cfclient.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assignSpaceQuotaMutex.RLock()
	defer fake.assignSpaceQuotaMutex.RUnlock()
	fake.createOrgQuotaMutex.RLock()
	defer fake.createOrgQuotaMutex.RUnlock()
	fake.createSpaceQuotaMutex.RLock()
	defer fake.createSpaceQuotaMutex.RUnlock()
	fake.getOrgQuotaByNameMutex.RLock()
	defer fake.getOrgQuotaByNameMutex.RUnlock()
	fake.getSpaceQuotaByNameMutex.RLock()
	defer fake.getSpaceQuotaByNameMutex.RUnlock()
	fake.listOrgQuotasMutex.RLock()
	defer fake.listOrgQuotasMutex.RUnlock()
	fake.listOrgSpaceQuotasMutex.RLock()
	defer fake.listOrgSpaceQuotasMutex.RUnlock()
	fake.updateOrgQuotaMutex.RLock()
	defer fake.updateOrgQuotaMutex.RUnlock()
	fake.updateSpaceQuotaMutex.RLock()
	defer fake.updateSpaceQuotaMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ quota.CFClient = new(FakeCFClient)
