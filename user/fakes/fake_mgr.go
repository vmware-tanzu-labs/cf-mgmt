// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmwarepivotallabs/cf-mgmt/user"
)

type FakeManager struct {
	CleanupOrgUsersStub        func() []error
	cleanupOrgUsersMutex       sync.RWMutex
	cleanupOrgUsersArgsForCall []struct {
	}
	cleanupOrgUsersReturns struct {
		result1 []error
	}
	cleanupOrgUsersReturnsOnCall map[int]struct {
		result1 []error
	}
	UpdateOrgUsersStub        func() []error
	updateOrgUsersMutex       sync.RWMutex
	updateOrgUsersArgsForCall []struct {
	}
	updateOrgUsersReturns struct {
		result1 []error
	}
	updateOrgUsersReturnsOnCall map[int]struct {
		result1 []error
	}
	UpdateSpaceUsersStub        func() []error
	updateSpaceUsersMutex       sync.RWMutex
	updateSpaceUsersArgsForCall []struct {
	}
	updateSpaceUsersReturns struct {
		result1 []error
	}
	updateSpaceUsersReturnsOnCall map[int]struct {
		result1 []error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) CleanupOrgUsers() []error {
	fake.cleanupOrgUsersMutex.Lock()
	ret, specificReturn := fake.cleanupOrgUsersReturnsOnCall[len(fake.cleanupOrgUsersArgsForCall)]
	fake.cleanupOrgUsersArgsForCall = append(fake.cleanupOrgUsersArgsForCall, struct {
	}{})
	stub := fake.CleanupOrgUsersStub
	fakeReturns := fake.cleanupOrgUsersReturns
	fake.recordInvocation("CleanupOrgUsers", []interface{}{})
	fake.cleanupOrgUsersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) CleanupOrgUsersCallCount() int {
	fake.cleanupOrgUsersMutex.RLock()
	defer fake.cleanupOrgUsersMutex.RUnlock()
	return len(fake.cleanupOrgUsersArgsForCall)
}

func (fake *FakeManager) CleanupOrgUsersCalls(stub func() []error) {
	fake.cleanupOrgUsersMutex.Lock()
	defer fake.cleanupOrgUsersMutex.Unlock()
	fake.CleanupOrgUsersStub = stub
}

func (fake *FakeManager) CleanupOrgUsersReturns(result1 []error) {
	fake.cleanupOrgUsersMutex.Lock()
	defer fake.cleanupOrgUsersMutex.Unlock()
	fake.CleanupOrgUsersStub = nil
	fake.cleanupOrgUsersReturns = struct {
		result1 []error
	}{result1}
}

func (fake *FakeManager) CleanupOrgUsersReturnsOnCall(i int, result1 []error) {
	fake.cleanupOrgUsersMutex.Lock()
	defer fake.cleanupOrgUsersMutex.Unlock()
	fake.CleanupOrgUsersStub = nil
	if fake.cleanupOrgUsersReturnsOnCall == nil {
		fake.cleanupOrgUsersReturnsOnCall = make(map[int]struct {
			result1 []error
		})
	}
	fake.cleanupOrgUsersReturnsOnCall[i] = struct {
		result1 []error
	}{result1}
}

func (fake *FakeManager) UpdateOrgUsers() []error {
	fake.updateOrgUsersMutex.Lock()
	ret, specificReturn := fake.updateOrgUsersReturnsOnCall[len(fake.updateOrgUsersArgsForCall)]
	fake.updateOrgUsersArgsForCall = append(fake.updateOrgUsersArgsForCall, struct {
	}{})
	stub := fake.UpdateOrgUsersStub
	fakeReturns := fake.updateOrgUsersReturns
	fake.recordInvocation("UpdateOrgUsers", []interface{}{})
	fake.updateOrgUsersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) UpdateOrgUsersCallCount() int {
	fake.updateOrgUsersMutex.RLock()
	defer fake.updateOrgUsersMutex.RUnlock()
	return len(fake.updateOrgUsersArgsForCall)
}

func (fake *FakeManager) UpdateOrgUsersCalls(stub func() []error) {
	fake.updateOrgUsersMutex.Lock()
	defer fake.updateOrgUsersMutex.Unlock()
	fake.UpdateOrgUsersStub = stub
}

func (fake *FakeManager) UpdateOrgUsersReturns(result1 []error) {
	fake.updateOrgUsersMutex.Lock()
	defer fake.updateOrgUsersMutex.Unlock()
	fake.UpdateOrgUsersStub = nil
	fake.updateOrgUsersReturns = struct {
		result1 []error
	}{result1}
}

func (fake *FakeManager) UpdateOrgUsersReturnsOnCall(i int, result1 []error) {
	fake.updateOrgUsersMutex.Lock()
	defer fake.updateOrgUsersMutex.Unlock()
	fake.UpdateOrgUsersStub = nil
	if fake.updateOrgUsersReturnsOnCall == nil {
		fake.updateOrgUsersReturnsOnCall = make(map[int]struct {
			result1 []error
		})
	}
	fake.updateOrgUsersReturnsOnCall[i] = struct {
		result1 []error
	}{result1}
}

func (fake *FakeManager) UpdateSpaceUsers() []error {
	fake.updateSpaceUsersMutex.Lock()
	ret, specificReturn := fake.updateSpaceUsersReturnsOnCall[len(fake.updateSpaceUsersArgsForCall)]
	fake.updateSpaceUsersArgsForCall = append(fake.updateSpaceUsersArgsForCall, struct {
	}{})
	stub := fake.UpdateSpaceUsersStub
	fakeReturns := fake.updateSpaceUsersReturns
	fake.recordInvocation("UpdateSpaceUsers", []interface{}{})
	fake.updateSpaceUsersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) UpdateSpaceUsersCallCount() int {
	fake.updateSpaceUsersMutex.RLock()
	defer fake.updateSpaceUsersMutex.RUnlock()
	return len(fake.updateSpaceUsersArgsForCall)
}

func (fake *FakeManager) UpdateSpaceUsersCalls(stub func() []error) {
	fake.updateSpaceUsersMutex.Lock()
	defer fake.updateSpaceUsersMutex.Unlock()
	fake.UpdateSpaceUsersStub = stub
}

func (fake *FakeManager) UpdateSpaceUsersReturns(result1 []error) {
	fake.updateSpaceUsersMutex.Lock()
	defer fake.updateSpaceUsersMutex.Unlock()
	fake.UpdateSpaceUsersStub = nil
	fake.updateSpaceUsersReturns = struct {
		result1 []error
	}{result1}
}

func (fake *FakeManager) UpdateSpaceUsersReturnsOnCall(i int, result1 []error) {
	fake.updateSpaceUsersMutex.Lock()
	defer fake.updateSpaceUsersMutex.Unlock()
	fake.UpdateSpaceUsersStub = nil
	if fake.updateSpaceUsersReturnsOnCall == nil {
		fake.updateSpaceUsersReturnsOnCall = make(map[int]struct {
			result1 []error
		})
	}
	fake.updateSpaceUsersReturnsOnCall[i] = struct {
		result1 []error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanupOrgUsersMutex.RLock()
	defer fake.cleanupOrgUsersMutex.RUnlock()
	fake.updateOrgUsersMutex.RLock()
	defer fake.updateOrgUsersMutex.RUnlock()
	fake.updateSpaceUsersMutex.RLock()
	defer fake.updateSpaceUsersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ user.Manager = new(FakeManager)
