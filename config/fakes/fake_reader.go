// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmwarepivotallabs/cf-mgmt/config"
)

type FakeReader struct {
	GetASGConfigsStub        func() ([]config.ASGConfig, error)
	getASGConfigsMutex       sync.RWMutex
	getASGConfigsArgsForCall []struct {
	}
	getASGConfigsReturns struct {
		result1 []config.ASGConfig
		result2 error
	}
	getASGConfigsReturnsOnCall map[int]struct {
		result1 []config.ASGConfig
		result2 error
	}
	GetDefaultASGConfigsStub        func() ([]config.ASGConfig, error)
	getDefaultASGConfigsMutex       sync.RWMutex
	getDefaultASGConfigsArgsForCall []struct {
	}
	getDefaultASGConfigsReturns struct {
		result1 []config.ASGConfig
		result2 error
	}
	getDefaultASGConfigsReturnsOnCall map[int]struct {
		result1 []config.ASGConfig
		result2 error
	}
	GetGlobalConfigStub        func() (*config.GlobalConfig, error)
	getGlobalConfigMutex       sync.RWMutex
	getGlobalConfigArgsForCall []struct {
	}
	getGlobalConfigReturns struct {
		result1 *config.GlobalConfig
		result2 error
	}
	getGlobalConfigReturnsOnCall map[int]struct {
		result1 *config.GlobalConfig
		result2 error
	}
	GetOrgConfigStub        func(string) (*config.OrgConfig, error)
	getOrgConfigMutex       sync.RWMutex
	getOrgConfigArgsForCall []struct {
		arg1 string
	}
	getOrgConfigReturns struct {
		result1 *config.OrgConfig
		result2 error
	}
	getOrgConfigReturnsOnCall map[int]struct {
		result1 *config.OrgConfig
		result2 error
	}
	GetOrgConfigsStub        func() ([]config.OrgConfig, error)
	getOrgConfigsMutex       sync.RWMutex
	getOrgConfigsArgsForCall []struct {
	}
	getOrgConfigsReturns struct {
		result1 []config.OrgConfig
		result2 error
	}
	getOrgConfigsReturnsOnCall map[int]struct {
		result1 []config.OrgConfig
		result2 error
	}
	GetOrgQuotaStub        func(string) (*config.OrgQuota, error)
	getOrgQuotaMutex       sync.RWMutex
	getOrgQuotaArgsForCall []struct {
		arg1 string
	}
	getOrgQuotaReturns struct {
		result1 *config.OrgQuota
		result2 error
	}
	getOrgQuotaReturnsOnCall map[int]struct {
		result1 *config.OrgQuota
		result2 error
	}
	GetOrgQuotasStub        func() ([]config.OrgQuota, error)
	getOrgQuotasMutex       sync.RWMutex
	getOrgQuotasArgsForCall []struct {
	}
	getOrgQuotasReturns struct {
		result1 []config.OrgQuota
		result2 error
	}
	getOrgQuotasReturnsOnCall map[int]struct {
		result1 []config.OrgQuota
		result2 error
	}
	GetSpaceConfigStub        func(string, string) (*config.SpaceConfig, error)
	getSpaceConfigMutex       sync.RWMutex
	getSpaceConfigArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getSpaceConfigReturns struct {
		result1 *config.SpaceConfig
		result2 error
	}
	getSpaceConfigReturnsOnCall map[int]struct {
		result1 *config.SpaceConfig
		result2 error
	}
	GetSpaceConfigsStub        func() ([]config.SpaceConfig, error)
	getSpaceConfigsMutex       sync.RWMutex
	getSpaceConfigsArgsForCall []struct {
	}
	getSpaceConfigsReturns struct {
		result1 []config.SpaceConfig
		result2 error
	}
	getSpaceConfigsReturnsOnCall map[int]struct {
		result1 []config.SpaceConfig
		result2 error
	}
	GetSpaceDefaultsStub        func() (*config.SpaceConfig, error)
	getSpaceDefaultsMutex       sync.RWMutex
	getSpaceDefaultsArgsForCall []struct {
	}
	getSpaceDefaultsReturns struct {
		result1 *config.SpaceConfig
		result2 error
	}
	getSpaceDefaultsReturnsOnCall map[int]struct {
		result1 *config.SpaceConfig
		result2 error
	}
	GetSpaceQuotaStub        func(string, string) (*config.SpaceQuota, error)
	getSpaceQuotaMutex       sync.RWMutex
	getSpaceQuotaArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getSpaceQuotaReturns struct {
		result1 *config.SpaceQuota
		result2 error
	}
	getSpaceQuotaReturnsOnCall map[int]struct {
		result1 *config.SpaceQuota
		result2 error
	}
	GetSpaceQuotasStub        func(string) ([]config.SpaceQuota, error)
	getSpaceQuotasMutex       sync.RWMutex
	getSpaceQuotasArgsForCall []struct {
		arg1 string
	}
	getSpaceQuotasReturns struct {
		result1 []config.SpaceQuota
		result2 error
	}
	getSpaceQuotasReturnsOnCall map[int]struct {
		result1 []config.SpaceQuota
		result2 error
	}
	LdapConfigStub        func(string, string, string) (*config.LdapConfig, error)
	ldapConfigMutex       sync.RWMutex
	ldapConfigArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	ldapConfigReturns struct {
		result1 *config.LdapConfig
		result2 error
	}
	ldapConfigReturnsOnCall map[int]struct {
		result1 *config.LdapConfig
		result2 error
	}
	OrgSpacesStub        func(string) (*config.Spaces, error)
	orgSpacesMutex       sync.RWMutex
	orgSpacesArgsForCall []struct {
		arg1 string
	}
	orgSpacesReturns struct {
		result1 *config.Spaces
		result2 error
	}
	orgSpacesReturnsOnCall map[int]struct {
		result1 *config.Spaces
		result2 error
	}
	OrgsStub        func() (*config.Orgs, error)
	orgsMutex       sync.RWMutex
	orgsArgsForCall []struct {
	}
	orgsReturns struct {
		result1 *config.Orgs
		result2 error
	}
	orgsReturnsOnCall map[int]struct {
		result1 *config.Orgs
		result2 error
	}
	SpacesStub        func() ([]config.Spaces, error)
	spacesMutex       sync.RWMutex
	spacesArgsForCall []struct {
	}
	spacesReturns struct {
		result1 []config.Spaces
		result2 error
	}
	spacesReturnsOnCall map[int]struct {
		result1 []config.Spaces
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeReader) GetASGConfigs() ([]config.ASGConfig, error) {
	fake.getASGConfigsMutex.Lock()
	ret, specificReturn := fake.getASGConfigsReturnsOnCall[len(fake.getASGConfigsArgsForCall)]
	fake.getASGConfigsArgsForCall = append(fake.getASGConfigsArgsForCall, struct {
	}{})
	stub := fake.GetASGConfigsStub
	fakeReturns := fake.getASGConfigsReturns
	fake.recordInvocation("GetASGConfigs", []interface{}{})
	fake.getASGConfigsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetASGConfigsCallCount() int {
	fake.getASGConfigsMutex.RLock()
	defer fake.getASGConfigsMutex.RUnlock()
	return len(fake.getASGConfigsArgsForCall)
}

func (fake *FakeReader) GetASGConfigsCalls(stub func() ([]config.ASGConfig, error)) {
	fake.getASGConfigsMutex.Lock()
	defer fake.getASGConfigsMutex.Unlock()
	fake.GetASGConfigsStub = stub
}

func (fake *FakeReader) GetASGConfigsReturns(result1 []config.ASGConfig, result2 error) {
	fake.getASGConfigsMutex.Lock()
	defer fake.getASGConfigsMutex.Unlock()
	fake.GetASGConfigsStub = nil
	fake.getASGConfigsReturns = struct {
		result1 []config.ASGConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetASGConfigsReturnsOnCall(i int, result1 []config.ASGConfig, result2 error) {
	fake.getASGConfigsMutex.Lock()
	defer fake.getASGConfigsMutex.Unlock()
	fake.GetASGConfigsStub = nil
	if fake.getASGConfigsReturnsOnCall == nil {
		fake.getASGConfigsReturnsOnCall = make(map[int]struct {
			result1 []config.ASGConfig
			result2 error
		})
	}
	fake.getASGConfigsReturnsOnCall[i] = struct {
		result1 []config.ASGConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetDefaultASGConfigs() ([]config.ASGConfig, error) {
	fake.getDefaultASGConfigsMutex.Lock()
	ret, specificReturn := fake.getDefaultASGConfigsReturnsOnCall[len(fake.getDefaultASGConfigsArgsForCall)]
	fake.getDefaultASGConfigsArgsForCall = append(fake.getDefaultASGConfigsArgsForCall, struct {
	}{})
	stub := fake.GetDefaultASGConfigsStub
	fakeReturns := fake.getDefaultASGConfigsReturns
	fake.recordInvocation("GetDefaultASGConfigs", []interface{}{})
	fake.getDefaultASGConfigsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetDefaultASGConfigsCallCount() int {
	fake.getDefaultASGConfigsMutex.RLock()
	defer fake.getDefaultASGConfigsMutex.RUnlock()
	return len(fake.getDefaultASGConfigsArgsForCall)
}

func (fake *FakeReader) GetDefaultASGConfigsCalls(stub func() ([]config.ASGConfig, error)) {
	fake.getDefaultASGConfigsMutex.Lock()
	defer fake.getDefaultASGConfigsMutex.Unlock()
	fake.GetDefaultASGConfigsStub = stub
}

func (fake *FakeReader) GetDefaultASGConfigsReturns(result1 []config.ASGConfig, result2 error) {
	fake.getDefaultASGConfigsMutex.Lock()
	defer fake.getDefaultASGConfigsMutex.Unlock()
	fake.GetDefaultASGConfigsStub = nil
	fake.getDefaultASGConfigsReturns = struct {
		result1 []config.ASGConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetDefaultASGConfigsReturnsOnCall(i int, result1 []config.ASGConfig, result2 error) {
	fake.getDefaultASGConfigsMutex.Lock()
	defer fake.getDefaultASGConfigsMutex.Unlock()
	fake.GetDefaultASGConfigsStub = nil
	if fake.getDefaultASGConfigsReturnsOnCall == nil {
		fake.getDefaultASGConfigsReturnsOnCall = make(map[int]struct {
			result1 []config.ASGConfig
			result2 error
		})
	}
	fake.getDefaultASGConfigsReturnsOnCall[i] = struct {
		result1 []config.ASGConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetGlobalConfig() (*config.GlobalConfig, error) {
	fake.getGlobalConfigMutex.Lock()
	ret, specificReturn := fake.getGlobalConfigReturnsOnCall[len(fake.getGlobalConfigArgsForCall)]
	fake.getGlobalConfigArgsForCall = append(fake.getGlobalConfigArgsForCall, struct {
	}{})
	stub := fake.GetGlobalConfigStub
	fakeReturns := fake.getGlobalConfigReturns
	fake.recordInvocation("GetGlobalConfig", []interface{}{})
	fake.getGlobalConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetGlobalConfigCallCount() int {
	fake.getGlobalConfigMutex.RLock()
	defer fake.getGlobalConfigMutex.RUnlock()
	return len(fake.getGlobalConfigArgsForCall)
}

func (fake *FakeReader) GetGlobalConfigCalls(stub func() (*config.GlobalConfig, error)) {
	fake.getGlobalConfigMutex.Lock()
	defer fake.getGlobalConfigMutex.Unlock()
	fake.GetGlobalConfigStub = stub
}

func (fake *FakeReader) GetGlobalConfigReturns(result1 *config.GlobalConfig, result2 error) {
	fake.getGlobalConfigMutex.Lock()
	defer fake.getGlobalConfigMutex.Unlock()
	fake.GetGlobalConfigStub = nil
	fake.getGlobalConfigReturns = struct {
		result1 *config.GlobalConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetGlobalConfigReturnsOnCall(i int, result1 *config.GlobalConfig, result2 error) {
	fake.getGlobalConfigMutex.Lock()
	defer fake.getGlobalConfigMutex.Unlock()
	fake.GetGlobalConfigStub = nil
	if fake.getGlobalConfigReturnsOnCall == nil {
		fake.getGlobalConfigReturnsOnCall = make(map[int]struct {
			result1 *config.GlobalConfig
			result2 error
		})
	}
	fake.getGlobalConfigReturnsOnCall[i] = struct {
		result1 *config.GlobalConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetOrgConfig(arg1 string) (*config.OrgConfig, error) {
	fake.getOrgConfigMutex.Lock()
	ret, specificReturn := fake.getOrgConfigReturnsOnCall[len(fake.getOrgConfigArgsForCall)]
	fake.getOrgConfigArgsForCall = append(fake.getOrgConfigArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetOrgConfigStub
	fakeReturns := fake.getOrgConfigReturns
	fake.recordInvocation("GetOrgConfig", []interface{}{arg1})
	fake.getOrgConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetOrgConfigCallCount() int {
	fake.getOrgConfigMutex.RLock()
	defer fake.getOrgConfigMutex.RUnlock()
	return len(fake.getOrgConfigArgsForCall)
}

func (fake *FakeReader) GetOrgConfigCalls(stub func(string) (*config.OrgConfig, error)) {
	fake.getOrgConfigMutex.Lock()
	defer fake.getOrgConfigMutex.Unlock()
	fake.GetOrgConfigStub = stub
}

func (fake *FakeReader) GetOrgConfigArgsForCall(i int) string {
	fake.getOrgConfigMutex.RLock()
	defer fake.getOrgConfigMutex.RUnlock()
	argsForCall := fake.getOrgConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReader) GetOrgConfigReturns(result1 *config.OrgConfig, result2 error) {
	fake.getOrgConfigMutex.Lock()
	defer fake.getOrgConfigMutex.Unlock()
	fake.GetOrgConfigStub = nil
	fake.getOrgConfigReturns = struct {
		result1 *config.OrgConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetOrgConfigReturnsOnCall(i int, result1 *config.OrgConfig, result2 error) {
	fake.getOrgConfigMutex.Lock()
	defer fake.getOrgConfigMutex.Unlock()
	fake.GetOrgConfigStub = nil
	if fake.getOrgConfigReturnsOnCall == nil {
		fake.getOrgConfigReturnsOnCall = make(map[int]struct {
			result1 *config.OrgConfig
			result2 error
		})
	}
	fake.getOrgConfigReturnsOnCall[i] = struct {
		result1 *config.OrgConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetOrgConfigs() ([]config.OrgConfig, error) {
	fake.getOrgConfigsMutex.Lock()
	ret, specificReturn := fake.getOrgConfigsReturnsOnCall[len(fake.getOrgConfigsArgsForCall)]
	fake.getOrgConfigsArgsForCall = append(fake.getOrgConfigsArgsForCall, struct {
	}{})
	stub := fake.GetOrgConfigsStub
	fakeReturns := fake.getOrgConfigsReturns
	fake.recordInvocation("GetOrgConfigs", []interface{}{})
	fake.getOrgConfigsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetOrgConfigsCallCount() int {
	fake.getOrgConfigsMutex.RLock()
	defer fake.getOrgConfigsMutex.RUnlock()
	return len(fake.getOrgConfigsArgsForCall)
}

func (fake *FakeReader) GetOrgConfigsCalls(stub func() ([]config.OrgConfig, error)) {
	fake.getOrgConfigsMutex.Lock()
	defer fake.getOrgConfigsMutex.Unlock()
	fake.GetOrgConfigsStub = stub
}

func (fake *FakeReader) GetOrgConfigsReturns(result1 []config.OrgConfig, result2 error) {
	fake.getOrgConfigsMutex.Lock()
	defer fake.getOrgConfigsMutex.Unlock()
	fake.GetOrgConfigsStub = nil
	fake.getOrgConfigsReturns = struct {
		result1 []config.OrgConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetOrgConfigsReturnsOnCall(i int, result1 []config.OrgConfig, result2 error) {
	fake.getOrgConfigsMutex.Lock()
	defer fake.getOrgConfigsMutex.Unlock()
	fake.GetOrgConfigsStub = nil
	if fake.getOrgConfigsReturnsOnCall == nil {
		fake.getOrgConfigsReturnsOnCall = make(map[int]struct {
			result1 []config.OrgConfig
			result2 error
		})
	}
	fake.getOrgConfigsReturnsOnCall[i] = struct {
		result1 []config.OrgConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetOrgQuota(arg1 string) (*config.OrgQuota, error) {
	fake.getOrgQuotaMutex.Lock()
	ret, specificReturn := fake.getOrgQuotaReturnsOnCall[len(fake.getOrgQuotaArgsForCall)]
	fake.getOrgQuotaArgsForCall = append(fake.getOrgQuotaArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetOrgQuotaStub
	fakeReturns := fake.getOrgQuotaReturns
	fake.recordInvocation("GetOrgQuota", []interface{}{arg1})
	fake.getOrgQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetOrgQuotaCallCount() int {
	fake.getOrgQuotaMutex.RLock()
	defer fake.getOrgQuotaMutex.RUnlock()
	return len(fake.getOrgQuotaArgsForCall)
}

func (fake *FakeReader) GetOrgQuotaCalls(stub func(string) (*config.OrgQuota, error)) {
	fake.getOrgQuotaMutex.Lock()
	defer fake.getOrgQuotaMutex.Unlock()
	fake.GetOrgQuotaStub = stub
}

func (fake *FakeReader) GetOrgQuotaArgsForCall(i int) string {
	fake.getOrgQuotaMutex.RLock()
	defer fake.getOrgQuotaMutex.RUnlock()
	argsForCall := fake.getOrgQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReader) GetOrgQuotaReturns(result1 *config.OrgQuota, result2 error) {
	fake.getOrgQuotaMutex.Lock()
	defer fake.getOrgQuotaMutex.Unlock()
	fake.GetOrgQuotaStub = nil
	fake.getOrgQuotaReturns = struct {
		result1 *config.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetOrgQuotaReturnsOnCall(i int, result1 *config.OrgQuota, result2 error) {
	fake.getOrgQuotaMutex.Lock()
	defer fake.getOrgQuotaMutex.Unlock()
	fake.GetOrgQuotaStub = nil
	if fake.getOrgQuotaReturnsOnCall == nil {
		fake.getOrgQuotaReturnsOnCall = make(map[int]struct {
			result1 *config.OrgQuota
			result2 error
		})
	}
	fake.getOrgQuotaReturnsOnCall[i] = struct {
		result1 *config.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetOrgQuotas() ([]config.OrgQuota, error) {
	fake.getOrgQuotasMutex.Lock()
	ret, specificReturn := fake.getOrgQuotasReturnsOnCall[len(fake.getOrgQuotasArgsForCall)]
	fake.getOrgQuotasArgsForCall = append(fake.getOrgQuotasArgsForCall, struct {
	}{})
	stub := fake.GetOrgQuotasStub
	fakeReturns := fake.getOrgQuotasReturns
	fake.recordInvocation("GetOrgQuotas", []interface{}{})
	fake.getOrgQuotasMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetOrgQuotasCallCount() int {
	fake.getOrgQuotasMutex.RLock()
	defer fake.getOrgQuotasMutex.RUnlock()
	return len(fake.getOrgQuotasArgsForCall)
}

func (fake *FakeReader) GetOrgQuotasCalls(stub func() ([]config.OrgQuota, error)) {
	fake.getOrgQuotasMutex.Lock()
	defer fake.getOrgQuotasMutex.Unlock()
	fake.GetOrgQuotasStub = stub
}

func (fake *FakeReader) GetOrgQuotasReturns(result1 []config.OrgQuota, result2 error) {
	fake.getOrgQuotasMutex.Lock()
	defer fake.getOrgQuotasMutex.Unlock()
	fake.GetOrgQuotasStub = nil
	fake.getOrgQuotasReturns = struct {
		result1 []config.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetOrgQuotasReturnsOnCall(i int, result1 []config.OrgQuota, result2 error) {
	fake.getOrgQuotasMutex.Lock()
	defer fake.getOrgQuotasMutex.Unlock()
	fake.GetOrgQuotasStub = nil
	if fake.getOrgQuotasReturnsOnCall == nil {
		fake.getOrgQuotasReturnsOnCall = make(map[int]struct {
			result1 []config.OrgQuota
			result2 error
		})
	}
	fake.getOrgQuotasReturnsOnCall[i] = struct {
		result1 []config.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetSpaceConfig(arg1 string, arg2 string) (*config.SpaceConfig, error) {
	fake.getSpaceConfigMutex.Lock()
	ret, specificReturn := fake.getSpaceConfigReturnsOnCall[len(fake.getSpaceConfigArgsForCall)]
	fake.getSpaceConfigArgsForCall = append(fake.getSpaceConfigArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetSpaceConfigStub
	fakeReturns := fake.getSpaceConfigReturns
	fake.recordInvocation("GetSpaceConfig", []interface{}{arg1, arg2})
	fake.getSpaceConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetSpaceConfigCallCount() int {
	fake.getSpaceConfigMutex.RLock()
	defer fake.getSpaceConfigMutex.RUnlock()
	return len(fake.getSpaceConfigArgsForCall)
}

func (fake *FakeReader) GetSpaceConfigCalls(stub func(string, string) (*config.SpaceConfig, error)) {
	fake.getSpaceConfigMutex.Lock()
	defer fake.getSpaceConfigMutex.Unlock()
	fake.GetSpaceConfigStub = stub
}

func (fake *FakeReader) GetSpaceConfigArgsForCall(i int) (string, string) {
	fake.getSpaceConfigMutex.RLock()
	defer fake.getSpaceConfigMutex.RUnlock()
	argsForCall := fake.getSpaceConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReader) GetSpaceConfigReturns(result1 *config.SpaceConfig, result2 error) {
	fake.getSpaceConfigMutex.Lock()
	defer fake.getSpaceConfigMutex.Unlock()
	fake.GetSpaceConfigStub = nil
	fake.getSpaceConfigReturns = struct {
		result1 *config.SpaceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetSpaceConfigReturnsOnCall(i int, result1 *config.SpaceConfig, result2 error) {
	fake.getSpaceConfigMutex.Lock()
	defer fake.getSpaceConfigMutex.Unlock()
	fake.GetSpaceConfigStub = nil
	if fake.getSpaceConfigReturnsOnCall == nil {
		fake.getSpaceConfigReturnsOnCall = make(map[int]struct {
			result1 *config.SpaceConfig
			result2 error
		})
	}
	fake.getSpaceConfigReturnsOnCall[i] = struct {
		result1 *config.SpaceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetSpaceConfigs() ([]config.SpaceConfig, error) {
	fake.getSpaceConfigsMutex.Lock()
	ret, specificReturn := fake.getSpaceConfigsReturnsOnCall[len(fake.getSpaceConfigsArgsForCall)]
	fake.getSpaceConfigsArgsForCall = append(fake.getSpaceConfigsArgsForCall, struct {
	}{})
	stub := fake.GetSpaceConfigsStub
	fakeReturns := fake.getSpaceConfigsReturns
	fake.recordInvocation("GetSpaceConfigs", []interface{}{})
	fake.getSpaceConfigsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetSpaceConfigsCallCount() int {
	fake.getSpaceConfigsMutex.RLock()
	defer fake.getSpaceConfigsMutex.RUnlock()
	return len(fake.getSpaceConfigsArgsForCall)
}

func (fake *FakeReader) GetSpaceConfigsCalls(stub func() ([]config.SpaceConfig, error)) {
	fake.getSpaceConfigsMutex.Lock()
	defer fake.getSpaceConfigsMutex.Unlock()
	fake.GetSpaceConfigsStub = stub
}

func (fake *FakeReader) GetSpaceConfigsReturns(result1 []config.SpaceConfig, result2 error) {
	fake.getSpaceConfigsMutex.Lock()
	defer fake.getSpaceConfigsMutex.Unlock()
	fake.GetSpaceConfigsStub = nil
	fake.getSpaceConfigsReturns = struct {
		result1 []config.SpaceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetSpaceConfigsReturnsOnCall(i int, result1 []config.SpaceConfig, result2 error) {
	fake.getSpaceConfigsMutex.Lock()
	defer fake.getSpaceConfigsMutex.Unlock()
	fake.GetSpaceConfigsStub = nil
	if fake.getSpaceConfigsReturnsOnCall == nil {
		fake.getSpaceConfigsReturnsOnCall = make(map[int]struct {
			result1 []config.SpaceConfig
			result2 error
		})
	}
	fake.getSpaceConfigsReturnsOnCall[i] = struct {
		result1 []config.SpaceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetSpaceDefaults() (*config.SpaceConfig, error) {
	fake.getSpaceDefaultsMutex.Lock()
	ret, specificReturn := fake.getSpaceDefaultsReturnsOnCall[len(fake.getSpaceDefaultsArgsForCall)]
	fake.getSpaceDefaultsArgsForCall = append(fake.getSpaceDefaultsArgsForCall, struct {
	}{})
	stub := fake.GetSpaceDefaultsStub
	fakeReturns := fake.getSpaceDefaultsReturns
	fake.recordInvocation("GetSpaceDefaults", []interface{}{})
	fake.getSpaceDefaultsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetSpaceDefaultsCallCount() int {
	fake.getSpaceDefaultsMutex.RLock()
	defer fake.getSpaceDefaultsMutex.RUnlock()
	return len(fake.getSpaceDefaultsArgsForCall)
}

func (fake *FakeReader) GetSpaceDefaultsCalls(stub func() (*config.SpaceConfig, error)) {
	fake.getSpaceDefaultsMutex.Lock()
	defer fake.getSpaceDefaultsMutex.Unlock()
	fake.GetSpaceDefaultsStub = stub
}

func (fake *FakeReader) GetSpaceDefaultsReturns(result1 *config.SpaceConfig, result2 error) {
	fake.getSpaceDefaultsMutex.Lock()
	defer fake.getSpaceDefaultsMutex.Unlock()
	fake.GetSpaceDefaultsStub = nil
	fake.getSpaceDefaultsReturns = struct {
		result1 *config.SpaceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetSpaceDefaultsReturnsOnCall(i int, result1 *config.SpaceConfig, result2 error) {
	fake.getSpaceDefaultsMutex.Lock()
	defer fake.getSpaceDefaultsMutex.Unlock()
	fake.GetSpaceDefaultsStub = nil
	if fake.getSpaceDefaultsReturnsOnCall == nil {
		fake.getSpaceDefaultsReturnsOnCall = make(map[int]struct {
			result1 *config.SpaceConfig
			result2 error
		})
	}
	fake.getSpaceDefaultsReturnsOnCall[i] = struct {
		result1 *config.SpaceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetSpaceQuota(arg1 string, arg2 string) (*config.SpaceQuota, error) {
	fake.getSpaceQuotaMutex.Lock()
	ret, specificReturn := fake.getSpaceQuotaReturnsOnCall[len(fake.getSpaceQuotaArgsForCall)]
	fake.getSpaceQuotaArgsForCall = append(fake.getSpaceQuotaArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetSpaceQuotaStub
	fakeReturns := fake.getSpaceQuotaReturns
	fake.recordInvocation("GetSpaceQuota", []interface{}{arg1, arg2})
	fake.getSpaceQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetSpaceQuotaCallCount() int {
	fake.getSpaceQuotaMutex.RLock()
	defer fake.getSpaceQuotaMutex.RUnlock()
	return len(fake.getSpaceQuotaArgsForCall)
}

func (fake *FakeReader) GetSpaceQuotaCalls(stub func(string, string) (*config.SpaceQuota, error)) {
	fake.getSpaceQuotaMutex.Lock()
	defer fake.getSpaceQuotaMutex.Unlock()
	fake.GetSpaceQuotaStub = stub
}

func (fake *FakeReader) GetSpaceQuotaArgsForCall(i int) (string, string) {
	fake.getSpaceQuotaMutex.RLock()
	defer fake.getSpaceQuotaMutex.RUnlock()
	argsForCall := fake.getSpaceQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeReader) GetSpaceQuotaReturns(result1 *config.SpaceQuota, result2 error) {
	fake.getSpaceQuotaMutex.Lock()
	defer fake.getSpaceQuotaMutex.Unlock()
	fake.GetSpaceQuotaStub = nil
	fake.getSpaceQuotaReturns = struct {
		result1 *config.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetSpaceQuotaReturnsOnCall(i int, result1 *config.SpaceQuota, result2 error) {
	fake.getSpaceQuotaMutex.Lock()
	defer fake.getSpaceQuotaMutex.Unlock()
	fake.GetSpaceQuotaStub = nil
	if fake.getSpaceQuotaReturnsOnCall == nil {
		fake.getSpaceQuotaReturnsOnCall = make(map[int]struct {
			result1 *config.SpaceQuota
			result2 error
		})
	}
	fake.getSpaceQuotaReturnsOnCall[i] = struct {
		result1 *config.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetSpaceQuotas(arg1 string) ([]config.SpaceQuota, error) {
	fake.getSpaceQuotasMutex.Lock()
	ret, specificReturn := fake.getSpaceQuotasReturnsOnCall[len(fake.getSpaceQuotasArgsForCall)]
	fake.getSpaceQuotasArgsForCall = append(fake.getSpaceQuotasArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetSpaceQuotasStub
	fakeReturns := fake.getSpaceQuotasReturns
	fake.recordInvocation("GetSpaceQuotas", []interface{}{arg1})
	fake.getSpaceQuotasMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) GetSpaceQuotasCallCount() int {
	fake.getSpaceQuotasMutex.RLock()
	defer fake.getSpaceQuotasMutex.RUnlock()
	return len(fake.getSpaceQuotasArgsForCall)
}

func (fake *FakeReader) GetSpaceQuotasCalls(stub func(string) ([]config.SpaceQuota, error)) {
	fake.getSpaceQuotasMutex.Lock()
	defer fake.getSpaceQuotasMutex.Unlock()
	fake.GetSpaceQuotasStub = stub
}

func (fake *FakeReader) GetSpaceQuotasArgsForCall(i int) string {
	fake.getSpaceQuotasMutex.RLock()
	defer fake.getSpaceQuotasMutex.RUnlock()
	argsForCall := fake.getSpaceQuotasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReader) GetSpaceQuotasReturns(result1 []config.SpaceQuota, result2 error) {
	fake.getSpaceQuotasMutex.Lock()
	defer fake.getSpaceQuotasMutex.Unlock()
	fake.GetSpaceQuotasStub = nil
	fake.getSpaceQuotasReturns = struct {
		result1 []config.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) GetSpaceQuotasReturnsOnCall(i int, result1 []config.SpaceQuota, result2 error) {
	fake.getSpaceQuotasMutex.Lock()
	defer fake.getSpaceQuotasMutex.Unlock()
	fake.GetSpaceQuotasStub = nil
	if fake.getSpaceQuotasReturnsOnCall == nil {
		fake.getSpaceQuotasReturnsOnCall = make(map[int]struct {
			result1 []config.SpaceQuota
			result2 error
		})
	}
	fake.getSpaceQuotasReturnsOnCall[i] = struct {
		result1 []config.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) LdapConfig(arg1 string, arg2 string, arg3 string) (*config.LdapConfig, error) {
	fake.ldapConfigMutex.Lock()
	ret, specificReturn := fake.ldapConfigReturnsOnCall[len(fake.ldapConfigArgsForCall)]
	fake.ldapConfigArgsForCall = append(fake.ldapConfigArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.LdapConfigStub
	fakeReturns := fake.ldapConfigReturns
	fake.recordInvocation("LdapConfig", []interface{}{arg1, arg2, arg3})
	fake.ldapConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) LdapConfigCallCount() int {
	fake.ldapConfigMutex.RLock()
	defer fake.ldapConfigMutex.RUnlock()
	return len(fake.ldapConfigArgsForCall)
}

func (fake *FakeReader) LdapConfigCalls(stub func(string, string, string) (*config.LdapConfig, error)) {
	fake.ldapConfigMutex.Lock()
	defer fake.ldapConfigMutex.Unlock()
	fake.LdapConfigStub = stub
}

func (fake *FakeReader) LdapConfigArgsForCall(i int) (string, string, string) {
	fake.ldapConfigMutex.RLock()
	defer fake.ldapConfigMutex.RUnlock()
	argsForCall := fake.ldapConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeReader) LdapConfigReturns(result1 *config.LdapConfig, result2 error) {
	fake.ldapConfigMutex.Lock()
	defer fake.ldapConfigMutex.Unlock()
	fake.LdapConfigStub = nil
	fake.ldapConfigReturns = struct {
		result1 *config.LdapConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) LdapConfigReturnsOnCall(i int, result1 *config.LdapConfig, result2 error) {
	fake.ldapConfigMutex.Lock()
	defer fake.ldapConfigMutex.Unlock()
	fake.LdapConfigStub = nil
	if fake.ldapConfigReturnsOnCall == nil {
		fake.ldapConfigReturnsOnCall = make(map[int]struct {
			result1 *config.LdapConfig
			result2 error
		})
	}
	fake.ldapConfigReturnsOnCall[i] = struct {
		result1 *config.LdapConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) OrgSpaces(arg1 string) (*config.Spaces, error) {
	fake.orgSpacesMutex.Lock()
	ret, specificReturn := fake.orgSpacesReturnsOnCall[len(fake.orgSpacesArgsForCall)]
	fake.orgSpacesArgsForCall = append(fake.orgSpacesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.OrgSpacesStub
	fakeReturns := fake.orgSpacesReturns
	fake.recordInvocation("OrgSpaces", []interface{}{arg1})
	fake.orgSpacesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) OrgSpacesCallCount() int {
	fake.orgSpacesMutex.RLock()
	defer fake.orgSpacesMutex.RUnlock()
	return len(fake.orgSpacesArgsForCall)
}

func (fake *FakeReader) OrgSpacesCalls(stub func(string) (*config.Spaces, error)) {
	fake.orgSpacesMutex.Lock()
	defer fake.orgSpacesMutex.Unlock()
	fake.OrgSpacesStub = stub
}

func (fake *FakeReader) OrgSpacesArgsForCall(i int) string {
	fake.orgSpacesMutex.RLock()
	defer fake.orgSpacesMutex.RUnlock()
	argsForCall := fake.orgSpacesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeReader) OrgSpacesReturns(result1 *config.Spaces, result2 error) {
	fake.orgSpacesMutex.Lock()
	defer fake.orgSpacesMutex.Unlock()
	fake.OrgSpacesStub = nil
	fake.orgSpacesReturns = struct {
		result1 *config.Spaces
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) OrgSpacesReturnsOnCall(i int, result1 *config.Spaces, result2 error) {
	fake.orgSpacesMutex.Lock()
	defer fake.orgSpacesMutex.Unlock()
	fake.OrgSpacesStub = nil
	if fake.orgSpacesReturnsOnCall == nil {
		fake.orgSpacesReturnsOnCall = make(map[int]struct {
			result1 *config.Spaces
			result2 error
		})
	}
	fake.orgSpacesReturnsOnCall[i] = struct {
		result1 *config.Spaces
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) Orgs() (*config.Orgs, error) {
	fake.orgsMutex.Lock()
	ret, specificReturn := fake.orgsReturnsOnCall[len(fake.orgsArgsForCall)]
	fake.orgsArgsForCall = append(fake.orgsArgsForCall, struct {
	}{})
	stub := fake.OrgsStub
	fakeReturns := fake.orgsReturns
	fake.recordInvocation("Orgs", []interface{}{})
	fake.orgsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) OrgsCallCount() int {
	fake.orgsMutex.RLock()
	defer fake.orgsMutex.RUnlock()
	return len(fake.orgsArgsForCall)
}

func (fake *FakeReader) OrgsCalls(stub func() (*config.Orgs, error)) {
	fake.orgsMutex.Lock()
	defer fake.orgsMutex.Unlock()
	fake.OrgsStub = stub
}

func (fake *FakeReader) OrgsReturns(result1 *config.Orgs, result2 error) {
	fake.orgsMutex.Lock()
	defer fake.orgsMutex.Unlock()
	fake.OrgsStub = nil
	fake.orgsReturns = struct {
		result1 *config.Orgs
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) OrgsReturnsOnCall(i int, result1 *config.Orgs, result2 error) {
	fake.orgsMutex.Lock()
	defer fake.orgsMutex.Unlock()
	fake.OrgsStub = nil
	if fake.orgsReturnsOnCall == nil {
		fake.orgsReturnsOnCall = make(map[int]struct {
			result1 *config.Orgs
			result2 error
		})
	}
	fake.orgsReturnsOnCall[i] = struct {
		result1 *config.Orgs
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) Spaces() ([]config.Spaces, error) {
	fake.spacesMutex.Lock()
	ret, specificReturn := fake.spacesReturnsOnCall[len(fake.spacesArgsForCall)]
	fake.spacesArgsForCall = append(fake.spacesArgsForCall, struct {
	}{})
	stub := fake.SpacesStub
	fakeReturns := fake.spacesReturns
	fake.recordInvocation("Spaces", []interface{}{})
	fake.spacesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeReader) SpacesCallCount() int {
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	return len(fake.spacesArgsForCall)
}

func (fake *FakeReader) SpacesCalls(stub func() ([]config.Spaces, error)) {
	fake.spacesMutex.Lock()
	defer fake.spacesMutex.Unlock()
	fake.SpacesStub = stub
}

func (fake *FakeReader) SpacesReturns(result1 []config.Spaces, result2 error) {
	fake.spacesMutex.Lock()
	defer fake.spacesMutex.Unlock()
	fake.SpacesStub = nil
	fake.spacesReturns = struct {
		result1 []config.Spaces
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) SpacesReturnsOnCall(i int, result1 []config.Spaces, result2 error) {
	fake.spacesMutex.Lock()
	defer fake.spacesMutex.Unlock()
	fake.SpacesStub = nil
	if fake.spacesReturnsOnCall == nil {
		fake.spacesReturnsOnCall = make(map[int]struct {
			result1 []config.Spaces
			result2 error
		})
	}
	fake.spacesReturnsOnCall[i] = struct {
		result1 []config.Spaces
		result2 error
	}{result1, result2}
}

func (fake *FakeReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getASGConfigsMutex.RLock()
	defer fake.getASGConfigsMutex.RUnlock()
	fake.getDefaultASGConfigsMutex.RLock()
	defer fake.getDefaultASGConfigsMutex.RUnlock()
	fake.getGlobalConfigMutex.RLock()
	defer fake.getGlobalConfigMutex.RUnlock()
	fake.getOrgConfigMutex.RLock()
	defer fake.getOrgConfigMutex.RUnlock()
	fake.getOrgConfigsMutex.RLock()
	defer fake.getOrgConfigsMutex.RUnlock()
	fake.getOrgQuotaMutex.RLock()
	defer fake.getOrgQuotaMutex.RUnlock()
	fake.getOrgQuotasMutex.RLock()
	defer fake.getOrgQuotasMutex.RUnlock()
	fake.getSpaceConfigMutex.RLock()
	defer fake.getSpaceConfigMutex.RUnlock()
	fake.getSpaceConfigsMutex.RLock()
	defer fake.getSpaceConfigsMutex.RUnlock()
	fake.getSpaceDefaultsMutex.RLock()
	defer fake.getSpaceDefaultsMutex.RUnlock()
	fake.getSpaceQuotaMutex.RLock()
	defer fake.getSpaceQuotaMutex.RUnlock()
	fake.getSpaceQuotasMutex.RLock()
	defer fake.getSpaceQuotasMutex.RUnlock()
	fake.ldapConfigMutex.RLock()
	defer fake.ldapConfigMutex.RUnlock()
	fake.orgSpacesMutex.RLock()
	defer fake.orgSpacesMutex.RUnlock()
	fake.orgsMutex.RLock()
	defer fake.orgsMutex.RUnlock()
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.Reader = new(FakeReader)
