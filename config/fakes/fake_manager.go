// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmwarepivotallabs/cf-mgmt/config"
)

type FakeManager struct {
	AddDefaultSecurityGroupStub        func(string, []byte) error
	addDefaultSecurityGroupMutex       sync.RWMutex
	addDefaultSecurityGroupArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	addDefaultSecurityGroupReturns struct {
		result1 error
	}
	addDefaultSecurityGroupReturnsOnCall map[int]struct {
		result1 error
	}
	AddOrgQuotaStub        func(config.OrgQuota) error
	addOrgQuotaMutex       sync.RWMutex
	addOrgQuotaArgsForCall []struct {
		arg1 config.OrgQuota
	}
	addOrgQuotaReturns struct {
		result1 error
	}
	addOrgQuotaReturnsOnCall map[int]struct {
		result1 error
	}
	AddOrgToConfigStub        func(*config.OrgConfig) error
	addOrgToConfigMutex       sync.RWMutex
	addOrgToConfigArgsForCall []struct {
		arg1 *config.OrgConfig
	}
	addOrgToConfigReturns struct {
		result1 error
	}
	addOrgToConfigReturnsOnCall map[int]struct {
		result1 error
	}
	AddSecurityGroupStub        func(string, []byte) error
	addSecurityGroupMutex       sync.RWMutex
	addSecurityGroupArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	addSecurityGroupReturns struct {
		result1 error
	}
	addSecurityGroupReturnsOnCall map[int]struct {
		result1 error
	}
	AddSecurityGroupToSpaceStub        func(string, string, []byte) error
	addSecurityGroupToSpaceMutex       sync.RWMutex
	addSecurityGroupToSpaceArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []byte
	}
	addSecurityGroupToSpaceReturns struct {
		result1 error
	}
	addSecurityGroupToSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	AddSpaceQuotaStub        func(config.SpaceQuota) error
	addSpaceQuotaMutex       sync.RWMutex
	addSpaceQuotaArgsForCall []struct {
		arg1 config.SpaceQuota
	}
	addSpaceQuotaReturns struct {
		result1 error
	}
	addSpaceQuotaReturnsOnCall map[int]struct {
		result1 error
	}
	AddSpaceToConfigStub        func(*config.SpaceConfig) error
	addSpaceToConfigMutex       sync.RWMutex
	addSpaceToConfigArgsForCall []struct {
		arg1 *config.SpaceConfig
	}
	addSpaceToConfigReturns struct {
		result1 error
	}
	addSpaceToConfigReturnsOnCall map[int]struct {
		result1 error
	}
	AssociateOrgAuditorStub        func(config.UserOrigin, string, string) error
	associateOrgAuditorMutex       sync.RWMutex
	associateOrgAuditorArgsForCall []struct {
		arg1 config.UserOrigin
		arg2 string
		arg3 string
	}
	associateOrgAuditorReturns struct {
		result1 error
	}
	associateOrgAuditorReturnsOnCall map[int]struct {
		result1 error
	}
	AssociateSpaceAuditorStub        func(config.UserOrigin, string, string, string) error
	associateSpaceAuditorMutex       sync.RWMutex
	associateSpaceAuditorArgsForCall []struct {
		arg1 config.UserOrigin
		arg2 string
		arg3 string
		arg4 string
	}
	associateSpaceAuditorReturns struct {
		result1 error
	}
	associateSpaceAuditorReturnsOnCall map[int]struct {
		result1 error
	}
	AssociateSpaceDeveloperStub        func(config.UserOrigin, string, string, string) error
	associateSpaceDeveloperMutex       sync.RWMutex
	associateSpaceDeveloperArgsForCall []struct {
		arg1 config.UserOrigin
		arg2 string
		arg3 string
		arg4 string
	}
	associateSpaceDeveloperReturns struct {
		result1 error
	}
	associateSpaceDeveloperReturnsOnCall map[int]struct {
		result1 error
	}
	CreateConfigIfNotExistsStub        func(string) error
	createConfigIfNotExistsMutex       sync.RWMutex
	createConfigIfNotExistsArgsForCall []struct {
		arg1 string
	}
	createConfigIfNotExistsReturns struct {
		result1 error
	}
	createConfigIfNotExistsReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteConfigIfExistsStub        func() error
	deleteConfigIfExistsMutex       sync.RWMutex
	deleteConfigIfExistsArgsForCall []struct {
	}
	deleteConfigIfExistsReturns struct {
		result1 error
	}
	deleteConfigIfExistsReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteOrgConfigStub        func(string) error
	deleteOrgConfigMutex       sync.RWMutex
	deleteOrgConfigArgsForCall []struct {
		arg1 string
	}
	deleteOrgConfigReturns struct {
		result1 error
	}
	deleteOrgConfigReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteSpaceConfigStub        func(string, string) error
	deleteSpaceConfigMutex       sync.RWMutex
	deleteSpaceConfigArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteSpaceConfigReturns struct {
		result1 error
	}
	deleteSpaceConfigReturnsOnCall map[int]struct {
		result1 error
	}
	GetASGConfigsStub        func() ([]config.ASGConfig, error)
	getASGConfigsMutex       sync.RWMutex
	getASGConfigsArgsForCall []struct {
	}
	getASGConfigsReturns struct {
		result1 []config.ASGConfig
		result2 error
	}
	getASGConfigsReturnsOnCall map[int]struct {
		result1 []config.ASGConfig
		result2 error
	}
	GetDefaultASGConfigsStub        func() ([]config.ASGConfig, error)
	getDefaultASGConfigsMutex       sync.RWMutex
	getDefaultASGConfigsArgsForCall []struct {
	}
	getDefaultASGConfigsReturns struct {
		result1 []config.ASGConfig
		result2 error
	}
	getDefaultASGConfigsReturnsOnCall map[int]struct {
		result1 []config.ASGConfig
		result2 error
	}
	GetGlobalConfigStub        func() (*config.GlobalConfig, error)
	getGlobalConfigMutex       sync.RWMutex
	getGlobalConfigArgsForCall []struct {
	}
	getGlobalConfigReturns struct {
		result1 *config.GlobalConfig
		result2 error
	}
	getGlobalConfigReturnsOnCall map[int]struct {
		result1 *config.GlobalConfig
		result2 error
	}
	GetOrgConfigStub        func(string) (*config.OrgConfig, error)
	getOrgConfigMutex       sync.RWMutex
	getOrgConfigArgsForCall []struct {
		arg1 string
	}
	getOrgConfigReturns struct {
		result1 *config.OrgConfig
		result2 error
	}
	getOrgConfigReturnsOnCall map[int]struct {
		result1 *config.OrgConfig
		result2 error
	}
	GetOrgConfigsStub        func() ([]config.OrgConfig, error)
	getOrgConfigsMutex       sync.RWMutex
	getOrgConfigsArgsForCall []struct {
	}
	getOrgConfigsReturns struct {
		result1 []config.OrgConfig
		result2 error
	}
	getOrgConfigsReturnsOnCall map[int]struct {
		result1 []config.OrgConfig
		result2 error
	}
	GetOrgQuotaStub        func(string) (*config.OrgQuota, error)
	getOrgQuotaMutex       sync.RWMutex
	getOrgQuotaArgsForCall []struct {
		arg1 string
	}
	getOrgQuotaReturns struct {
		result1 *config.OrgQuota
		result2 error
	}
	getOrgQuotaReturnsOnCall map[int]struct {
		result1 *config.OrgQuota
		result2 error
	}
	GetOrgQuotasStub        func() ([]config.OrgQuota, error)
	getOrgQuotasMutex       sync.RWMutex
	getOrgQuotasArgsForCall []struct {
	}
	getOrgQuotasReturns struct {
		result1 []config.OrgQuota
		result2 error
	}
	getOrgQuotasReturnsOnCall map[int]struct {
		result1 []config.OrgQuota
		result2 error
	}
	GetSpaceConfigStub        func(string, string) (*config.SpaceConfig, error)
	getSpaceConfigMutex       sync.RWMutex
	getSpaceConfigArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getSpaceConfigReturns struct {
		result1 *config.SpaceConfig
		result2 error
	}
	getSpaceConfigReturnsOnCall map[int]struct {
		result1 *config.SpaceConfig
		result2 error
	}
	GetSpaceConfigsStub        func() ([]config.SpaceConfig, error)
	getSpaceConfigsMutex       sync.RWMutex
	getSpaceConfigsArgsForCall []struct {
	}
	getSpaceConfigsReturns struct {
		result1 []config.SpaceConfig
		result2 error
	}
	getSpaceConfigsReturnsOnCall map[int]struct {
		result1 []config.SpaceConfig
		result2 error
	}
	GetSpaceDefaultsStub        func() (*config.SpaceConfig, error)
	getSpaceDefaultsMutex       sync.RWMutex
	getSpaceDefaultsArgsForCall []struct {
	}
	getSpaceDefaultsReturns struct {
		result1 *config.SpaceConfig
		result2 error
	}
	getSpaceDefaultsReturnsOnCall map[int]struct {
		result1 *config.SpaceConfig
		result2 error
	}
	GetSpaceQuotaStub        func(string, string) (*config.SpaceQuota, error)
	getSpaceQuotaMutex       sync.RWMutex
	getSpaceQuotaArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getSpaceQuotaReturns struct {
		result1 *config.SpaceQuota
		result2 error
	}
	getSpaceQuotaReturnsOnCall map[int]struct {
		result1 *config.SpaceQuota
		result2 error
	}
	GetSpaceQuotasStub        func(string) ([]config.SpaceQuota, error)
	getSpaceQuotasMutex       sync.RWMutex
	getSpaceQuotasArgsForCall []struct {
		arg1 string
	}
	getSpaceQuotasReturns struct {
		result1 []config.SpaceQuota
		result2 error
	}
	getSpaceQuotasReturnsOnCall map[int]struct {
		result1 []config.SpaceQuota
		result2 error
	}
	LdapConfigStub        func(string, string, string) (*config.LdapConfig, error)
	ldapConfigMutex       sync.RWMutex
	ldapConfigArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	ldapConfigReturns struct {
		result1 *config.LdapConfig
		result2 error
	}
	ldapConfigReturnsOnCall map[int]struct {
		result1 *config.LdapConfig
		result2 error
	}
	OrgSpacesStub        func(string) (*config.Spaces, error)
	orgSpacesMutex       sync.RWMutex
	orgSpacesArgsForCall []struct {
		arg1 string
	}
	orgSpacesReturns struct {
		result1 *config.Spaces
		result2 error
	}
	orgSpacesReturnsOnCall map[int]struct {
		result1 *config.Spaces
		result2 error
	}
	OrgsStub        func() (*config.Orgs, error)
	orgsMutex       sync.RWMutex
	orgsArgsForCall []struct {
	}
	orgsReturns struct {
		result1 *config.Orgs
		result2 error
	}
	orgsReturnsOnCall map[int]struct {
		result1 *config.Orgs
		result2 error
	}
	RenameOrgConfigStub        func(*config.OrgConfig) error
	renameOrgConfigMutex       sync.RWMutex
	renameOrgConfigArgsForCall []struct {
		arg1 *config.OrgConfig
	}
	renameOrgConfigReturns struct {
		result1 error
	}
	renameOrgConfigReturnsOnCall map[int]struct {
		result1 error
	}
	RenameSpaceConfigStub        func(*config.SpaceConfig) error
	renameSpaceConfigMutex       sync.RWMutex
	renameSpaceConfigArgsForCall []struct {
		arg1 *config.SpaceConfig
	}
	renameSpaceConfigReturns struct {
		result1 error
	}
	renameSpaceConfigReturnsOnCall map[int]struct {
		result1 error
	}
	SaveGlobalConfigStub        func(*config.GlobalConfig) error
	saveGlobalConfigMutex       sync.RWMutex
	saveGlobalConfigArgsForCall []struct {
		arg1 *config.GlobalConfig
	}
	saveGlobalConfigReturns struct {
		result1 error
	}
	saveGlobalConfigReturnsOnCall map[int]struct {
		result1 error
	}
	SaveOrgConfigStub        func(*config.OrgConfig) error
	saveOrgConfigMutex       sync.RWMutex
	saveOrgConfigArgsForCall []struct {
		arg1 *config.OrgConfig
	}
	saveOrgConfigReturns struct {
		result1 error
	}
	saveOrgConfigReturnsOnCall map[int]struct {
		result1 error
	}
	SaveOrgQuotaStub        func(*config.OrgQuota) error
	saveOrgQuotaMutex       sync.RWMutex
	saveOrgQuotaArgsForCall []struct {
		arg1 *config.OrgQuota
	}
	saveOrgQuotaReturns struct {
		result1 error
	}
	saveOrgQuotaReturnsOnCall map[int]struct {
		result1 error
	}
	SaveOrgSpacesStub        func(*config.Spaces) error
	saveOrgSpacesMutex       sync.RWMutex
	saveOrgSpacesArgsForCall []struct {
		arg1 *config.Spaces
	}
	saveOrgSpacesReturns struct {
		result1 error
	}
	saveOrgSpacesReturnsOnCall map[int]struct {
		result1 error
	}
	SaveOrgsStub        func(*config.Orgs) error
	saveOrgsMutex       sync.RWMutex
	saveOrgsArgsForCall []struct {
		arg1 *config.Orgs
	}
	saveOrgsReturns struct {
		result1 error
	}
	saveOrgsReturnsOnCall map[int]struct {
		result1 error
	}
	SaveSpaceConfigStub        func(*config.SpaceConfig) error
	saveSpaceConfigMutex       sync.RWMutex
	saveSpaceConfigArgsForCall []struct {
		arg1 *config.SpaceConfig
	}
	saveSpaceConfigReturns struct {
		result1 error
	}
	saveSpaceConfigReturnsOnCall map[int]struct {
		result1 error
	}
	SaveSpaceQuotaStub        func(*config.SpaceQuota) error
	saveSpaceQuotaMutex       sync.RWMutex
	saveSpaceQuotaArgsForCall []struct {
		arg1 *config.SpaceQuota
	}
	saveSpaceQuotaReturns struct {
		result1 error
	}
	saveSpaceQuotaReturnsOnCall map[int]struct {
		result1 error
	}
	SpacesStub        func() ([]config.Spaces, error)
	spacesMutex       sync.RWMutex
	spacesArgsForCall []struct {
	}
	spacesReturns struct {
		result1 []config.Spaces
		result2 error
	}
	spacesReturnsOnCall map[int]struct {
		result1 []config.Spaces
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) AddDefaultSecurityGroup(arg1 string, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.addDefaultSecurityGroupMutex.Lock()
	ret, specificReturn := fake.addDefaultSecurityGroupReturnsOnCall[len(fake.addDefaultSecurityGroupArgsForCall)]
	fake.addDefaultSecurityGroupArgsForCall = append(fake.addDefaultSecurityGroupArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.AddDefaultSecurityGroupStub
	fakeReturns := fake.addDefaultSecurityGroupReturns
	fake.recordInvocation("AddDefaultSecurityGroup", []interface{}{arg1, arg2Copy})
	fake.addDefaultSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AddDefaultSecurityGroupCallCount() int {
	fake.addDefaultSecurityGroupMutex.RLock()
	defer fake.addDefaultSecurityGroupMutex.RUnlock()
	return len(fake.addDefaultSecurityGroupArgsForCall)
}

func (fake *FakeManager) AddDefaultSecurityGroupCalls(stub func(string, []byte) error) {
	fake.addDefaultSecurityGroupMutex.Lock()
	defer fake.addDefaultSecurityGroupMutex.Unlock()
	fake.AddDefaultSecurityGroupStub = stub
}

func (fake *FakeManager) AddDefaultSecurityGroupArgsForCall(i int) (string, []byte) {
	fake.addDefaultSecurityGroupMutex.RLock()
	defer fake.addDefaultSecurityGroupMutex.RUnlock()
	argsForCall := fake.addDefaultSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) AddDefaultSecurityGroupReturns(result1 error) {
	fake.addDefaultSecurityGroupMutex.Lock()
	defer fake.addDefaultSecurityGroupMutex.Unlock()
	fake.AddDefaultSecurityGroupStub = nil
	fake.addDefaultSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddDefaultSecurityGroupReturnsOnCall(i int, result1 error) {
	fake.addDefaultSecurityGroupMutex.Lock()
	defer fake.addDefaultSecurityGroupMutex.Unlock()
	fake.AddDefaultSecurityGroupStub = nil
	if fake.addDefaultSecurityGroupReturnsOnCall == nil {
		fake.addDefaultSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addDefaultSecurityGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddOrgQuota(arg1 config.OrgQuota) error {
	fake.addOrgQuotaMutex.Lock()
	ret, specificReturn := fake.addOrgQuotaReturnsOnCall[len(fake.addOrgQuotaArgsForCall)]
	fake.addOrgQuotaArgsForCall = append(fake.addOrgQuotaArgsForCall, struct {
		arg1 config.OrgQuota
	}{arg1})
	stub := fake.AddOrgQuotaStub
	fakeReturns := fake.addOrgQuotaReturns
	fake.recordInvocation("AddOrgQuota", []interface{}{arg1})
	fake.addOrgQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AddOrgQuotaCallCount() int {
	fake.addOrgQuotaMutex.RLock()
	defer fake.addOrgQuotaMutex.RUnlock()
	return len(fake.addOrgQuotaArgsForCall)
}

func (fake *FakeManager) AddOrgQuotaCalls(stub func(config.OrgQuota) error) {
	fake.addOrgQuotaMutex.Lock()
	defer fake.addOrgQuotaMutex.Unlock()
	fake.AddOrgQuotaStub = stub
}

func (fake *FakeManager) AddOrgQuotaArgsForCall(i int) config.OrgQuota {
	fake.addOrgQuotaMutex.RLock()
	defer fake.addOrgQuotaMutex.RUnlock()
	argsForCall := fake.addOrgQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) AddOrgQuotaReturns(result1 error) {
	fake.addOrgQuotaMutex.Lock()
	defer fake.addOrgQuotaMutex.Unlock()
	fake.AddOrgQuotaStub = nil
	fake.addOrgQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddOrgQuotaReturnsOnCall(i int, result1 error) {
	fake.addOrgQuotaMutex.Lock()
	defer fake.addOrgQuotaMutex.Unlock()
	fake.AddOrgQuotaStub = nil
	if fake.addOrgQuotaReturnsOnCall == nil {
		fake.addOrgQuotaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addOrgQuotaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddOrgToConfig(arg1 *config.OrgConfig) error {
	fake.addOrgToConfigMutex.Lock()
	ret, specificReturn := fake.addOrgToConfigReturnsOnCall[len(fake.addOrgToConfigArgsForCall)]
	fake.addOrgToConfigArgsForCall = append(fake.addOrgToConfigArgsForCall, struct {
		arg1 *config.OrgConfig
	}{arg1})
	stub := fake.AddOrgToConfigStub
	fakeReturns := fake.addOrgToConfigReturns
	fake.recordInvocation("AddOrgToConfig", []interface{}{arg1})
	fake.addOrgToConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AddOrgToConfigCallCount() int {
	fake.addOrgToConfigMutex.RLock()
	defer fake.addOrgToConfigMutex.RUnlock()
	return len(fake.addOrgToConfigArgsForCall)
}

func (fake *FakeManager) AddOrgToConfigCalls(stub func(*config.OrgConfig) error) {
	fake.addOrgToConfigMutex.Lock()
	defer fake.addOrgToConfigMutex.Unlock()
	fake.AddOrgToConfigStub = stub
}

func (fake *FakeManager) AddOrgToConfigArgsForCall(i int) *config.OrgConfig {
	fake.addOrgToConfigMutex.RLock()
	defer fake.addOrgToConfigMutex.RUnlock()
	argsForCall := fake.addOrgToConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) AddOrgToConfigReturns(result1 error) {
	fake.addOrgToConfigMutex.Lock()
	defer fake.addOrgToConfigMutex.Unlock()
	fake.AddOrgToConfigStub = nil
	fake.addOrgToConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddOrgToConfigReturnsOnCall(i int, result1 error) {
	fake.addOrgToConfigMutex.Lock()
	defer fake.addOrgToConfigMutex.Unlock()
	fake.AddOrgToConfigStub = nil
	if fake.addOrgToConfigReturnsOnCall == nil {
		fake.addOrgToConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addOrgToConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddSecurityGroup(arg1 string, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.addSecurityGroupMutex.Lock()
	ret, specificReturn := fake.addSecurityGroupReturnsOnCall[len(fake.addSecurityGroupArgsForCall)]
	fake.addSecurityGroupArgsForCall = append(fake.addSecurityGroupArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.AddSecurityGroupStub
	fakeReturns := fake.addSecurityGroupReturns
	fake.recordInvocation("AddSecurityGroup", []interface{}{arg1, arg2Copy})
	fake.addSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AddSecurityGroupCallCount() int {
	fake.addSecurityGroupMutex.RLock()
	defer fake.addSecurityGroupMutex.RUnlock()
	return len(fake.addSecurityGroupArgsForCall)
}

func (fake *FakeManager) AddSecurityGroupCalls(stub func(string, []byte) error) {
	fake.addSecurityGroupMutex.Lock()
	defer fake.addSecurityGroupMutex.Unlock()
	fake.AddSecurityGroupStub = stub
}

func (fake *FakeManager) AddSecurityGroupArgsForCall(i int) (string, []byte) {
	fake.addSecurityGroupMutex.RLock()
	defer fake.addSecurityGroupMutex.RUnlock()
	argsForCall := fake.addSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) AddSecurityGroupReturns(result1 error) {
	fake.addSecurityGroupMutex.Lock()
	defer fake.addSecurityGroupMutex.Unlock()
	fake.AddSecurityGroupStub = nil
	fake.addSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddSecurityGroupReturnsOnCall(i int, result1 error) {
	fake.addSecurityGroupMutex.Lock()
	defer fake.addSecurityGroupMutex.Unlock()
	fake.AddSecurityGroupStub = nil
	if fake.addSecurityGroupReturnsOnCall == nil {
		fake.addSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addSecurityGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddSecurityGroupToSpace(arg1 string, arg2 string, arg3 []byte) error {
	var arg3Copy []byte
	if arg3 != nil {
		arg3Copy = make([]byte, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.addSecurityGroupToSpaceMutex.Lock()
	ret, specificReturn := fake.addSecurityGroupToSpaceReturnsOnCall[len(fake.addSecurityGroupToSpaceArgsForCall)]
	fake.addSecurityGroupToSpaceArgsForCall = append(fake.addSecurityGroupToSpaceArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []byte
	}{arg1, arg2, arg3Copy})
	stub := fake.AddSecurityGroupToSpaceStub
	fakeReturns := fake.addSecurityGroupToSpaceReturns
	fake.recordInvocation("AddSecurityGroupToSpace", []interface{}{arg1, arg2, arg3Copy})
	fake.addSecurityGroupToSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AddSecurityGroupToSpaceCallCount() int {
	fake.addSecurityGroupToSpaceMutex.RLock()
	defer fake.addSecurityGroupToSpaceMutex.RUnlock()
	return len(fake.addSecurityGroupToSpaceArgsForCall)
}

func (fake *FakeManager) AddSecurityGroupToSpaceCalls(stub func(string, string, []byte) error) {
	fake.addSecurityGroupToSpaceMutex.Lock()
	defer fake.addSecurityGroupToSpaceMutex.Unlock()
	fake.AddSecurityGroupToSpaceStub = stub
}

func (fake *FakeManager) AddSecurityGroupToSpaceArgsForCall(i int) (string, string, []byte) {
	fake.addSecurityGroupToSpaceMutex.RLock()
	defer fake.addSecurityGroupToSpaceMutex.RUnlock()
	argsForCall := fake.addSecurityGroupToSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeManager) AddSecurityGroupToSpaceReturns(result1 error) {
	fake.addSecurityGroupToSpaceMutex.Lock()
	defer fake.addSecurityGroupToSpaceMutex.Unlock()
	fake.AddSecurityGroupToSpaceStub = nil
	fake.addSecurityGroupToSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddSecurityGroupToSpaceReturnsOnCall(i int, result1 error) {
	fake.addSecurityGroupToSpaceMutex.Lock()
	defer fake.addSecurityGroupToSpaceMutex.Unlock()
	fake.AddSecurityGroupToSpaceStub = nil
	if fake.addSecurityGroupToSpaceReturnsOnCall == nil {
		fake.addSecurityGroupToSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addSecurityGroupToSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddSpaceQuota(arg1 config.SpaceQuota) error {
	fake.addSpaceQuotaMutex.Lock()
	ret, specificReturn := fake.addSpaceQuotaReturnsOnCall[len(fake.addSpaceQuotaArgsForCall)]
	fake.addSpaceQuotaArgsForCall = append(fake.addSpaceQuotaArgsForCall, struct {
		arg1 config.SpaceQuota
	}{arg1})
	stub := fake.AddSpaceQuotaStub
	fakeReturns := fake.addSpaceQuotaReturns
	fake.recordInvocation("AddSpaceQuota", []interface{}{arg1})
	fake.addSpaceQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AddSpaceQuotaCallCount() int {
	fake.addSpaceQuotaMutex.RLock()
	defer fake.addSpaceQuotaMutex.RUnlock()
	return len(fake.addSpaceQuotaArgsForCall)
}

func (fake *FakeManager) AddSpaceQuotaCalls(stub func(config.SpaceQuota) error) {
	fake.addSpaceQuotaMutex.Lock()
	defer fake.addSpaceQuotaMutex.Unlock()
	fake.AddSpaceQuotaStub = stub
}

func (fake *FakeManager) AddSpaceQuotaArgsForCall(i int) config.SpaceQuota {
	fake.addSpaceQuotaMutex.RLock()
	defer fake.addSpaceQuotaMutex.RUnlock()
	argsForCall := fake.addSpaceQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) AddSpaceQuotaReturns(result1 error) {
	fake.addSpaceQuotaMutex.Lock()
	defer fake.addSpaceQuotaMutex.Unlock()
	fake.AddSpaceQuotaStub = nil
	fake.addSpaceQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddSpaceQuotaReturnsOnCall(i int, result1 error) {
	fake.addSpaceQuotaMutex.Lock()
	defer fake.addSpaceQuotaMutex.Unlock()
	fake.AddSpaceQuotaStub = nil
	if fake.addSpaceQuotaReturnsOnCall == nil {
		fake.addSpaceQuotaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addSpaceQuotaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddSpaceToConfig(arg1 *config.SpaceConfig) error {
	fake.addSpaceToConfigMutex.Lock()
	ret, specificReturn := fake.addSpaceToConfigReturnsOnCall[len(fake.addSpaceToConfigArgsForCall)]
	fake.addSpaceToConfigArgsForCall = append(fake.addSpaceToConfigArgsForCall, struct {
		arg1 *config.SpaceConfig
	}{arg1})
	stub := fake.AddSpaceToConfigStub
	fakeReturns := fake.addSpaceToConfigReturns
	fake.recordInvocation("AddSpaceToConfig", []interface{}{arg1})
	fake.addSpaceToConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AddSpaceToConfigCallCount() int {
	fake.addSpaceToConfigMutex.RLock()
	defer fake.addSpaceToConfigMutex.RUnlock()
	return len(fake.addSpaceToConfigArgsForCall)
}

func (fake *FakeManager) AddSpaceToConfigCalls(stub func(*config.SpaceConfig) error) {
	fake.addSpaceToConfigMutex.Lock()
	defer fake.addSpaceToConfigMutex.Unlock()
	fake.AddSpaceToConfigStub = stub
}

func (fake *FakeManager) AddSpaceToConfigArgsForCall(i int) *config.SpaceConfig {
	fake.addSpaceToConfigMutex.RLock()
	defer fake.addSpaceToConfigMutex.RUnlock()
	argsForCall := fake.addSpaceToConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) AddSpaceToConfigReturns(result1 error) {
	fake.addSpaceToConfigMutex.Lock()
	defer fake.addSpaceToConfigMutex.Unlock()
	fake.AddSpaceToConfigStub = nil
	fake.addSpaceToConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AddSpaceToConfigReturnsOnCall(i int, result1 error) {
	fake.addSpaceToConfigMutex.Lock()
	defer fake.addSpaceToConfigMutex.Unlock()
	fake.AddSpaceToConfigStub = nil
	if fake.addSpaceToConfigReturnsOnCall == nil {
		fake.addSpaceToConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addSpaceToConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssociateOrgAuditor(arg1 config.UserOrigin, arg2 string, arg3 string) error {
	fake.associateOrgAuditorMutex.Lock()
	ret, specificReturn := fake.associateOrgAuditorReturnsOnCall[len(fake.associateOrgAuditorArgsForCall)]
	fake.associateOrgAuditorArgsForCall = append(fake.associateOrgAuditorArgsForCall, struct {
		arg1 config.UserOrigin
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AssociateOrgAuditorStub
	fakeReturns := fake.associateOrgAuditorReturns
	fake.recordInvocation("AssociateOrgAuditor", []interface{}{arg1, arg2, arg3})
	fake.associateOrgAuditorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AssociateOrgAuditorCallCount() int {
	fake.associateOrgAuditorMutex.RLock()
	defer fake.associateOrgAuditorMutex.RUnlock()
	return len(fake.associateOrgAuditorArgsForCall)
}

func (fake *FakeManager) AssociateOrgAuditorCalls(stub func(config.UserOrigin, string, string) error) {
	fake.associateOrgAuditorMutex.Lock()
	defer fake.associateOrgAuditorMutex.Unlock()
	fake.AssociateOrgAuditorStub = stub
}

func (fake *FakeManager) AssociateOrgAuditorArgsForCall(i int) (config.UserOrigin, string, string) {
	fake.associateOrgAuditorMutex.RLock()
	defer fake.associateOrgAuditorMutex.RUnlock()
	argsForCall := fake.associateOrgAuditorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeManager) AssociateOrgAuditorReturns(result1 error) {
	fake.associateOrgAuditorMutex.Lock()
	defer fake.associateOrgAuditorMutex.Unlock()
	fake.AssociateOrgAuditorStub = nil
	fake.associateOrgAuditorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssociateOrgAuditorReturnsOnCall(i int, result1 error) {
	fake.associateOrgAuditorMutex.Lock()
	defer fake.associateOrgAuditorMutex.Unlock()
	fake.AssociateOrgAuditorStub = nil
	if fake.associateOrgAuditorReturnsOnCall == nil {
		fake.associateOrgAuditorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.associateOrgAuditorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssociateSpaceAuditor(arg1 config.UserOrigin, arg2 string, arg3 string, arg4 string) error {
	fake.associateSpaceAuditorMutex.Lock()
	ret, specificReturn := fake.associateSpaceAuditorReturnsOnCall[len(fake.associateSpaceAuditorArgsForCall)]
	fake.associateSpaceAuditorArgsForCall = append(fake.associateSpaceAuditorArgsForCall, struct {
		arg1 config.UserOrigin
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.AssociateSpaceAuditorStub
	fakeReturns := fake.associateSpaceAuditorReturns
	fake.recordInvocation("AssociateSpaceAuditor", []interface{}{arg1, arg2, arg3, arg4})
	fake.associateSpaceAuditorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AssociateSpaceAuditorCallCount() int {
	fake.associateSpaceAuditorMutex.RLock()
	defer fake.associateSpaceAuditorMutex.RUnlock()
	return len(fake.associateSpaceAuditorArgsForCall)
}

func (fake *FakeManager) AssociateSpaceAuditorCalls(stub func(config.UserOrigin, string, string, string) error) {
	fake.associateSpaceAuditorMutex.Lock()
	defer fake.associateSpaceAuditorMutex.Unlock()
	fake.AssociateSpaceAuditorStub = stub
}

func (fake *FakeManager) AssociateSpaceAuditorArgsForCall(i int) (config.UserOrigin, string, string, string) {
	fake.associateSpaceAuditorMutex.RLock()
	defer fake.associateSpaceAuditorMutex.RUnlock()
	argsForCall := fake.associateSpaceAuditorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeManager) AssociateSpaceAuditorReturns(result1 error) {
	fake.associateSpaceAuditorMutex.Lock()
	defer fake.associateSpaceAuditorMutex.Unlock()
	fake.AssociateSpaceAuditorStub = nil
	fake.associateSpaceAuditorReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssociateSpaceAuditorReturnsOnCall(i int, result1 error) {
	fake.associateSpaceAuditorMutex.Lock()
	defer fake.associateSpaceAuditorMutex.Unlock()
	fake.AssociateSpaceAuditorStub = nil
	if fake.associateSpaceAuditorReturnsOnCall == nil {
		fake.associateSpaceAuditorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.associateSpaceAuditorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssociateSpaceDeveloper(arg1 config.UserOrigin, arg2 string, arg3 string, arg4 string) error {
	fake.associateSpaceDeveloperMutex.Lock()
	ret, specificReturn := fake.associateSpaceDeveloperReturnsOnCall[len(fake.associateSpaceDeveloperArgsForCall)]
	fake.associateSpaceDeveloperArgsForCall = append(fake.associateSpaceDeveloperArgsForCall, struct {
		arg1 config.UserOrigin
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.AssociateSpaceDeveloperStub
	fakeReturns := fake.associateSpaceDeveloperReturns
	fake.recordInvocation("AssociateSpaceDeveloper", []interface{}{arg1, arg2, arg3, arg4})
	fake.associateSpaceDeveloperMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AssociateSpaceDeveloperCallCount() int {
	fake.associateSpaceDeveloperMutex.RLock()
	defer fake.associateSpaceDeveloperMutex.RUnlock()
	return len(fake.associateSpaceDeveloperArgsForCall)
}

func (fake *FakeManager) AssociateSpaceDeveloperCalls(stub func(config.UserOrigin, string, string, string) error) {
	fake.associateSpaceDeveloperMutex.Lock()
	defer fake.associateSpaceDeveloperMutex.Unlock()
	fake.AssociateSpaceDeveloperStub = stub
}

func (fake *FakeManager) AssociateSpaceDeveloperArgsForCall(i int) (config.UserOrigin, string, string, string) {
	fake.associateSpaceDeveloperMutex.RLock()
	defer fake.associateSpaceDeveloperMutex.RUnlock()
	argsForCall := fake.associateSpaceDeveloperArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeManager) AssociateSpaceDeveloperReturns(result1 error) {
	fake.associateSpaceDeveloperMutex.Lock()
	defer fake.associateSpaceDeveloperMutex.Unlock()
	fake.AssociateSpaceDeveloperStub = nil
	fake.associateSpaceDeveloperReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssociateSpaceDeveloperReturnsOnCall(i int, result1 error) {
	fake.associateSpaceDeveloperMutex.Lock()
	defer fake.associateSpaceDeveloperMutex.Unlock()
	fake.AssociateSpaceDeveloperStub = nil
	if fake.associateSpaceDeveloperReturnsOnCall == nil {
		fake.associateSpaceDeveloperReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.associateSpaceDeveloperReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) CreateConfigIfNotExists(arg1 string) error {
	fake.createConfigIfNotExistsMutex.Lock()
	ret, specificReturn := fake.createConfigIfNotExistsReturnsOnCall[len(fake.createConfigIfNotExistsArgsForCall)]
	fake.createConfigIfNotExistsArgsForCall = append(fake.createConfigIfNotExistsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CreateConfigIfNotExistsStub
	fakeReturns := fake.createConfigIfNotExistsReturns
	fake.recordInvocation("CreateConfigIfNotExists", []interface{}{arg1})
	fake.createConfigIfNotExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) CreateConfigIfNotExistsCallCount() int {
	fake.createConfigIfNotExistsMutex.RLock()
	defer fake.createConfigIfNotExistsMutex.RUnlock()
	return len(fake.createConfigIfNotExistsArgsForCall)
}

func (fake *FakeManager) CreateConfigIfNotExistsCalls(stub func(string) error) {
	fake.createConfigIfNotExistsMutex.Lock()
	defer fake.createConfigIfNotExistsMutex.Unlock()
	fake.CreateConfigIfNotExistsStub = stub
}

func (fake *FakeManager) CreateConfigIfNotExistsArgsForCall(i int) string {
	fake.createConfigIfNotExistsMutex.RLock()
	defer fake.createConfigIfNotExistsMutex.RUnlock()
	argsForCall := fake.createConfigIfNotExistsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) CreateConfigIfNotExistsReturns(result1 error) {
	fake.createConfigIfNotExistsMutex.Lock()
	defer fake.createConfigIfNotExistsMutex.Unlock()
	fake.CreateConfigIfNotExistsStub = nil
	fake.createConfigIfNotExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) CreateConfigIfNotExistsReturnsOnCall(i int, result1 error) {
	fake.createConfigIfNotExistsMutex.Lock()
	defer fake.createConfigIfNotExistsMutex.Unlock()
	fake.CreateConfigIfNotExistsStub = nil
	if fake.createConfigIfNotExistsReturnsOnCall == nil {
		fake.createConfigIfNotExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createConfigIfNotExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) DeleteConfigIfExists() error {
	fake.deleteConfigIfExistsMutex.Lock()
	ret, specificReturn := fake.deleteConfigIfExistsReturnsOnCall[len(fake.deleteConfigIfExistsArgsForCall)]
	fake.deleteConfigIfExistsArgsForCall = append(fake.deleteConfigIfExistsArgsForCall, struct {
	}{})
	stub := fake.DeleteConfigIfExistsStub
	fakeReturns := fake.deleteConfigIfExistsReturns
	fake.recordInvocation("DeleteConfigIfExists", []interface{}{})
	fake.deleteConfigIfExistsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) DeleteConfigIfExistsCallCount() int {
	fake.deleteConfigIfExistsMutex.RLock()
	defer fake.deleteConfigIfExistsMutex.RUnlock()
	return len(fake.deleteConfigIfExistsArgsForCall)
}

func (fake *FakeManager) DeleteConfigIfExistsCalls(stub func() error) {
	fake.deleteConfigIfExistsMutex.Lock()
	defer fake.deleteConfigIfExistsMutex.Unlock()
	fake.DeleteConfigIfExistsStub = stub
}

func (fake *FakeManager) DeleteConfigIfExistsReturns(result1 error) {
	fake.deleteConfigIfExistsMutex.Lock()
	defer fake.deleteConfigIfExistsMutex.Unlock()
	fake.DeleteConfigIfExistsStub = nil
	fake.deleteConfigIfExistsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) DeleteConfigIfExistsReturnsOnCall(i int, result1 error) {
	fake.deleteConfigIfExistsMutex.Lock()
	defer fake.deleteConfigIfExistsMutex.Unlock()
	fake.DeleteConfigIfExistsStub = nil
	if fake.deleteConfigIfExistsReturnsOnCall == nil {
		fake.deleteConfigIfExistsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteConfigIfExistsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) DeleteOrgConfig(arg1 string) error {
	fake.deleteOrgConfigMutex.Lock()
	ret, specificReturn := fake.deleteOrgConfigReturnsOnCall[len(fake.deleteOrgConfigArgsForCall)]
	fake.deleteOrgConfigArgsForCall = append(fake.deleteOrgConfigArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteOrgConfigStub
	fakeReturns := fake.deleteOrgConfigReturns
	fake.recordInvocation("DeleteOrgConfig", []interface{}{arg1})
	fake.deleteOrgConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) DeleteOrgConfigCallCount() int {
	fake.deleteOrgConfigMutex.RLock()
	defer fake.deleteOrgConfigMutex.RUnlock()
	return len(fake.deleteOrgConfigArgsForCall)
}

func (fake *FakeManager) DeleteOrgConfigCalls(stub func(string) error) {
	fake.deleteOrgConfigMutex.Lock()
	defer fake.deleteOrgConfigMutex.Unlock()
	fake.DeleteOrgConfigStub = stub
}

func (fake *FakeManager) DeleteOrgConfigArgsForCall(i int) string {
	fake.deleteOrgConfigMutex.RLock()
	defer fake.deleteOrgConfigMutex.RUnlock()
	argsForCall := fake.deleteOrgConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) DeleteOrgConfigReturns(result1 error) {
	fake.deleteOrgConfigMutex.Lock()
	defer fake.deleteOrgConfigMutex.Unlock()
	fake.DeleteOrgConfigStub = nil
	fake.deleteOrgConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) DeleteOrgConfigReturnsOnCall(i int, result1 error) {
	fake.deleteOrgConfigMutex.Lock()
	defer fake.deleteOrgConfigMutex.Unlock()
	fake.DeleteOrgConfigStub = nil
	if fake.deleteOrgConfigReturnsOnCall == nil {
		fake.deleteOrgConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteOrgConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) DeleteSpaceConfig(arg1 string, arg2 string) error {
	fake.deleteSpaceConfigMutex.Lock()
	ret, specificReturn := fake.deleteSpaceConfigReturnsOnCall[len(fake.deleteSpaceConfigArgsForCall)]
	fake.deleteSpaceConfigArgsForCall = append(fake.deleteSpaceConfigArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteSpaceConfigStub
	fakeReturns := fake.deleteSpaceConfigReturns
	fake.recordInvocation("DeleteSpaceConfig", []interface{}{arg1, arg2})
	fake.deleteSpaceConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) DeleteSpaceConfigCallCount() int {
	fake.deleteSpaceConfigMutex.RLock()
	defer fake.deleteSpaceConfigMutex.RUnlock()
	return len(fake.deleteSpaceConfigArgsForCall)
}

func (fake *FakeManager) DeleteSpaceConfigCalls(stub func(string, string) error) {
	fake.deleteSpaceConfigMutex.Lock()
	defer fake.deleteSpaceConfigMutex.Unlock()
	fake.DeleteSpaceConfigStub = stub
}

func (fake *FakeManager) DeleteSpaceConfigArgsForCall(i int) (string, string) {
	fake.deleteSpaceConfigMutex.RLock()
	defer fake.deleteSpaceConfigMutex.RUnlock()
	argsForCall := fake.deleteSpaceConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) DeleteSpaceConfigReturns(result1 error) {
	fake.deleteSpaceConfigMutex.Lock()
	defer fake.deleteSpaceConfigMutex.Unlock()
	fake.DeleteSpaceConfigStub = nil
	fake.deleteSpaceConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) DeleteSpaceConfigReturnsOnCall(i int, result1 error) {
	fake.deleteSpaceConfigMutex.Lock()
	defer fake.deleteSpaceConfigMutex.Unlock()
	fake.DeleteSpaceConfigStub = nil
	if fake.deleteSpaceConfigReturnsOnCall == nil {
		fake.deleteSpaceConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSpaceConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) GetASGConfigs() ([]config.ASGConfig, error) {
	fake.getASGConfigsMutex.Lock()
	ret, specificReturn := fake.getASGConfigsReturnsOnCall[len(fake.getASGConfigsArgsForCall)]
	fake.getASGConfigsArgsForCall = append(fake.getASGConfigsArgsForCall, struct {
	}{})
	stub := fake.GetASGConfigsStub
	fakeReturns := fake.getASGConfigsReturns
	fake.recordInvocation("GetASGConfigs", []interface{}{})
	fake.getASGConfigsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetASGConfigsCallCount() int {
	fake.getASGConfigsMutex.RLock()
	defer fake.getASGConfigsMutex.RUnlock()
	return len(fake.getASGConfigsArgsForCall)
}

func (fake *FakeManager) GetASGConfigsCalls(stub func() ([]config.ASGConfig, error)) {
	fake.getASGConfigsMutex.Lock()
	defer fake.getASGConfigsMutex.Unlock()
	fake.GetASGConfigsStub = stub
}

func (fake *FakeManager) GetASGConfigsReturns(result1 []config.ASGConfig, result2 error) {
	fake.getASGConfigsMutex.Lock()
	defer fake.getASGConfigsMutex.Unlock()
	fake.GetASGConfigsStub = nil
	fake.getASGConfigsReturns = struct {
		result1 []config.ASGConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetASGConfigsReturnsOnCall(i int, result1 []config.ASGConfig, result2 error) {
	fake.getASGConfigsMutex.Lock()
	defer fake.getASGConfigsMutex.Unlock()
	fake.GetASGConfigsStub = nil
	if fake.getASGConfigsReturnsOnCall == nil {
		fake.getASGConfigsReturnsOnCall = make(map[int]struct {
			result1 []config.ASGConfig
			result2 error
		})
	}
	fake.getASGConfigsReturnsOnCall[i] = struct {
		result1 []config.ASGConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetDefaultASGConfigs() ([]config.ASGConfig, error) {
	fake.getDefaultASGConfigsMutex.Lock()
	ret, specificReturn := fake.getDefaultASGConfigsReturnsOnCall[len(fake.getDefaultASGConfigsArgsForCall)]
	fake.getDefaultASGConfigsArgsForCall = append(fake.getDefaultASGConfigsArgsForCall, struct {
	}{})
	stub := fake.GetDefaultASGConfigsStub
	fakeReturns := fake.getDefaultASGConfigsReturns
	fake.recordInvocation("GetDefaultASGConfigs", []interface{}{})
	fake.getDefaultASGConfigsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetDefaultASGConfigsCallCount() int {
	fake.getDefaultASGConfigsMutex.RLock()
	defer fake.getDefaultASGConfigsMutex.RUnlock()
	return len(fake.getDefaultASGConfigsArgsForCall)
}

func (fake *FakeManager) GetDefaultASGConfigsCalls(stub func() ([]config.ASGConfig, error)) {
	fake.getDefaultASGConfigsMutex.Lock()
	defer fake.getDefaultASGConfigsMutex.Unlock()
	fake.GetDefaultASGConfigsStub = stub
}

func (fake *FakeManager) GetDefaultASGConfigsReturns(result1 []config.ASGConfig, result2 error) {
	fake.getDefaultASGConfigsMutex.Lock()
	defer fake.getDefaultASGConfigsMutex.Unlock()
	fake.GetDefaultASGConfigsStub = nil
	fake.getDefaultASGConfigsReturns = struct {
		result1 []config.ASGConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetDefaultASGConfigsReturnsOnCall(i int, result1 []config.ASGConfig, result2 error) {
	fake.getDefaultASGConfigsMutex.Lock()
	defer fake.getDefaultASGConfigsMutex.Unlock()
	fake.GetDefaultASGConfigsStub = nil
	if fake.getDefaultASGConfigsReturnsOnCall == nil {
		fake.getDefaultASGConfigsReturnsOnCall = make(map[int]struct {
			result1 []config.ASGConfig
			result2 error
		})
	}
	fake.getDefaultASGConfigsReturnsOnCall[i] = struct {
		result1 []config.ASGConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetGlobalConfig() (*config.GlobalConfig, error) {
	fake.getGlobalConfigMutex.Lock()
	ret, specificReturn := fake.getGlobalConfigReturnsOnCall[len(fake.getGlobalConfigArgsForCall)]
	fake.getGlobalConfigArgsForCall = append(fake.getGlobalConfigArgsForCall, struct {
	}{})
	stub := fake.GetGlobalConfigStub
	fakeReturns := fake.getGlobalConfigReturns
	fake.recordInvocation("GetGlobalConfig", []interface{}{})
	fake.getGlobalConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetGlobalConfigCallCount() int {
	fake.getGlobalConfigMutex.RLock()
	defer fake.getGlobalConfigMutex.RUnlock()
	return len(fake.getGlobalConfigArgsForCall)
}

func (fake *FakeManager) GetGlobalConfigCalls(stub func() (*config.GlobalConfig, error)) {
	fake.getGlobalConfigMutex.Lock()
	defer fake.getGlobalConfigMutex.Unlock()
	fake.GetGlobalConfigStub = stub
}

func (fake *FakeManager) GetGlobalConfigReturns(result1 *config.GlobalConfig, result2 error) {
	fake.getGlobalConfigMutex.Lock()
	defer fake.getGlobalConfigMutex.Unlock()
	fake.GetGlobalConfigStub = nil
	fake.getGlobalConfigReturns = struct {
		result1 *config.GlobalConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetGlobalConfigReturnsOnCall(i int, result1 *config.GlobalConfig, result2 error) {
	fake.getGlobalConfigMutex.Lock()
	defer fake.getGlobalConfigMutex.Unlock()
	fake.GetGlobalConfigStub = nil
	if fake.getGlobalConfigReturnsOnCall == nil {
		fake.getGlobalConfigReturnsOnCall = make(map[int]struct {
			result1 *config.GlobalConfig
			result2 error
		})
	}
	fake.getGlobalConfigReturnsOnCall[i] = struct {
		result1 *config.GlobalConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetOrgConfig(arg1 string) (*config.OrgConfig, error) {
	fake.getOrgConfigMutex.Lock()
	ret, specificReturn := fake.getOrgConfigReturnsOnCall[len(fake.getOrgConfigArgsForCall)]
	fake.getOrgConfigArgsForCall = append(fake.getOrgConfigArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetOrgConfigStub
	fakeReturns := fake.getOrgConfigReturns
	fake.recordInvocation("GetOrgConfig", []interface{}{arg1})
	fake.getOrgConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetOrgConfigCallCount() int {
	fake.getOrgConfigMutex.RLock()
	defer fake.getOrgConfigMutex.RUnlock()
	return len(fake.getOrgConfigArgsForCall)
}

func (fake *FakeManager) GetOrgConfigCalls(stub func(string) (*config.OrgConfig, error)) {
	fake.getOrgConfigMutex.Lock()
	defer fake.getOrgConfigMutex.Unlock()
	fake.GetOrgConfigStub = stub
}

func (fake *FakeManager) GetOrgConfigArgsForCall(i int) string {
	fake.getOrgConfigMutex.RLock()
	defer fake.getOrgConfigMutex.RUnlock()
	argsForCall := fake.getOrgConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) GetOrgConfigReturns(result1 *config.OrgConfig, result2 error) {
	fake.getOrgConfigMutex.Lock()
	defer fake.getOrgConfigMutex.Unlock()
	fake.GetOrgConfigStub = nil
	fake.getOrgConfigReturns = struct {
		result1 *config.OrgConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetOrgConfigReturnsOnCall(i int, result1 *config.OrgConfig, result2 error) {
	fake.getOrgConfigMutex.Lock()
	defer fake.getOrgConfigMutex.Unlock()
	fake.GetOrgConfigStub = nil
	if fake.getOrgConfigReturnsOnCall == nil {
		fake.getOrgConfigReturnsOnCall = make(map[int]struct {
			result1 *config.OrgConfig
			result2 error
		})
	}
	fake.getOrgConfigReturnsOnCall[i] = struct {
		result1 *config.OrgConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetOrgConfigs() ([]config.OrgConfig, error) {
	fake.getOrgConfigsMutex.Lock()
	ret, specificReturn := fake.getOrgConfigsReturnsOnCall[len(fake.getOrgConfigsArgsForCall)]
	fake.getOrgConfigsArgsForCall = append(fake.getOrgConfigsArgsForCall, struct {
	}{})
	stub := fake.GetOrgConfigsStub
	fakeReturns := fake.getOrgConfigsReturns
	fake.recordInvocation("GetOrgConfigs", []interface{}{})
	fake.getOrgConfigsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetOrgConfigsCallCount() int {
	fake.getOrgConfigsMutex.RLock()
	defer fake.getOrgConfigsMutex.RUnlock()
	return len(fake.getOrgConfigsArgsForCall)
}

func (fake *FakeManager) GetOrgConfigsCalls(stub func() ([]config.OrgConfig, error)) {
	fake.getOrgConfigsMutex.Lock()
	defer fake.getOrgConfigsMutex.Unlock()
	fake.GetOrgConfigsStub = stub
}

func (fake *FakeManager) GetOrgConfigsReturns(result1 []config.OrgConfig, result2 error) {
	fake.getOrgConfigsMutex.Lock()
	defer fake.getOrgConfigsMutex.Unlock()
	fake.GetOrgConfigsStub = nil
	fake.getOrgConfigsReturns = struct {
		result1 []config.OrgConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetOrgConfigsReturnsOnCall(i int, result1 []config.OrgConfig, result2 error) {
	fake.getOrgConfigsMutex.Lock()
	defer fake.getOrgConfigsMutex.Unlock()
	fake.GetOrgConfigsStub = nil
	if fake.getOrgConfigsReturnsOnCall == nil {
		fake.getOrgConfigsReturnsOnCall = make(map[int]struct {
			result1 []config.OrgConfig
			result2 error
		})
	}
	fake.getOrgConfigsReturnsOnCall[i] = struct {
		result1 []config.OrgConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetOrgQuota(arg1 string) (*config.OrgQuota, error) {
	fake.getOrgQuotaMutex.Lock()
	ret, specificReturn := fake.getOrgQuotaReturnsOnCall[len(fake.getOrgQuotaArgsForCall)]
	fake.getOrgQuotaArgsForCall = append(fake.getOrgQuotaArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetOrgQuotaStub
	fakeReturns := fake.getOrgQuotaReturns
	fake.recordInvocation("GetOrgQuota", []interface{}{arg1})
	fake.getOrgQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetOrgQuotaCallCount() int {
	fake.getOrgQuotaMutex.RLock()
	defer fake.getOrgQuotaMutex.RUnlock()
	return len(fake.getOrgQuotaArgsForCall)
}

func (fake *FakeManager) GetOrgQuotaCalls(stub func(string) (*config.OrgQuota, error)) {
	fake.getOrgQuotaMutex.Lock()
	defer fake.getOrgQuotaMutex.Unlock()
	fake.GetOrgQuotaStub = stub
}

func (fake *FakeManager) GetOrgQuotaArgsForCall(i int) string {
	fake.getOrgQuotaMutex.RLock()
	defer fake.getOrgQuotaMutex.RUnlock()
	argsForCall := fake.getOrgQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) GetOrgQuotaReturns(result1 *config.OrgQuota, result2 error) {
	fake.getOrgQuotaMutex.Lock()
	defer fake.getOrgQuotaMutex.Unlock()
	fake.GetOrgQuotaStub = nil
	fake.getOrgQuotaReturns = struct {
		result1 *config.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetOrgQuotaReturnsOnCall(i int, result1 *config.OrgQuota, result2 error) {
	fake.getOrgQuotaMutex.Lock()
	defer fake.getOrgQuotaMutex.Unlock()
	fake.GetOrgQuotaStub = nil
	if fake.getOrgQuotaReturnsOnCall == nil {
		fake.getOrgQuotaReturnsOnCall = make(map[int]struct {
			result1 *config.OrgQuota
			result2 error
		})
	}
	fake.getOrgQuotaReturnsOnCall[i] = struct {
		result1 *config.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetOrgQuotas() ([]config.OrgQuota, error) {
	fake.getOrgQuotasMutex.Lock()
	ret, specificReturn := fake.getOrgQuotasReturnsOnCall[len(fake.getOrgQuotasArgsForCall)]
	fake.getOrgQuotasArgsForCall = append(fake.getOrgQuotasArgsForCall, struct {
	}{})
	stub := fake.GetOrgQuotasStub
	fakeReturns := fake.getOrgQuotasReturns
	fake.recordInvocation("GetOrgQuotas", []interface{}{})
	fake.getOrgQuotasMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetOrgQuotasCallCount() int {
	fake.getOrgQuotasMutex.RLock()
	defer fake.getOrgQuotasMutex.RUnlock()
	return len(fake.getOrgQuotasArgsForCall)
}

func (fake *FakeManager) GetOrgQuotasCalls(stub func() ([]config.OrgQuota, error)) {
	fake.getOrgQuotasMutex.Lock()
	defer fake.getOrgQuotasMutex.Unlock()
	fake.GetOrgQuotasStub = stub
}

func (fake *FakeManager) GetOrgQuotasReturns(result1 []config.OrgQuota, result2 error) {
	fake.getOrgQuotasMutex.Lock()
	defer fake.getOrgQuotasMutex.Unlock()
	fake.GetOrgQuotasStub = nil
	fake.getOrgQuotasReturns = struct {
		result1 []config.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetOrgQuotasReturnsOnCall(i int, result1 []config.OrgQuota, result2 error) {
	fake.getOrgQuotasMutex.Lock()
	defer fake.getOrgQuotasMutex.Unlock()
	fake.GetOrgQuotasStub = nil
	if fake.getOrgQuotasReturnsOnCall == nil {
		fake.getOrgQuotasReturnsOnCall = make(map[int]struct {
			result1 []config.OrgQuota
			result2 error
		})
	}
	fake.getOrgQuotasReturnsOnCall[i] = struct {
		result1 []config.OrgQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetSpaceConfig(arg1 string, arg2 string) (*config.SpaceConfig, error) {
	fake.getSpaceConfigMutex.Lock()
	ret, specificReturn := fake.getSpaceConfigReturnsOnCall[len(fake.getSpaceConfigArgsForCall)]
	fake.getSpaceConfigArgsForCall = append(fake.getSpaceConfigArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetSpaceConfigStub
	fakeReturns := fake.getSpaceConfigReturns
	fake.recordInvocation("GetSpaceConfig", []interface{}{arg1, arg2})
	fake.getSpaceConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetSpaceConfigCallCount() int {
	fake.getSpaceConfigMutex.RLock()
	defer fake.getSpaceConfigMutex.RUnlock()
	return len(fake.getSpaceConfigArgsForCall)
}

func (fake *FakeManager) GetSpaceConfigCalls(stub func(string, string) (*config.SpaceConfig, error)) {
	fake.getSpaceConfigMutex.Lock()
	defer fake.getSpaceConfigMutex.Unlock()
	fake.GetSpaceConfigStub = stub
}

func (fake *FakeManager) GetSpaceConfigArgsForCall(i int) (string, string) {
	fake.getSpaceConfigMutex.RLock()
	defer fake.getSpaceConfigMutex.RUnlock()
	argsForCall := fake.getSpaceConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) GetSpaceConfigReturns(result1 *config.SpaceConfig, result2 error) {
	fake.getSpaceConfigMutex.Lock()
	defer fake.getSpaceConfigMutex.Unlock()
	fake.GetSpaceConfigStub = nil
	fake.getSpaceConfigReturns = struct {
		result1 *config.SpaceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetSpaceConfigReturnsOnCall(i int, result1 *config.SpaceConfig, result2 error) {
	fake.getSpaceConfigMutex.Lock()
	defer fake.getSpaceConfigMutex.Unlock()
	fake.GetSpaceConfigStub = nil
	if fake.getSpaceConfigReturnsOnCall == nil {
		fake.getSpaceConfigReturnsOnCall = make(map[int]struct {
			result1 *config.SpaceConfig
			result2 error
		})
	}
	fake.getSpaceConfigReturnsOnCall[i] = struct {
		result1 *config.SpaceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetSpaceConfigs() ([]config.SpaceConfig, error) {
	fake.getSpaceConfigsMutex.Lock()
	ret, specificReturn := fake.getSpaceConfigsReturnsOnCall[len(fake.getSpaceConfigsArgsForCall)]
	fake.getSpaceConfigsArgsForCall = append(fake.getSpaceConfigsArgsForCall, struct {
	}{})
	stub := fake.GetSpaceConfigsStub
	fakeReturns := fake.getSpaceConfigsReturns
	fake.recordInvocation("GetSpaceConfigs", []interface{}{})
	fake.getSpaceConfigsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetSpaceConfigsCallCount() int {
	fake.getSpaceConfigsMutex.RLock()
	defer fake.getSpaceConfigsMutex.RUnlock()
	return len(fake.getSpaceConfigsArgsForCall)
}

func (fake *FakeManager) GetSpaceConfigsCalls(stub func() ([]config.SpaceConfig, error)) {
	fake.getSpaceConfigsMutex.Lock()
	defer fake.getSpaceConfigsMutex.Unlock()
	fake.GetSpaceConfigsStub = stub
}

func (fake *FakeManager) GetSpaceConfigsReturns(result1 []config.SpaceConfig, result2 error) {
	fake.getSpaceConfigsMutex.Lock()
	defer fake.getSpaceConfigsMutex.Unlock()
	fake.GetSpaceConfigsStub = nil
	fake.getSpaceConfigsReturns = struct {
		result1 []config.SpaceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetSpaceConfigsReturnsOnCall(i int, result1 []config.SpaceConfig, result2 error) {
	fake.getSpaceConfigsMutex.Lock()
	defer fake.getSpaceConfigsMutex.Unlock()
	fake.GetSpaceConfigsStub = nil
	if fake.getSpaceConfigsReturnsOnCall == nil {
		fake.getSpaceConfigsReturnsOnCall = make(map[int]struct {
			result1 []config.SpaceConfig
			result2 error
		})
	}
	fake.getSpaceConfigsReturnsOnCall[i] = struct {
		result1 []config.SpaceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetSpaceDefaults() (*config.SpaceConfig, error) {
	fake.getSpaceDefaultsMutex.Lock()
	ret, specificReturn := fake.getSpaceDefaultsReturnsOnCall[len(fake.getSpaceDefaultsArgsForCall)]
	fake.getSpaceDefaultsArgsForCall = append(fake.getSpaceDefaultsArgsForCall, struct {
	}{})
	stub := fake.GetSpaceDefaultsStub
	fakeReturns := fake.getSpaceDefaultsReturns
	fake.recordInvocation("GetSpaceDefaults", []interface{}{})
	fake.getSpaceDefaultsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetSpaceDefaultsCallCount() int {
	fake.getSpaceDefaultsMutex.RLock()
	defer fake.getSpaceDefaultsMutex.RUnlock()
	return len(fake.getSpaceDefaultsArgsForCall)
}

func (fake *FakeManager) GetSpaceDefaultsCalls(stub func() (*config.SpaceConfig, error)) {
	fake.getSpaceDefaultsMutex.Lock()
	defer fake.getSpaceDefaultsMutex.Unlock()
	fake.GetSpaceDefaultsStub = stub
}

func (fake *FakeManager) GetSpaceDefaultsReturns(result1 *config.SpaceConfig, result2 error) {
	fake.getSpaceDefaultsMutex.Lock()
	defer fake.getSpaceDefaultsMutex.Unlock()
	fake.GetSpaceDefaultsStub = nil
	fake.getSpaceDefaultsReturns = struct {
		result1 *config.SpaceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetSpaceDefaultsReturnsOnCall(i int, result1 *config.SpaceConfig, result2 error) {
	fake.getSpaceDefaultsMutex.Lock()
	defer fake.getSpaceDefaultsMutex.Unlock()
	fake.GetSpaceDefaultsStub = nil
	if fake.getSpaceDefaultsReturnsOnCall == nil {
		fake.getSpaceDefaultsReturnsOnCall = make(map[int]struct {
			result1 *config.SpaceConfig
			result2 error
		})
	}
	fake.getSpaceDefaultsReturnsOnCall[i] = struct {
		result1 *config.SpaceConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetSpaceQuota(arg1 string, arg2 string) (*config.SpaceQuota, error) {
	fake.getSpaceQuotaMutex.Lock()
	ret, specificReturn := fake.getSpaceQuotaReturnsOnCall[len(fake.getSpaceQuotaArgsForCall)]
	fake.getSpaceQuotaArgsForCall = append(fake.getSpaceQuotaArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetSpaceQuotaStub
	fakeReturns := fake.getSpaceQuotaReturns
	fake.recordInvocation("GetSpaceQuota", []interface{}{arg1, arg2})
	fake.getSpaceQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetSpaceQuotaCallCount() int {
	fake.getSpaceQuotaMutex.RLock()
	defer fake.getSpaceQuotaMutex.RUnlock()
	return len(fake.getSpaceQuotaArgsForCall)
}

func (fake *FakeManager) GetSpaceQuotaCalls(stub func(string, string) (*config.SpaceQuota, error)) {
	fake.getSpaceQuotaMutex.Lock()
	defer fake.getSpaceQuotaMutex.Unlock()
	fake.GetSpaceQuotaStub = stub
}

func (fake *FakeManager) GetSpaceQuotaArgsForCall(i int) (string, string) {
	fake.getSpaceQuotaMutex.RLock()
	defer fake.getSpaceQuotaMutex.RUnlock()
	argsForCall := fake.getSpaceQuotaArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) GetSpaceQuotaReturns(result1 *config.SpaceQuota, result2 error) {
	fake.getSpaceQuotaMutex.Lock()
	defer fake.getSpaceQuotaMutex.Unlock()
	fake.GetSpaceQuotaStub = nil
	fake.getSpaceQuotaReturns = struct {
		result1 *config.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetSpaceQuotaReturnsOnCall(i int, result1 *config.SpaceQuota, result2 error) {
	fake.getSpaceQuotaMutex.Lock()
	defer fake.getSpaceQuotaMutex.Unlock()
	fake.GetSpaceQuotaStub = nil
	if fake.getSpaceQuotaReturnsOnCall == nil {
		fake.getSpaceQuotaReturnsOnCall = make(map[int]struct {
			result1 *config.SpaceQuota
			result2 error
		})
	}
	fake.getSpaceQuotaReturnsOnCall[i] = struct {
		result1 *config.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetSpaceQuotas(arg1 string) ([]config.SpaceQuota, error) {
	fake.getSpaceQuotasMutex.Lock()
	ret, specificReturn := fake.getSpaceQuotasReturnsOnCall[len(fake.getSpaceQuotasArgsForCall)]
	fake.getSpaceQuotasArgsForCall = append(fake.getSpaceQuotasArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetSpaceQuotasStub
	fakeReturns := fake.getSpaceQuotasReturns
	fake.recordInvocation("GetSpaceQuotas", []interface{}{arg1})
	fake.getSpaceQuotasMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetSpaceQuotasCallCount() int {
	fake.getSpaceQuotasMutex.RLock()
	defer fake.getSpaceQuotasMutex.RUnlock()
	return len(fake.getSpaceQuotasArgsForCall)
}

func (fake *FakeManager) GetSpaceQuotasCalls(stub func(string) ([]config.SpaceQuota, error)) {
	fake.getSpaceQuotasMutex.Lock()
	defer fake.getSpaceQuotasMutex.Unlock()
	fake.GetSpaceQuotasStub = stub
}

func (fake *FakeManager) GetSpaceQuotasArgsForCall(i int) string {
	fake.getSpaceQuotasMutex.RLock()
	defer fake.getSpaceQuotasMutex.RUnlock()
	argsForCall := fake.getSpaceQuotasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) GetSpaceQuotasReturns(result1 []config.SpaceQuota, result2 error) {
	fake.getSpaceQuotasMutex.Lock()
	defer fake.getSpaceQuotasMutex.Unlock()
	fake.GetSpaceQuotasStub = nil
	fake.getSpaceQuotasReturns = struct {
		result1 []config.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetSpaceQuotasReturnsOnCall(i int, result1 []config.SpaceQuota, result2 error) {
	fake.getSpaceQuotasMutex.Lock()
	defer fake.getSpaceQuotasMutex.Unlock()
	fake.GetSpaceQuotasStub = nil
	if fake.getSpaceQuotasReturnsOnCall == nil {
		fake.getSpaceQuotasReturnsOnCall = make(map[int]struct {
			result1 []config.SpaceQuota
			result2 error
		})
	}
	fake.getSpaceQuotasReturnsOnCall[i] = struct {
		result1 []config.SpaceQuota
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) LdapConfig(arg1 string, arg2 string, arg3 string) (*config.LdapConfig, error) {
	fake.ldapConfigMutex.Lock()
	ret, specificReturn := fake.ldapConfigReturnsOnCall[len(fake.ldapConfigArgsForCall)]
	fake.ldapConfigArgsForCall = append(fake.ldapConfigArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.LdapConfigStub
	fakeReturns := fake.ldapConfigReturns
	fake.recordInvocation("LdapConfig", []interface{}{arg1, arg2, arg3})
	fake.ldapConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) LdapConfigCallCount() int {
	fake.ldapConfigMutex.RLock()
	defer fake.ldapConfigMutex.RUnlock()
	return len(fake.ldapConfigArgsForCall)
}

func (fake *FakeManager) LdapConfigCalls(stub func(string, string, string) (*config.LdapConfig, error)) {
	fake.ldapConfigMutex.Lock()
	defer fake.ldapConfigMutex.Unlock()
	fake.LdapConfigStub = stub
}

func (fake *FakeManager) LdapConfigArgsForCall(i int) (string, string, string) {
	fake.ldapConfigMutex.RLock()
	defer fake.ldapConfigMutex.RUnlock()
	argsForCall := fake.ldapConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeManager) LdapConfigReturns(result1 *config.LdapConfig, result2 error) {
	fake.ldapConfigMutex.Lock()
	defer fake.ldapConfigMutex.Unlock()
	fake.LdapConfigStub = nil
	fake.ldapConfigReturns = struct {
		result1 *config.LdapConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) LdapConfigReturnsOnCall(i int, result1 *config.LdapConfig, result2 error) {
	fake.ldapConfigMutex.Lock()
	defer fake.ldapConfigMutex.Unlock()
	fake.LdapConfigStub = nil
	if fake.ldapConfigReturnsOnCall == nil {
		fake.ldapConfigReturnsOnCall = make(map[int]struct {
			result1 *config.LdapConfig
			result2 error
		})
	}
	fake.ldapConfigReturnsOnCall[i] = struct {
		result1 *config.LdapConfig
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) OrgSpaces(arg1 string) (*config.Spaces, error) {
	fake.orgSpacesMutex.Lock()
	ret, specificReturn := fake.orgSpacesReturnsOnCall[len(fake.orgSpacesArgsForCall)]
	fake.orgSpacesArgsForCall = append(fake.orgSpacesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.OrgSpacesStub
	fakeReturns := fake.orgSpacesReturns
	fake.recordInvocation("OrgSpaces", []interface{}{arg1})
	fake.orgSpacesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) OrgSpacesCallCount() int {
	fake.orgSpacesMutex.RLock()
	defer fake.orgSpacesMutex.RUnlock()
	return len(fake.orgSpacesArgsForCall)
}

func (fake *FakeManager) OrgSpacesCalls(stub func(string) (*config.Spaces, error)) {
	fake.orgSpacesMutex.Lock()
	defer fake.orgSpacesMutex.Unlock()
	fake.OrgSpacesStub = stub
}

func (fake *FakeManager) OrgSpacesArgsForCall(i int) string {
	fake.orgSpacesMutex.RLock()
	defer fake.orgSpacesMutex.RUnlock()
	argsForCall := fake.orgSpacesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) OrgSpacesReturns(result1 *config.Spaces, result2 error) {
	fake.orgSpacesMutex.Lock()
	defer fake.orgSpacesMutex.Unlock()
	fake.OrgSpacesStub = nil
	fake.orgSpacesReturns = struct {
		result1 *config.Spaces
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) OrgSpacesReturnsOnCall(i int, result1 *config.Spaces, result2 error) {
	fake.orgSpacesMutex.Lock()
	defer fake.orgSpacesMutex.Unlock()
	fake.OrgSpacesStub = nil
	if fake.orgSpacesReturnsOnCall == nil {
		fake.orgSpacesReturnsOnCall = make(map[int]struct {
			result1 *config.Spaces
			result2 error
		})
	}
	fake.orgSpacesReturnsOnCall[i] = struct {
		result1 *config.Spaces
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Orgs() (*config.Orgs, error) {
	fake.orgsMutex.Lock()
	ret, specificReturn := fake.orgsReturnsOnCall[len(fake.orgsArgsForCall)]
	fake.orgsArgsForCall = append(fake.orgsArgsForCall, struct {
	}{})
	stub := fake.OrgsStub
	fakeReturns := fake.orgsReturns
	fake.recordInvocation("Orgs", []interface{}{})
	fake.orgsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) OrgsCallCount() int {
	fake.orgsMutex.RLock()
	defer fake.orgsMutex.RUnlock()
	return len(fake.orgsArgsForCall)
}

func (fake *FakeManager) OrgsCalls(stub func() (*config.Orgs, error)) {
	fake.orgsMutex.Lock()
	defer fake.orgsMutex.Unlock()
	fake.OrgsStub = stub
}

func (fake *FakeManager) OrgsReturns(result1 *config.Orgs, result2 error) {
	fake.orgsMutex.Lock()
	defer fake.orgsMutex.Unlock()
	fake.OrgsStub = nil
	fake.orgsReturns = struct {
		result1 *config.Orgs
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) OrgsReturnsOnCall(i int, result1 *config.Orgs, result2 error) {
	fake.orgsMutex.Lock()
	defer fake.orgsMutex.Unlock()
	fake.OrgsStub = nil
	if fake.orgsReturnsOnCall == nil {
		fake.orgsReturnsOnCall = make(map[int]struct {
			result1 *config.Orgs
			result2 error
		})
	}
	fake.orgsReturnsOnCall[i] = struct {
		result1 *config.Orgs
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) RenameOrgConfig(arg1 *config.OrgConfig) error {
	fake.renameOrgConfigMutex.Lock()
	ret, specificReturn := fake.renameOrgConfigReturnsOnCall[len(fake.renameOrgConfigArgsForCall)]
	fake.renameOrgConfigArgsForCall = append(fake.renameOrgConfigArgsForCall, struct {
		arg1 *config.OrgConfig
	}{arg1})
	stub := fake.RenameOrgConfigStub
	fakeReturns := fake.renameOrgConfigReturns
	fake.recordInvocation("RenameOrgConfig", []interface{}{arg1})
	fake.renameOrgConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) RenameOrgConfigCallCount() int {
	fake.renameOrgConfigMutex.RLock()
	defer fake.renameOrgConfigMutex.RUnlock()
	return len(fake.renameOrgConfigArgsForCall)
}

func (fake *FakeManager) RenameOrgConfigCalls(stub func(*config.OrgConfig) error) {
	fake.renameOrgConfigMutex.Lock()
	defer fake.renameOrgConfigMutex.Unlock()
	fake.RenameOrgConfigStub = stub
}

func (fake *FakeManager) RenameOrgConfigArgsForCall(i int) *config.OrgConfig {
	fake.renameOrgConfigMutex.RLock()
	defer fake.renameOrgConfigMutex.RUnlock()
	argsForCall := fake.renameOrgConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) RenameOrgConfigReturns(result1 error) {
	fake.renameOrgConfigMutex.Lock()
	defer fake.renameOrgConfigMutex.Unlock()
	fake.RenameOrgConfigStub = nil
	fake.renameOrgConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) RenameOrgConfigReturnsOnCall(i int, result1 error) {
	fake.renameOrgConfigMutex.Lock()
	defer fake.renameOrgConfigMutex.Unlock()
	fake.RenameOrgConfigStub = nil
	if fake.renameOrgConfigReturnsOnCall == nil {
		fake.renameOrgConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.renameOrgConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) RenameSpaceConfig(arg1 *config.SpaceConfig) error {
	fake.renameSpaceConfigMutex.Lock()
	ret, specificReturn := fake.renameSpaceConfigReturnsOnCall[len(fake.renameSpaceConfigArgsForCall)]
	fake.renameSpaceConfigArgsForCall = append(fake.renameSpaceConfigArgsForCall, struct {
		arg1 *config.SpaceConfig
	}{arg1})
	stub := fake.RenameSpaceConfigStub
	fakeReturns := fake.renameSpaceConfigReturns
	fake.recordInvocation("RenameSpaceConfig", []interface{}{arg1})
	fake.renameSpaceConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) RenameSpaceConfigCallCount() int {
	fake.renameSpaceConfigMutex.RLock()
	defer fake.renameSpaceConfigMutex.RUnlock()
	return len(fake.renameSpaceConfigArgsForCall)
}

func (fake *FakeManager) RenameSpaceConfigCalls(stub func(*config.SpaceConfig) error) {
	fake.renameSpaceConfigMutex.Lock()
	defer fake.renameSpaceConfigMutex.Unlock()
	fake.RenameSpaceConfigStub = stub
}

func (fake *FakeManager) RenameSpaceConfigArgsForCall(i int) *config.SpaceConfig {
	fake.renameSpaceConfigMutex.RLock()
	defer fake.renameSpaceConfigMutex.RUnlock()
	argsForCall := fake.renameSpaceConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) RenameSpaceConfigReturns(result1 error) {
	fake.renameSpaceConfigMutex.Lock()
	defer fake.renameSpaceConfigMutex.Unlock()
	fake.RenameSpaceConfigStub = nil
	fake.renameSpaceConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) RenameSpaceConfigReturnsOnCall(i int, result1 error) {
	fake.renameSpaceConfigMutex.Lock()
	defer fake.renameSpaceConfigMutex.Unlock()
	fake.RenameSpaceConfigStub = nil
	if fake.renameSpaceConfigReturnsOnCall == nil {
		fake.renameSpaceConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.renameSpaceConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveGlobalConfig(arg1 *config.GlobalConfig) error {
	fake.saveGlobalConfigMutex.Lock()
	ret, specificReturn := fake.saveGlobalConfigReturnsOnCall[len(fake.saveGlobalConfigArgsForCall)]
	fake.saveGlobalConfigArgsForCall = append(fake.saveGlobalConfigArgsForCall, struct {
		arg1 *config.GlobalConfig
	}{arg1})
	stub := fake.SaveGlobalConfigStub
	fakeReturns := fake.saveGlobalConfigReturns
	fake.recordInvocation("SaveGlobalConfig", []interface{}{arg1})
	fake.saveGlobalConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) SaveGlobalConfigCallCount() int {
	fake.saveGlobalConfigMutex.RLock()
	defer fake.saveGlobalConfigMutex.RUnlock()
	return len(fake.saveGlobalConfigArgsForCall)
}

func (fake *FakeManager) SaveGlobalConfigCalls(stub func(*config.GlobalConfig) error) {
	fake.saveGlobalConfigMutex.Lock()
	defer fake.saveGlobalConfigMutex.Unlock()
	fake.SaveGlobalConfigStub = stub
}

func (fake *FakeManager) SaveGlobalConfigArgsForCall(i int) *config.GlobalConfig {
	fake.saveGlobalConfigMutex.RLock()
	defer fake.saveGlobalConfigMutex.RUnlock()
	argsForCall := fake.saveGlobalConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) SaveGlobalConfigReturns(result1 error) {
	fake.saveGlobalConfigMutex.Lock()
	defer fake.saveGlobalConfigMutex.Unlock()
	fake.SaveGlobalConfigStub = nil
	fake.saveGlobalConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveGlobalConfigReturnsOnCall(i int, result1 error) {
	fake.saveGlobalConfigMutex.Lock()
	defer fake.saveGlobalConfigMutex.Unlock()
	fake.SaveGlobalConfigStub = nil
	if fake.saveGlobalConfigReturnsOnCall == nil {
		fake.saveGlobalConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveGlobalConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveOrgConfig(arg1 *config.OrgConfig) error {
	fake.saveOrgConfigMutex.Lock()
	ret, specificReturn := fake.saveOrgConfigReturnsOnCall[len(fake.saveOrgConfigArgsForCall)]
	fake.saveOrgConfigArgsForCall = append(fake.saveOrgConfigArgsForCall, struct {
		arg1 *config.OrgConfig
	}{arg1})
	stub := fake.SaveOrgConfigStub
	fakeReturns := fake.saveOrgConfigReturns
	fake.recordInvocation("SaveOrgConfig", []interface{}{arg1})
	fake.saveOrgConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) SaveOrgConfigCallCount() int {
	fake.saveOrgConfigMutex.RLock()
	defer fake.saveOrgConfigMutex.RUnlock()
	return len(fake.saveOrgConfigArgsForCall)
}

func (fake *FakeManager) SaveOrgConfigCalls(stub func(*config.OrgConfig) error) {
	fake.saveOrgConfigMutex.Lock()
	defer fake.saveOrgConfigMutex.Unlock()
	fake.SaveOrgConfigStub = stub
}

func (fake *FakeManager) SaveOrgConfigArgsForCall(i int) *config.OrgConfig {
	fake.saveOrgConfigMutex.RLock()
	defer fake.saveOrgConfigMutex.RUnlock()
	argsForCall := fake.saveOrgConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) SaveOrgConfigReturns(result1 error) {
	fake.saveOrgConfigMutex.Lock()
	defer fake.saveOrgConfigMutex.Unlock()
	fake.SaveOrgConfigStub = nil
	fake.saveOrgConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveOrgConfigReturnsOnCall(i int, result1 error) {
	fake.saveOrgConfigMutex.Lock()
	defer fake.saveOrgConfigMutex.Unlock()
	fake.SaveOrgConfigStub = nil
	if fake.saveOrgConfigReturnsOnCall == nil {
		fake.saveOrgConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveOrgConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveOrgQuota(arg1 *config.OrgQuota) error {
	fake.saveOrgQuotaMutex.Lock()
	ret, specificReturn := fake.saveOrgQuotaReturnsOnCall[len(fake.saveOrgQuotaArgsForCall)]
	fake.saveOrgQuotaArgsForCall = append(fake.saveOrgQuotaArgsForCall, struct {
		arg1 *config.OrgQuota
	}{arg1})
	stub := fake.SaveOrgQuotaStub
	fakeReturns := fake.saveOrgQuotaReturns
	fake.recordInvocation("SaveOrgQuota", []interface{}{arg1})
	fake.saveOrgQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) SaveOrgQuotaCallCount() int {
	fake.saveOrgQuotaMutex.RLock()
	defer fake.saveOrgQuotaMutex.RUnlock()
	return len(fake.saveOrgQuotaArgsForCall)
}

func (fake *FakeManager) SaveOrgQuotaCalls(stub func(*config.OrgQuota) error) {
	fake.saveOrgQuotaMutex.Lock()
	defer fake.saveOrgQuotaMutex.Unlock()
	fake.SaveOrgQuotaStub = stub
}

func (fake *FakeManager) SaveOrgQuotaArgsForCall(i int) *config.OrgQuota {
	fake.saveOrgQuotaMutex.RLock()
	defer fake.saveOrgQuotaMutex.RUnlock()
	argsForCall := fake.saveOrgQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) SaveOrgQuotaReturns(result1 error) {
	fake.saveOrgQuotaMutex.Lock()
	defer fake.saveOrgQuotaMutex.Unlock()
	fake.SaveOrgQuotaStub = nil
	fake.saveOrgQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveOrgQuotaReturnsOnCall(i int, result1 error) {
	fake.saveOrgQuotaMutex.Lock()
	defer fake.saveOrgQuotaMutex.Unlock()
	fake.SaveOrgQuotaStub = nil
	if fake.saveOrgQuotaReturnsOnCall == nil {
		fake.saveOrgQuotaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveOrgQuotaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveOrgSpaces(arg1 *config.Spaces) error {
	fake.saveOrgSpacesMutex.Lock()
	ret, specificReturn := fake.saveOrgSpacesReturnsOnCall[len(fake.saveOrgSpacesArgsForCall)]
	fake.saveOrgSpacesArgsForCall = append(fake.saveOrgSpacesArgsForCall, struct {
		arg1 *config.Spaces
	}{arg1})
	stub := fake.SaveOrgSpacesStub
	fakeReturns := fake.saveOrgSpacesReturns
	fake.recordInvocation("SaveOrgSpaces", []interface{}{arg1})
	fake.saveOrgSpacesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) SaveOrgSpacesCallCount() int {
	fake.saveOrgSpacesMutex.RLock()
	defer fake.saveOrgSpacesMutex.RUnlock()
	return len(fake.saveOrgSpacesArgsForCall)
}

func (fake *FakeManager) SaveOrgSpacesCalls(stub func(*config.Spaces) error) {
	fake.saveOrgSpacesMutex.Lock()
	defer fake.saveOrgSpacesMutex.Unlock()
	fake.SaveOrgSpacesStub = stub
}

func (fake *FakeManager) SaveOrgSpacesArgsForCall(i int) *config.Spaces {
	fake.saveOrgSpacesMutex.RLock()
	defer fake.saveOrgSpacesMutex.RUnlock()
	argsForCall := fake.saveOrgSpacesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) SaveOrgSpacesReturns(result1 error) {
	fake.saveOrgSpacesMutex.Lock()
	defer fake.saveOrgSpacesMutex.Unlock()
	fake.SaveOrgSpacesStub = nil
	fake.saveOrgSpacesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveOrgSpacesReturnsOnCall(i int, result1 error) {
	fake.saveOrgSpacesMutex.Lock()
	defer fake.saveOrgSpacesMutex.Unlock()
	fake.SaveOrgSpacesStub = nil
	if fake.saveOrgSpacesReturnsOnCall == nil {
		fake.saveOrgSpacesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveOrgSpacesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveOrgs(arg1 *config.Orgs) error {
	fake.saveOrgsMutex.Lock()
	ret, specificReturn := fake.saveOrgsReturnsOnCall[len(fake.saveOrgsArgsForCall)]
	fake.saveOrgsArgsForCall = append(fake.saveOrgsArgsForCall, struct {
		arg1 *config.Orgs
	}{arg1})
	stub := fake.SaveOrgsStub
	fakeReturns := fake.saveOrgsReturns
	fake.recordInvocation("SaveOrgs", []interface{}{arg1})
	fake.saveOrgsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) SaveOrgsCallCount() int {
	fake.saveOrgsMutex.RLock()
	defer fake.saveOrgsMutex.RUnlock()
	return len(fake.saveOrgsArgsForCall)
}

func (fake *FakeManager) SaveOrgsCalls(stub func(*config.Orgs) error) {
	fake.saveOrgsMutex.Lock()
	defer fake.saveOrgsMutex.Unlock()
	fake.SaveOrgsStub = stub
}

func (fake *FakeManager) SaveOrgsArgsForCall(i int) *config.Orgs {
	fake.saveOrgsMutex.RLock()
	defer fake.saveOrgsMutex.RUnlock()
	argsForCall := fake.saveOrgsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) SaveOrgsReturns(result1 error) {
	fake.saveOrgsMutex.Lock()
	defer fake.saveOrgsMutex.Unlock()
	fake.SaveOrgsStub = nil
	fake.saveOrgsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveOrgsReturnsOnCall(i int, result1 error) {
	fake.saveOrgsMutex.Lock()
	defer fake.saveOrgsMutex.Unlock()
	fake.SaveOrgsStub = nil
	if fake.saveOrgsReturnsOnCall == nil {
		fake.saveOrgsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveOrgsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveSpaceConfig(arg1 *config.SpaceConfig) error {
	fake.saveSpaceConfigMutex.Lock()
	ret, specificReturn := fake.saveSpaceConfigReturnsOnCall[len(fake.saveSpaceConfigArgsForCall)]
	fake.saveSpaceConfigArgsForCall = append(fake.saveSpaceConfigArgsForCall, struct {
		arg1 *config.SpaceConfig
	}{arg1})
	stub := fake.SaveSpaceConfigStub
	fakeReturns := fake.saveSpaceConfigReturns
	fake.recordInvocation("SaveSpaceConfig", []interface{}{arg1})
	fake.saveSpaceConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) SaveSpaceConfigCallCount() int {
	fake.saveSpaceConfigMutex.RLock()
	defer fake.saveSpaceConfigMutex.RUnlock()
	return len(fake.saveSpaceConfigArgsForCall)
}

func (fake *FakeManager) SaveSpaceConfigCalls(stub func(*config.SpaceConfig) error) {
	fake.saveSpaceConfigMutex.Lock()
	defer fake.saveSpaceConfigMutex.Unlock()
	fake.SaveSpaceConfigStub = stub
}

func (fake *FakeManager) SaveSpaceConfigArgsForCall(i int) *config.SpaceConfig {
	fake.saveSpaceConfigMutex.RLock()
	defer fake.saveSpaceConfigMutex.RUnlock()
	argsForCall := fake.saveSpaceConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) SaveSpaceConfigReturns(result1 error) {
	fake.saveSpaceConfigMutex.Lock()
	defer fake.saveSpaceConfigMutex.Unlock()
	fake.SaveSpaceConfigStub = nil
	fake.saveSpaceConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveSpaceConfigReturnsOnCall(i int, result1 error) {
	fake.saveSpaceConfigMutex.Lock()
	defer fake.saveSpaceConfigMutex.Unlock()
	fake.SaveSpaceConfigStub = nil
	if fake.saveSpaceConfigReturnsOnCall == nil {
		fake.saveSpaceConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveSpaceConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveSpaceQuota(arg1 *config.SpaceQuota) error {
	fake.saveSpaceQuotaMutex.Lock()
	ret, specificReturn := fake.saveSpaceQuotaReturnsOnCall[len(fake.saveSpaceQuotaArgsForCall)]
	fake.saveSpaceQuotaArgsForCall = append(fake.saveSpaceQuotaArgsForCall, struct {
		arg1 *config.SpaceQuota
	}{arg1})
	stub := fake.SaveSpaceQuotaStub
	fakeReturns := fake.saveSpaceQuotaReturns
	fake.recordInvocation("SaveSpaceQuota", []interface{}{arg1})
	fake.saveSpaceQuotaMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) SaveSpaceQuotaCallCount() int {
	fake.saveSpaceQuotaMutex.RLock()
	defer fake.saveSpaceQuotaMutex.RUnlock()
	return len(fake.saveSpaceQuotaArgsForCall)
}

func (fake *FakeManager) SaveSpaceQuotaCalls(stub func(*config.SpaceQuota) error) {
	fake.saveSpaceQuotaMutex.Lock()
	defer fake.saveSpaceQuotaMutex.Unlock()
	fake.SaveSpaceQuotaStub = stub
}

func (fake *FakeManager) SaveSpaceQuotaArgsForCall(i int) *config.SpaceQuota {
	fake.saveSpaceQuotaMutex.RLock()
	defer fake.saveSpaceQuotaMutex.RUnlock()
	argsForCall := fake.saveSpaceQuotaArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) SaveSpaceQuotaReturns(result1 error) {
	fake.saveSpaceQuotaMutex.Lock()
	defer fake.saveSpaceQuotaMutex.Unlock()
	fake.SaveSpaceQuotaStub = nil
	fake.saveSpaceQuotaReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) SaveSpaceQuotaReturnsOnCall(i int, result1 error) {
	fake.saveSpaceQuotaMutex.Lock()
	defer fake.saveSpaceQuotaMutex.Unlock()
	fake.SaveSpaceQuotaStub = nil
	if fake.saveSpaceQuotaReturnsOnCall == nil {
		fake.saveSpaceQuotaReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveSpaceQuotaReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Spaces() ([]config.Spaces, error) {
	fake.spacesMutex.Lock()
	ret, specificReturn := fake.spacesReturnsOnCall[len(fake.spacesArgsForCall)]
	fake.spacesArgsForCall = append(fake.spacesArgsForCall, struct {
	}{})
	stub := fake.SpacesStub
	fakeReturns := fake.spacesReturns
	fake.recordInvocation("Spaces", []interface{}{})
	fake.spacesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) SpacesCallCount() int {
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	return len(fake.spacesArgsForCall)
}

func (fake *FakeManager) SpacesCalls(stub func() ([]config.Spaces, error)) {
	fake.spacesMutex.Lock()
	defer fake.spacesMutex.Unlock()
	fake.SpacesStub = stub
}

func (fake *FakeManager) SpacesReturns(result1 []config.Spaces, result2 error) {
	fake.spacesMutex.Lock()
	defer fake.spacesMutex.Unlock()
	fake.SpacesStub = nil
	fake.spacesReturns = struct {
		result1 []config.Spaces
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) SpacesReturnsOnCall(i int, result1 []config.Spaces, result2 error) {
	fake.spacesMutex.Lock()
	defer fake.spacesMutex.Unlock()
	fake.SpacesStub = nil
	if fake.spacesReturnsOnCall == nil {
		fake.spacesReturnsOnCall = make(map[int]struct {
			result1 []config.Spaces
			result2 error
		})
	}
	fake.spacesReturnsOnCall[i] = struct {
		result1 []config.Spaces
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addDefaultSecurityGroupMutex.RLock()
	defer fake.addDefaultSecurityGroupMutex.RUnlock()
	fake.addOrgQuotaMutex.RLock()
	defer fake.addOrgQuotaMutex.RUnlock()
	fake.addOrgToConfigMutex.RLock()
	defer fake.addOrgToConfigMutex.RUnlock()
	fake.addSecurityGroupMutex.RLock()
	defer fake.addSecurityGroupMutex.RUnlock()
	fake.addSecurityGroupToSpaceMutex.RLock()
	defer fake.addSecurityGroupToSpaceMutex.RUnlock()
	fake.addSpaceQuotaMutex.RLock()
	defer fake.addSpaceQuotaMutex.RUnlock()
	fake.addSpaceToConfigMutex.RLock()
	defer fake.addSpaceToConfigMutex.RUnlock()
	fake.associateOrgAuditorMutex.RLock()
	defer fake.associateOrgAuditorMutex.RUnlock()
	fake.associateSpaceAuditorMutex.RLock()
	defer fake.associateSpaceAuditorMutex.RUnlock()
	fake.associateSpaceDeveloperMutex.RLock()
	defer fake.associateSpaceDeveloperMutex.RUnlock()
	fake.createConfigIfNotExistsMutex.RLock()
	defer fake.createConfigIfNotExistsMutex.RUnlock()
	fake.deleteConfigIfExistsMutex.RLock()
	defer fake.deleteConfigIfExistsMutex.RUnlock()
	fake.deleteOrgConfigMutex.RLock()
	defer fake.deleteOrgConfigMutex.RUnlock()
	fake.deleteSpaceConfigMutex.RLock()
	defer fake.deleteSpaceConfigMutex.RUnlock()
	fake.getASGConfigsMutex.RLock()
	defer fake.getASGConfigsMutex.RUnlock()
	fake.getDefaultASGConfigsMutex.RLock()
	defer fake.getDefaultASGConfigsMutex.RUnlock()
	fake.getGlobalConfigMutex.RLock()
	defer fake.getGlobalConfigMutex.RUnlock()
	fake.getOrgConfigMutex.RLock()
	defer fake.getOrgConfigMutex.RUnlock()
	fake.getOrgConfigsMutex.RLock()
	defer fake.getOrgConfigsMutex.RUnlock()
	fake.getOrgQuotaMutex.RLock()
	defer fake.getOrgQuotaMutex.RUnlock()
	fake.getOrgQuotasMutex.RLock()
	defer fake.getOrgQuotasMutex.RUnlock()
	fake.getSpaceConfigMutex.RLock()
	defer fake.getSpaceConfigMutex.RUnlock()
	fake.getSpaceConfigsMutex.RLock()
	defer fake.getSpaceConfigsMutex.RUnlock()
	fake.getSpaceDefaultsMutex.RLock()
	defer fake.getSpaceDefaultsMutex.RUnlock()
	fake.getSpaceQuotaMutex.RLock()
	defer fake.getSpaceQuotaMutex.RUnlock()
	fake.getSpaceQuotasMutex.RLock()
	defer fake.getSpaceQuotasMutex.RUnlock()
	fake.ldapConfigMutex.RLock()
	defer fake.ldapConfigMutex.RUnlock()
	fake.orgSpacesMutex.RLock()
	defer fake.orgSpacesMutex.RUnlock()
	fake.orgsMutex.RLock()
	defer fake.orgsMutex.RUnlock()
	fake.renameOrgConfigMutex.RLock()
	defer fake.renameOrgConfigMutex.RUnlock()
	fake.renameSpaceConfigMutex.RLock()
	defer fake.renameSpaceConfigMutex.RUnlock()
	fake.saveGlobalConfigMutex.RLock()
	defer fake.saveGlobalConfigMutex.RUnlock()
	fake.saveOrgConfigMutex.RLock()
	defer fake.saveOrgConfigMutex.RUnlock()
	fake.saveOrgQuotaMutex.RLock()
	defer fake.saveOrgQuotaMutex.RUnlock()
	fake.saveOrgSpacesMutex.RLock()
	defer fake.saveOrgSpacesMutex.RUnlock()
	fake.saveOrgsMutex.RLock()
	defer fake.saveOrgsMutex.RUnlock()
	fake.saveSpaceConfigMutex.RLock()
	defer fake.saveSpaceConfigMutex.RUnlock()
	fake.saveSpaceQuotaMutex.RLock()
	defer fake.saveSpaceQuotaMutex.RUnlock()
	fake.spacesMutex.RLock()
	defer fake.spacesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.Manager = new(FakeManager)
