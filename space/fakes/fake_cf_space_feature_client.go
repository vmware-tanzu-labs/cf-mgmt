// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/vmwarepivotallabs/cf-mgmt/space"
)

type FakeCFSpaceFeatureClient struct {
	EnableSSHStub        func(context.Context, string, bool) error
	enableSSHMutex       sync.RWMutex
	enableSSHArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 bool
	}
	enableSSHReturns struct {
		result1 error
	}
	enableSSHReturnsOnCall map[int]struct {
		result1 error
	}
	IsSSHEnabledStub        func(context.Context, string) (bool, error)
	isSSHEnabledMutex       sync.RWMutex
	isSSHEnabledArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	isSSHEnabledReturns struct {
		result1 bool
		result2 error
	}
	isSSHEnabledReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFSpaceFeatureClient) EnableSSH(arg1 context.Context, arg2 string, arg3 bool) error {
	fake.enableSSHMutex.Lock()
	ret, specificReturn := fake.enableSSHReturnsOnCall[len(fake.enableSSHArgsForCall)]
	fake.enableSSHArgsForCall = append(fake.enableSSHArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.EnableSSHStub
	fakeReturns := fake.enableSSHReturns
	fake.recordInvocation("EnableSSH", []interface{}{arg1, arg2, arg3})
	fake.enableSSHMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFSpaceFeatureClient) EnableSSHCallCount() int {
	fake.enableSSHMutex.RLock()
	defer fake.enableSSHMutex.RUnlock()
	return len(fake.enableSSHArgsForCall)
}

func (fake *FakeCFSpaceFeatureClient) EnableSSHCalls(stub func(context.Context, string, bool) error) {
	fake.enableSSHMutex.Lock()
	defer fake.enableSSHMutex.Unlock()
	fake.EnableSSHStub = stub
}

func (fake *FakeCFSpaceFeatureClient) EnableSSHArgsForCall(i int) (context.Context, string, bool) {
	fake.enableSSHMutex.RLock()
	defer fake.enableSSHMutex.RUnlock()
	argsForCall := fake.enableSSHArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFSpaceFeatureClient) EnableSSHReturns(result1 error) {
	fake.enableSSHMutex.Lock()
	defer fake.enableSSHMutex.Unlock()
	fake.EnableSSHStub = nil
	fake.enableSSHReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFSpaceFeatureClient) EnableSSHReturnsOnCall(i int, result1 error) {
	fake.enableSSHMutex.Lock()
	defer fake.enableSSHMutex.Unlock()
	fake.EnableSSHStub = nil
	if fake.enableSSHReturnsOnCall == nil {
		fake.enableSSHReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.enableSSHReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFSpaceFeatureClient) IsSSHEnabled(arg1 context.Context, arg2 string) (bool, error) {
	fake.isSSHEnabledMutex.Lock()
	ret, specificReturn := fake.isSSHEnabledReturnsOnCall[len(fake.isSSHEnabledArgsForCall)]
	fake.isSSHEnabledArgsForCall = append(fake.isSSHEnabledArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.IsSSHEnabledStub
	fakeReturns := fake.isSSHEnabledReturns
	fake.recordInvocation("IsSSHEnabled", []interface{}{arg1, arg2})
	fake.isSSHEnabledMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSpaceFeatureClient) IsSSHEnabledCallCount() int {
	fake.isSSHEnabledMutex.RLock()
	defer fake.isSSHEnabledMutex.RUnlock()
	return len(fake.isSSHEnabledArgsForCall)
}

func (fake *FakeCFSpaceFeatureClient) IsSSHEnabledCalls(stub func(context.Context, string) (bool, error)) {
	fake.isSSHEnabledMutex.Lock()
	defer fake.isSSHEnabledMutex.Unlock()
	fake.IsSSHEnabledStub = stub
}

func (fake *FakeCFSpaceFeatureClient) IsSSHEnabledArgsForCall(i int) (context.Context, string) {
	fake.isSSHEnabledMutex.RLock()
	defer fake.isSSHEnabledMutex.RUnlock()
	argsForCall := fake.isSSHEnabledArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFSpaceFeatureClient) IsSSHEnabledReturns(result1 bool, result2 error) {
	fake.isSSHEnabledMutex.Lock()
	defer fake.isSSHEnabledMutex.Unlock()
	fake.IsSSHEnabledStub = nil
	fake.isSSHEnabledReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceFeatureClient) IsSSHEnabledReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isSSHEnabledMutex.Lock()
	defer fake.isSSHEnabledMutex.Unlock()
	fake.IsSSHEnabledStub = nil
	if fake.isSSHEnabledReturnsOnCall == nil {
		fake.isSSHEnabledReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isSSHEnabledReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSpaceFeatureClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.enableSSHMutex.RLock()
	defer fake.enableSSHMutex.RUnlock()
	fake.isSSHEnabledMutex.RLock()
	defer fake.isSSHEnabledMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFSpaceFeatureClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ space.CFSpaceFeatureClient = new(FakeCFSpaceFeatureClient)
