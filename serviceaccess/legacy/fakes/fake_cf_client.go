// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/url"
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmwarepivotallabs/cf-mgmt/serviceaccess/legacy"
)

type FakeCFClient struct {
	CreateServicePlanVisibilityStub        func(string, string) (cfclient.ServicePlanVisibility, error)
	createServicePlanVisibilityMutex       sync.RWMutex
	createServicePlanVisibilityArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createServicePlanVisibilityReturns struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}
	createServicePlanVisibilityReturnsOnCall map[int]struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}
	DeleteServicePlanVisibilityByPlanAndOrgStub        func(string, string, bool) error
	deleteServicePlanVisibilityByPlanAndOrgMutex       sync.RWMutex
	deleteServicePlanVisibilityByPlanAndOrgArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
	}
	deleteServicePlanVisibilityByPlanAndOrgReturns struct {
		result1 error
	}
	deleteServicePlanVisibilityByPlanAndOrgReturnsOnCall map[int]struct {
		result1 error
	}
	ListServicePlanVisibilitiesByQueryStub        func(url.Values) ([]cfclient.ServicePlanVisibility, error)
	listServicePlanVisibilitiesByQueryMutex       sync.RWMutex
	listServicePlanVisibilitiesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServicePlanVisibilitiesByQueryReturns struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}
	listServicePlanVisibilitiesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}
	ListServicePlansByQueryStub        func(url.Values) ([]cfclient.ServicePlan, error)
	listServicePlansByQueryMutex       sync.RWMutex
	listServicePlansByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServicePlansByQueryReturns struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	listServicePlansByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	ListServicesStub        func() ([]cfclient.Service, error)
	listServicesMutex       sync.RWMutex
	listServicesArgsForCall []struct {
	}
	listServicesReturns struct {
		result1 []cfclient.Service
		result2 error
	}
	listServicesReturnsOnCall map[int]struct {
		result1 []cfclient.Service
		result2 error
	}
	MakeServicePlanPrivateStub        func(string) error
	makeServicePlanPrivateMutex       sync.RWMutex
	makeServicePlanPrivateArgsForCall []struct {
		arg1 string
	}
	makeServicePlanPrivateReturns struct {
		result1 error
	}
	makeServicePlanPrivateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) CreateServicePlanVisibility(arg1 string, arg2 string) (cfclient.ServicePlanVisibility, error) {
	fake.createServicePlanVisibilityMutex.Lock()
	ret, specificReturn := fake.createServicePlanVisibilityReturnsOnCall[len(fake.createServicePlanVisibilityArgsForCall)]
	fake.createServicePlanVisibilityArgsForCall = append(fake.createServicePlanVisibilityArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CreateServicePlanVisibilityStub
	fakeReturns := fake.createServicePlanVisibilityReturns
	fake.recordInvocation("CreateServicePlanVisibility", []interface{}{arg1, arg2})
	fake.createServicePlanVisibilityMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateServicePlanVisibilityCallCount() int {
	fake.createServicePlanVisibilityMutex.RLock()
	defer fake.createServicePlanVisibilityMutex.RUnlock()
	return len(fake.createServicePlanVisibilityArgsForCall)
}

func (fake *FakeCFClient) CreateServicePlanVisibilityCalls(stub func(string, string) (cfclient.ServicePlanVisibility, error)) {
	fake.createServicePlanVisibilityMutex.Lock()
	defer fake.createServicePlanVisibilityMutex.Unlock()
	fake.CreateServicePlanVisibilityStub = stub
}

func (fake *FakeCFClient) CreateServicePlanVisibilityArgsForCall(i int) (string, string) {
	fake.createServicePlanVisibilityMutex.RLock()
	defer fake.createServicePlanVisibilityMutex.RUnlock()
	argsForCall := fake.createServicePlanVisibilityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) CreateServicePlanVisibilityReturns(result1 cfclient.ServicePlanVisibility, result2 error) {
	fake.createServicePlanVisibilityMutex.Lock()
	defer fake.createServicePlanVisibilityMutex.Unlock()
	fake.CreateServicePlanVisibilityStub = nil
	fake.createServicePlanVisibilityReturns = struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateServicePlanVisibilityReturnsOnCall(i int, result1 cfclient.ServicePlanVisibility, result2 error) {
	fake.createServicePlanVisibilityMutex.Lock()
	defer fake.createServicePlanVisibilityMutex.Unlock()
	fake.CreateServicePlanVisibilityStub = nil
	if fake.createServicePlanVisibilityReturnsOnCall == nil {
		fake.createServicePlanVisibilityReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServicePlanVisibility
			result2 error
		})
	}
	fake.createServicePlanVisibilityReturnsOnCall[i] = struct {
		result1 cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrg(arg1 string, arg2 string, arg3 bool) error {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Lock()
	ret, specificReturn := fake.deleteServicePlanVisibilityByPlanAndOrgReturnsOnCall[len(fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall)]
	fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall = append(fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.DeleteServicePlanVisibilityByPlanAndOrgStub
	fakeReturns := fake.deleteServicePlanVisibilityByPlanAndOrgReturns
	fake.recordInvocation("DeleteServicePlanVisibilityByPlanAndOrg", []interface{}{arg1, arg2, arg3})
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgCallCount() int {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RLock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RUnlock()
	return len(fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall)
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgCalls(stub func(string, string, bool) error) {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Lock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Unlock()
	fake.DeleteServicePlanVisibilityByPlanAndOrgStub = stub
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgArgsForCall(i int) (string, string, bool) {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RLock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RUnlock()
	argsForCall := fake.deleteServicePlanVisibilityByPlanAndOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgReturns(result1 error) {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Lock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Unlock()
	fake.DeleteServicePlanVisibilityByPlanAndOrgStub = nil
	fake.deleteServicePlanVisibilityByPlanAndOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteServicePlanVisibilityByPlanAndOrgReturnsOnCall(i int, result1 error) {
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Lock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.Unlock()
	fake.DeleteServicePlanVisibilityByPlanAndOrgStub = nil
	if fake.deleteServicePlanVisibilityByPlanAndOrgReturnsOnCall == nil {
		fake.deleteServicePlanVisibilityByPlanAndOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServicePlanVisibilityByPlanAndOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQuery(arg1 url.Values) ([]cfclient.ServicePlanVisibility, error) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	ret, specificReturn := fake.listServicePlanVisibilitiesByQueryReturnsOnCall[len(fake.listServicePlanVisibilitiesByQueryArgsForCall)]
	fake.listServicePlanVisibilitiesByQueryArgsForCall = append(fake.listServicePlanVisibilitiesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListServicePlanVisibilitiesByQueryStub
	fakeReturns := fake.listServicePlanVisibilitiesByQueryReturns
	fake.recordInvocation("ListServicePlanVisibilitiesByQuery", []interface{}{arg1})
	fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryCallCount() int {
	fake.listServicePlanVisibilitiesByQueryMutex.RLock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.RUnlock()
	return len(fake.listServicePlanVisibilitiesByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryCalls(stub func(url.Values) ([]cfclient.ServicePlanVisibility, error)) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	fake.ListServicePlanVisibilitiesByQueryStub = stub
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryArgsForCall(i int) url.Values {
	fake.listServicePlanVisibilitiesByQueryMutex.RLock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.RUnlock()
	argsForCall := fake.listServicePlanVisibilitiesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryReturns(result1 []cfclient.ServicePlanVisibility, result2 error) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	fake.ListServicePlanVisibilitiesByQueryStub = nil
	fake.listServicePlanVisibilitiesByQueryReturns = struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicePlanVisibilitiesByQueryReturnsOnCall(i int, result1 []cfclient.ServicePlanVisibility, result2 error) {
	fake.listServicePlanVisibilitiesByQueryMutex.Lock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.Unlock()
	fake.ListServicePlanVisibilitiesByQueryStub = nil
	if fake.listServicePlanVisibilitiesByQueryReturnsOnCall == nil {
		fake.listServicePlanVisibilitiesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlanVisibility
			result2 error
		})
	}
	fake.listServicePlanVisibilitiesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlanVisibility
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicePlansByQuery(arg1 url.Values) ([]cfclient.ServicePlan, error) {
	fake.listServicePlansByQueryMutex.Lock()
	ret, specificReturn := fake.listServicePlansByQueryReturnsOnCall[len(fake.listServicePlansByQueryArgsForCall)]
	fake.listServicePlansByQueryArgsForCall = append(fake.listServicePlansByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListServicePlansByQueryStub
	fakeReturns := fake.listServicePlansByQueryReturns
	fake.recordInvocation("ListServicePlansByQuery", []interface{}{arg1})
	fake.listServicePlansByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServicePlansByQueryCallCount() int {
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	return len(fake.listServicePlansByQueryArgsForCall)
}

func (fake *FakeCFClient) ListServicePlansByQueryCalls(stub func(url.Values) ([]cfclient.ServicePlan, error)) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = stub
}

func (fake *FakeCFClient) ListServicePlansByQueryArgsForCall(i int) url.Values {
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	argsForCall := fake.listServicePlansByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListServicePlansByQueryReturns(result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = nil
	fake.listServicePlansByQueryReturns = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicePlansByQueryReturnsOnCall(i int, result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = nil
	if fake.listServicePlansByQueryReturnsOnCall == nil {
		fake.listServicePlansByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlan
			result2 error
		})
	}
	fake.listServicePlansByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServices() ([]cfclient.Service, error) {
	fake.listServicesMutex.Lock()
	ret, specificReturn := fake.listServicesReturnsOnCall[len(fake.listServicesArgsForCall)]
	fake.listServicesArgsForCall = append(fake.listServicesArgsForCall, struct {
	}{})
	stub := fake.ListServicesStub
	fakeReturns := fake.listServicesReturns
	fake.recordInvocation("ListServices", []interface{}{})
	fake.listServicesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListServicesCallCount() int {
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	return len(fake.listServicesArgsForCall)
}

func (fake *FakeCFClient) ListServicesCalls(stub func() ([]cfclient.Service, error)) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = stub
}

func (fake *FakeCFClient) ListServicesReturns(result1 []cfclient.Service, result2 error) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = nil
	fake.listServicesReturns = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListServicesReturnsOnCall(i int, result1 []cfclient.Service, result2 error) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = nil
	if fake.listServicesReturnsOnCall == nil {
		fake.listServicesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Service
			result2 error
		})
	}
	fake.listServicesReturnsOnCall[i] = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) MakeServicePlanPrivate(arg1 string) error {
	fake.makeServicePlanPrivateMutex.Lock()
	ret, specificReturn := fake.makeServicePlanPrivateReturnsOnCall[len(fake.makeServicePlanPrivateArgsForCall)]
	fake.makeServicePlanPrivateArgsForCall = append(fake.makeServicePlanPrivateArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.MakeServicePlanPrivateStub
	fakeReturns := fake.makeServicePlanPrivateReturns
	fake.recordInvocation("MakeServicePlanPrivate", []interface{}{arg1})
	fake.makeServicePlanPrivateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) MakeServicePlanPrivateCallCount() int {
	fake.makeServicePlanPrivateMutex.RLock()
	defer fake.makeServicePlanPrivateMutex.RUnlock()
	return len(fake.makeServicePlanPrivateArgsForCall)
}

func (fake *FakeCFClient) MakeServicePlanPrivateCalls(stub func(string) error) {
	fake.makeServicePlanPrivateMutex.Lock()
	defer fake.makeServicePlanPrivateMutex.Unlock()
	fake.MakeServicePlanPrivateStub = stub
}

func (fake *FakeCFClient) MakeServicePlanPrivateArgsForCall(i int) string {
	fake.makeServicePlanPrivateMutex.RLock()
	defer fake.makeServicePlanPrivateMutex.RUnlock()
	argsForCall := fake.makeServicePlanPrivateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) MakeServicePlanPrivateReturns(result1 error) {
	fake.makeServicePlanPrivateMutex.Lock()
	defer fake.makeServicePlanPrivateMutex.Unlock()
	fake.MakeServicePlanPrivateStub = nil
	fake.makeServicePlanPrivateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) MakeServicePlanPrivateReturnsOnCall(i int, result1 error) {
	fake.makeServicePlanPrivateMutex.Lock()
	defer fake.makeServicePlanPrivateMutex.Unlock()
	fake.MakeServicePlanPrivateStub = nil
	if fake.makeServicePlanPrivateReturnsOnCall == nil {
		fake.makeServicePlanPrivateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.makeServicePlanPrivateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createServicePlanVisibilityMutex.RLock()
	defer fake.createServicePlanVisibilityMutex.RUnlock()
	fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RLock()
	defer fake.deleteServicePlanVisibilityByPlanAndOrgMutex.RUnlock()
	fake.listServicePlanVisibilitiesByQueryMutex.RLock()
	defer fake.listServicePlanVisibilitiesByQueryMutex.RUnlock()
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	fake.makeServicePlanPrivateMutex.RLock()
	defer fake.makeServicePlanPrivateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ legacy.CFClient = new(FakeCFClient)
