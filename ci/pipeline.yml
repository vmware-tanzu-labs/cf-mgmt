---
#! to set pipeline run: fly set-pipeline -p cf-mgmt -c <(ytt -f ci/pipeline.yml)

#@ tas_versions = [
#@   {"version": "2.13.*", "pool_without_location": "2_13"},
#@   {"version": "2.12.*", "pool_without_location": "2_12"},
#@   {"version": "2.11.*", "pool_without_location": "2_11_lts2"},
#@   {"version": "2.10.*", "pool_without_location": "2_10"},
#@   {"version": "2.7.*", "pool_without_location": "2_7_lts"},
#@ ]

groups:
- name: pull-requests
  jobs:
  - test
- name: release
  jobs:
#@ for/end v in tas_versions:
  - #@ 'test-against-tas-' + v["pool_without_location"]
  - release
  - publish

resource_types:
- name: pr-queue-resource
  type: docker-image
  source:
    repository: cryogenics/pr-queue-resource
    tag: add-status-param

- name: pcf-pool
  type: docker-image
  source:
    repository: cftoolsmiths/toolsmiths-envs-resource

- name: pivnet
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
  type: registry-image

resources:
#@ for/end v in tas_versions:
- name: #@ 'tas-for-vms-' + v["pool_without_location"]
  type: pivnet
  source:
    api_token: ((pivnet-admin.api_token))
    product_slug: elastic-runtime
    sort_by: semver
    product_version: #@ v["version"]

#@ for/end v in tas_versions:
- icon: pool
  name: #@ 'tas-' + v["pool_without_location"] + '-env'
  source:
    api_token: ((toolsmiths.api_token))
    hostname: environments.toolsmiths.cf-app.com
    pool_name: #@ 'us_' + v["pool_without_location"]
  type: pcf-pool

- name: source
  type: git
  source:
    uri: git@github.com:vmwarepivotallabs/cf-mgmt.git
    branch: main
    private_key: ((github.ssh_key))
    ignore_paths: ["README.md","docs/*"]

- name: draft-cfmgmt-resource
  type: github-release
  source:
    owner: vmware-tanzu-labs
    repository: cf-mgmt
    access_token: ((github.token))
    drafts: true

- name: releases
  type: github-release
  source:
    owner: vmware-tanzu-labs
    repository: cf-mgmt
    access_token: ((github.token))

- name: docker-registry
  type: docker-image
  source:
    repository: ((dockerhub.repository))
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    tag: ((dockerhub.tag))

- name: cf-deployment-env
  icon: pool
  type: pcf-pool
  source:
    api_token: ((toolsmiths.api_token))
    hostname: environments.toolsmiths.cf-app.com
    pool_name: cf-deployment

- name: pull-request
  type: pr-queue-resource
  check_every: 1h
  icon: source-pull
  source:
    repository: vmwarepivotallabs/cf-mgmt
    disable_forks: true
    access_token: ((github.token))
    base_branch: main

- name: cryogenics-concourse-tasks
  type: git
  icon: github
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: ((github.ssh_key))

jobs:
- name: test
  plan:
  - in_parallel:
    - get: source
      resource: pull-request
      trigger: true
    - get: cryogenics-concourse-tasks
  - in_parallel:
    - do:
      - task: unit-test
        file: source/ci/tasks/runTests.yml
    - do:
      - put: cf-deployment-env
        params:
          action: claim
      - load_var: pooled-env
        file: cf-deployment-env/metadata
        format: json
      - task: integration-test
        file: source/ci/tasks/runIntegrationTests.yml
        params:
          SYSTEM_DOMAIN: ((.:pooled-env.name)).cf-app.com
      - put: cf-deployment-env
        params:
          action: unclaim
          env_file: cf-deployment-env/metadata
  on_success:
    do:
    - put: pull-request
      params:
        merge: false
        status: success
    - load_var: pr-metadata
      file: source/.git/resource/version.json
      format: json
    - task: merge-pr
      file: cryogenics-concourse-tasks/github-automation/merge-pr/task.yml
      input_mapping:
        source-repo: pull-request
      params:
        DELETE: TRUE
        AUTHOR: dependabot
        GH_TOKEN: ((github.token))
        PR_REF: ((.:pr-metadata.pr))
  on_failure:
    put: pull-request
    params:
      merge: false
      status: failure

#@ for/end v in tas_versions:
- name: #@ 'test-against-tas-' + v["pool_without_location"]
  plan:
    - in_parallel:
      - get: #@ 'tas-for-vms-' + v["pool_without_location"]
        trigger: true
        params:
          globs: []
      - get: source
        trigger: true
        resource: pull-request
      - put: #@ 'tas-' + v["pool_without_location"] +'-env'
        params:
          action: claim
    - task: integration-test
      file: source/ci/tasks/runIntegrationTestsAgainstTAS.yml
      input_mapping:
        env: #@ 'tas-' + v["pool_without_location"] +'-env'
    - put: #@ 'tas-' + v["pool_without_location"] +'-env'
      params:
        action: unclaim
        env_file: #@ 'tas-' + v["pool_without_location"] +'-env/metadata'

- name: release
  plan:
    - get: source
      trigger: true
      resource: source
    - task: build
      file: source/ci/tasks/build.yml
    - put: draft-cfmgmt-resource
      params:
        name: compiled-output/name
        tag: compiled-output/tag
        globs:
        - compiled-output/cf-mgmt-linux
        - compiled-output/cf-mgmt-osx
        - compiled-output/cf-mgmt.exe
        - compiled-output/cf-mgmt-config-linux
        - compiled-output/cf-mgmt-config-osx
        - compiled-output/cf-mgmt-config.exe

- name: publish
  plan:
    - in_parallel:
      - get: source
        passed:
          - release
      - get: releases
        trigger: true
    - task: prepare
      file: source/ci/tasks/prepare.yml
    - put: docker-registry
      params:
        build: prepare-output
        tag_as_latest: true
        tag: prepare-output/version
