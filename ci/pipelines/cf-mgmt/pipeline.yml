---
#!  WARNING: this pipeline is automatically set and manual changes will go away. 
#!
#!  To set pipeline manually run: 
#!    fly set-pipeline -p cf-mgmt -c <(ytt -f ci/pipelines/cf-mgmt/pipeline.yml --data-values-file ci/pipelines/cf-mgmt/values.yml)

#@ load("@ytt:data", "data")

groups:
- name: bump
  jobs:
  - bump-ci-tasks
- name: test
  jobs:
  - claim-cf
  - test
  - unclaim-cf
#@ for v in data.values.tas_versions:
  - #@ 'claim-tas-' + v["version_slug"]
  - #@ 'test-against-tas-' + v["version_slug"]
  - #@ 'unclaim-tas-' + v["version_slug"]
#@ end
  - merge
- name: release
  jobs:
  - release
  - publish

resource_types:
- name: slack-notification
  type: registry-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: pr-queue-resource
  type: docker-image
  source:
    repository: cryogenics/pr-queue-resource
    tag: add-status-param

- name: pcf-pool
  type: docker-image
  source:
    repository: cftoolsmiths/toolsmiths-envs-resource

- name: pivnet
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final
  type: registry-image

resources:
- name: cryogenics-essentials
  type: registry-image
  source:
    repository: cryogenics/essentials

- name: slack-cryo-notification
  type: slack-notification
  icon: bell-ring
  source:
    url: ((slack.webhook))

- name: every-week
  type: time
  source: 
    interval: 168h #! 24h*7days

#@ for/end v in data.values.tas_versions:
- icon: pool
  name: #@ 'tas-' + v["version_slug"] + '-env'
  source:
    api_token: ((toolsmiths.api_token))
    hostname: environments.toolsmiths.cf-app.com
    pool_name: #@ v["pool_name"]
  type: pcf-pool

- name: source
  type: git
  source:
    uri: git@github.com:vmware-tanzu-labs/cf-mgmt.git
    branch: main
    private_key: ((github.ssh_key))
    ignore_paths: ["README.md","docs/*"]

- name: cf-mgmt-bump-ci-tasks
  type: git
  source:
    uri: git@github.com:vmware-tanzu-labs/cf-mgmt.git
    private_key: ((github.ssh_key))

- name: releases
  type: github-release
  source:
    owner: vmware-tanzu-labs
    repository: cf-mgmt
    access_token: ((github.access_token))
    drafts: false

- name: docker-registry
  type: docker-image
  source:
    repository: ((dockerhub.repository))
    username: ((dockerhub.username))
    password: ((dockerhub.password))
    tag: ((dockerhub.tag))

- name: cf-deployment-env
  icon: pool
  type: pcf-pool
  source:
    api_token: ((toolsmiths.api_token))
    hostname: environments.toolsmiths.cf-app.com
    pool_name: cf-deployment

- name: pull-request
  type: pr-queue-resource
  check_every: 1h
  icon: source-pull
  source:
    repository: vmware-tanzu-labs/cf-mgmt
    disable_forks: true
    access_token: ((github.access_token))
    base_branch: main

- name: cryogenics-concourse-tasks
  type: git
  icon: github
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: ((github.ssh_key))

jobs:
- name: claim-cf
  plan:
  - get: source
    resource: pull-request
    trigger: true
  - put: cf-deployment-env
    params:
      action: claim

- name: test
  plan:
  - in_parallel:
    - get: source
      resource: pull-request
      passed: [claim-cf]
    - get: cf-deployment-env
      trigger: true
      passed: [claim-cf]
    - get: cryogenics-concourse-tasks
  - in_parallel:
    - do:
      - task: unit-test
        file: source/ci/tasks/runTests.yml
    - do:
      - load_var: pooled-env
        file: cf-deployment-env/metadata
        format: json
      - task: integration-test
        file: source/ci/tasks/runIntegrationTests.yml
        params:
          SYSTEM_DOMAIN: ((.:pooled-env.name)).cf-app.com
  on_failure:
    put: pull-request
    params:
      merge: false
      status: failure

- name: unclaim-cf
  plan:
  - get: cf-deployment-env
    trigger: true
    passed: [test]
  - get: pull-request
    passed: [test]
  - put: cf-deployment-env
    params:
      action: unclaim
      env_file: cf-deployment-env/metadata

- name: merge
  plan:
  - get: pull-request
    trigger: true
    passed:
    - unclaim-cf
#@ for v in data.values.tas_versions:
    - #@ 'unclaim-tas-' + v["version_slug"]
#@ end
  - put: pull-request
    params:
      merge: true
      status: success

#@ for v in data.values.tas_versions:
- name: #@ 'claim-tas-' + v["version_slug"]
  plan:
  - get: pull-request
    trigger: true
  - put: #@ 'tas-' + v["version_slug"] +'-env'
    params:
      action: claim

- name: #@ 'test-against-tas-' + v["version_slug"]
  plan:
    - in_parallel:
      - get: source
        resource: pull-request
        passed:
        - #@ 'claim-tas-' + v["version_slug"]
      - get: #@ 'tas-' + v["version_slug"] +'-env'
        trigger: true
        passed:
        - #@ 'claim-tas-' + v["version_slug"]
    - task: integration-test
      file: source/ci/tasks/runIntegrationTestsAgainstTAS.yml
      input_mapping:
        env: #@ 'tas-' + v["version_slug"] +'-env'

- name: #@ 'unclaim-tas-' + v["version_slug"]
  plan:
  - get: pull-request
    passed:
    - #@ 'test-against-tas-' + v["version_slug"]
  - get: #@ 'tas-' + v["version_slug"] + '-env'
    trigger: true
    passed:
    - #@ 'test-against-tas-' + v["version_slug"]
  - put: #@ 'tas-' + v["version_slug"] + '-env'
    params:
      action: unclaim
      env_file: #@ 'tas-' + v["version_slug"] + '-env/metadata'
#@ end

- name: release
  plan:
    - in_parallel:
      - get: every-week
        trigger: true
      - get: cryogenics-concourse-tasks
      - get: source
    - task: build
      file: source/ci/tasks/build.yml
      params:
        DRAFT: false
    - do:
      - task: create-release-notes
        file: cryogenics-concourse-tasks/release-automation/release-notes/task.yml
        input_mapping:
          git-repo: source
        params:
          USE_LATEST_PUBLISHED_TAG: true
      - task: format-release-notes
        file: cryogenics-concourse-tasks/release-automation/format-release-notes/task.yml
        input_mapping:
          template-folder: cryogenics-concourse-tasks
        params:
          TEMPLATE_PATH: release-automation/release-notes-templates/release-notes-auto.md.erb
    - put: releases
      params:
        name: compiled-output/name
        body: release-notes/release-notes.md
        tag: compiled-output/tag
        globs:
        - compiled-output/cf-mgmt-linux
        - compiled-output/cf-mgmt-osx
        - compiled-output/cf-mgmt.exe
        - compiled-output/cf-mgmt-config-linux
        - compiled-output/cf-mgmt-config-osx
        - compiled-output/cf-mgmt-config.exe
    - load_var: github-release-url
      file: releases/url
    - load_var: version-number
      file: compiled-output/tag
    - put: slack-cryo-notification
      params:
        text: |
          *cf-mgmt*: version `((.:version-number))` has been released ðŸŽ‰
          Next steps (cc <!subteam^S028XABEHAP>):
            1. Review the release notes <((.:github-release-url))|here>.

- name: publish
  plan:
    - in_parallel:
      - get: source
        passed:
         - release
      - get: releases
        trigger: true
        passed:
          - release
    - task: prepare
      file: source/ci/tasks/prepare.yml
    - put: docker-registry
      params:
        build: prepare-output
        tag_as_latest: true
        tag: prepare-output/version

- name: bump-ci-tasks
  plan:
    - in_parallel:
      - get: cryogenics-essentials
        trigger: true
      - get: cryogenics-concourse-tasks
      - get: source
    - in_parallel:
      - load_var: cryogenics-essentials-version
        file: cryogenics-essentials/tag
      - task: bump-tasks
        image: cryogenics-essentials
        file: cryogenics-concourse-tasks/deps-automation/bump-concourse-tasks/task.yml
        input_mapping:
          repo: source
          image: cryogenics-essentials
        output_mapping:
          repo: source
    - put: cf-mgmt-bump-ci-tasks
      params:
        repository: source
        branch: &bump-ci-task-branch bump-cryogenics-essentials-to-v((.:cryogenics-essentials-version))
        force: true
    - task: create-pull-request
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      params:
        BASE: main
        BRANCH: *bump-ci-task-branch
        LABELS: dependencies
        TITLE: "[ci] Bump cryogenics/essentials to v((.:cryogenics-essentials-version))"
        MESSAGE: |
          This is an automatically generated Pull Request from the Cryogenics CI Bot.
          I have detected a new version of [cryogenics/essentials](https://hub.docker.com/r/cryogenics/essentials/tags) and automatically bumped
          this package to benefit from the latest changes.
          If this does not look right, please reach out to the [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.
      input_mapping:
        source-repo: cf-mgmt-bump-ci-tasks
