---
#!  WARNING: this pipeline is automatically set and manual changes will go away. 
#!
#!  To set pipeline manually run: 
#!    fly set-pipeline -p cf-mgmt -c <(ytt -f ci/pipelines/cf-mgmt/pipeline.yml --data-values-file ci/pipelines/cf-mgmt/values.yml)

#@ load("@ytt:data", "data")

#! ************************************
#! Secrets we need to run this pipeline
#! ************************************
secrets:
#! gcr_viewer_key was needed on 2024-03-24 for getting concourse container images from our GCR instance. Generated by using personal creds to log into the mapbu-cryogenics google cloud project.
- &gcr_viewer_key  ((gcr-cf-mgmt.viewer_key))

#! dockerhub_password was needed on 2023-09-15 to publish releases to Docker.
#! Generated by using the associated username to log in to DockerHub webui and setting there.
- &dockerhub_password ((docker-hub.password))
#! dockerhub_username was needed on 2023-09-15 to publish releases to Docker.
#! Generated by opening a DockerHub account
#! This account is different to the cryogenics dockerhub account, it is part of the pivotalservices repo.
- &dockerhub_username ((docker-hub.username))
#! dockerhub_repository was needed on 2023-09-15 to publish releases to Docker. This is not really a secret, this is the repo into which the cf-mgmt image is published.
- &dockerhub_repository ((docker-hub.repository))
#! dockerhub_repository was needed on 2023-09-15 to publish releases to Docker. This is not really a secret, this is the tag we use when we publish new images.
- &dockerhub_tag ((docker-hub.tag))

#! github_access_token is required to create PRs against repos used in this pipeline. It lives in runway vault under the path 'runway_concourse/cryogenics/github'
- &github_access_token ((cf_mgmt_github_bot.access_token))
#! github_ssh_key is required to pull and push the repos used in this pipeline. It lives in runway vault under the path 'runway_concourse/cryogenics/github'
- &github_ssh_key ((cf-identity_deploy_key.private_key))
#! github_email and github_user were added on 2023-12-19 to make the bump-go-module commits
- &github_email ((cf_mgmt_github_bot.email))
- &github_user ((cf_mgmt_github_bot.user))

#! as of 23/04/2024 gchat webhook is used to send us ci status messages. It was created in gchat space settings after logging in with personal creds
- &gchat_webhook ((gchat-cfmgmt-webhook.url))

#! shepherd_account_key was needed on 2023-09-28 to claim shepherd environments. It was created using `shepherd create service-account` after logging in with WS1.
- &shepherd_account_key ((shepherd.service_account_key))

#! **************
#! End of secrets
#! **************

number_of_claim_env_retries: &number_of_claim_env_retries 5

groups:
- name: test
  jobs:
  - claim-cf
  - test
  - release-cf
  #@ for v in data.values.tas_versions:
  - #@ 'claim-tas-' + v["version_slug"]
  - #@ 'test-against-tas-' + v["version_slug"]
  - #@ 'release-tas-' + v["version_slug"]
  #@ end
  - merge
  - lint-pipeline
- name: bump
  jobs:
  - bump-go-module
- name: release
  jobs:
  - check-for-changes
  - release
  - publish

resource_types:
- name: shepherd
  source:
    tag: v1
    repository: us-west2-docker.pkg.dev/shepherd-268822/shepherd2/concourse-resource
  type: registry-image

- name: google-chat-notify-resource
  type: registry-image
  source:
    repository:  us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache/springio/google-chat-notify-resource
    username: _json_key
    password: *gcr_viewer_key
    tag: 0.0.1-SNAPSHOT

- name: pr-queue-resource
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/concourse-resources/pr-queue-resource
    username: _json_key
    password: *gcr_viewer_key

- name: pivnet
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache/pivotalcf/pivnet-resource
    username: _json_key
    password: *gcr_viewer_key
  type: registry-image

resources:
- name: cf-deployment-concourse-tasks-image
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache/cloudfoundry/cf-deployment-concourse-tasks
    username: _json_key
    password: *gcr_viewer_key
    tag: latest

- name: image-cryogenics-essentials
  type: registry-image
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/essentials/cryo-essentials
    username: _json_key
    password: *gcr_viewer_key

- name: gchat-cryo-notification
  type: google-chat-notify-resource
  source:
    url: *gchat_webhook

- name: every-week
  type: time
  source:
    interval: 168h  #! 24h*7days

- name: every-day
  type: time  #! default interval is 1 day

- name: python-394
  type: registry-image
  icon: docker
  source:
    repository: us-west2-docker.pkg.dev/mapbu-cryogenics/dockerhub-proxy-cache/python
    username: _json_key
    password: *gcr_viewer_key
    tag: 3.9.4

#@ for/end v in data.values.tas_versions:
- name: #@ 'tas-' + v["version_slug"] + '-env'
  type: shepherd
  icon: pool
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: tas-identity-and-credentials
      pool:
        namespace: official
        name: #@ v["pool_name"]
    output:
      json-file:
      - path: "pcf.yml"
        fields:
          password: "output.ops_manager.password"
          target: "output.ops_manager.url"
          username: "output.ops_manager.username"

- name: source
  type: git
  source:
    uri: git@github.com:vmware-tanzu-labs/cf-mgmt.git
    branch: main
    private_key: *github_ssh_key
    ignore_paths: [ "README.md","docs/*" ]

- name: source-production-files-only
  type: git
  source:
    uri: git@github.com:vmware-tanzu-labs/cf-mgmt.git
    branch: main
    private_key: *github_ssh_key
    ignore_paths:
    - README.md
    - 'docs/*'
    - ci/
    - .github
    - run-tests.sh
    - '**/*_test.go'

- name: source-write-only
  type: git
  source:
    uri: git@github.com:vmware-tanzu-labs/cf-mgmt.git
    private_key: *github_ssh_key
    commit_filter:
      exclude:
      - ;resource comment; This resource is used exclusively for pushing new changes

- name: releases
  type: github-release
  source:
    owner: vmware-tanzu-labs
    repository: cf-mgmt
    access_token: *github_access_token
    drafts: false

- name: docker-registry
  type: docker-image
  source:
    repository: *dockerhub_repository
    username: *dockerhub_username
    password: *dockerhub_password
    tag: *dockerhub_tag

- name: cf-deployment-env
  icon: pool
  type: shepherd
  source:
    url: https://v2.shepherd.run
    service-account-key: *shepherd_account_key
    compatibility-mode: environments-app
    lease:
      namespace: tas-identity-and-credentials
      pool:
        namespace: official
        name: cfd

- name: pull-request
  type: pr-queue-resource
  check_every: 1h
  icon: source-pull
  source:
    repository: vmware-tanzu-labs/cf-mgmt
    disable_forks: true
    access_token: *github_access_token
    base_branch: main

- name: cryogenics-concourse-tasks
  type: git
  icon: github
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: *github_ssh_key
    branch: identity-and-credentials

jobs:
- name: claim-cf
  plan:
  - get: source
    resource: pull-request
    trigger: true
  - put: cf-deployment-env
    timeout: 6h
    attempts: *number_of_claim_env_retries
    params:
      action: create
      duration: 24h
      resource: env-cf-deployment
      timeout: 6h

- name: test
  plan:
  - in_parallel:
    - get: source
      resource: pull-request
      passed: [ claim-cf ]
    - get: cf-deployment-env
      trigger: true
      passed: [ claim-cf ]
    - get: cryogenics-concourse-tasks
    - get: image-cryogenics-essentials
    - get: cf-deployment-concourse-tasks-image
  - in_parallel:
    - do:
      - task: unit-test
        image: image-cryogenics-essentials
        file: source/ci/tasks/runTests.yml
    - do:
      - load_var: pooled-env
        file: cf-deployment-env/metadata
        format: json
      - task: integration-test
        image: cf-deployment-concourse-tasks-image
        file: source/ci/tasks/runIntegrationTests.yml #!requires uaa cli, not available in cryo essentials
  on_failure:
    put: pull-request
    params:
      merge: false
      status: failure

- name: release-cf
  plan:
  - get: cf-deployment-env
    trigger: true
    passed: [ test ]
  - get: pull-request
    passed: [ test ]
  - put: cf-deployment-env
    params:
      action: release
      resource: cf-deployment-env

- name: merge
  plan:
  - get: pull-request
    trigger: true
    passed:
    - release-cf
    - lint-pipeline
    #@ for v in data.values.tas_versions:
    - #@ 'release-tas-' + v["version_slug"]
    #@ end
  - put: pull-request
    params:
      merge: true
      status: success

#@ for v in data.values.tas_versions:
- name: #@ 'claim-tas-' + v["version_slug"]
  plan:
  - get: pull-request
    trigger: true
  - put: #@ 'tas-' + v["version_slug"] +'-env'
    timeout: 6h
    attempts: *number_of_claim_env_retries
    params:
      action: create
      duration: 24h
      resource: #@ 'tas-' + v["version_slug"] +'-env'
      timeout: 6h

- name: #@ 'test-against-tas-' + v["version_slug"]
  plan:
  - in_parallel:
    - get: source
      resource: pull-request
      passed:
      - #@ 'claim-tas-' + v["version_slug"]
    - get: #@ 'tas-' + v["version_slug"] +'-env'
      trigger: true
      passed:
      - #@ 'claim-tas-' + v["version_slug"]
    - get: image-cryogenics-essentials
  - task: integration-test
    image: image-cryogenics-essentials
    file: source/ci/tasks/runIntegrationTestsAgainstTAS.yml
    input_mapping:
      env: #@ 'tas-' + v["version_slug"] +'-env'

- name: #@ 'release-tas-' + v["version_slug"]
  plan:
  - get: pull-request
    passed:
    - #@ 'test-against-tas-' + v["version_slug"]
  - get: #@ 'tas-' + v["version_slug"] + '-env'
    trigger: true
    passed:
    - #@ 'test-against-tas-' + v["version_slug"]
  - put: #@ 'tas-' + v["version_slug"] + '-env'
    params:
      action: release
      resource: #@ 'tas-' + v["version_slug"] +'-env'
#@ end

- name: check-for-changes
  plan:
  - in_parallel:
    - get: every-week
      trigger: true
    - get: source
    - get: source-production-files-only

- name: release
  plan:
  - in_parallel:
    - get: source-production-files-only
      trigger: true
      passed:
      - check-for-changes
    - get: cryogenics-concourse-tasks
    - get: python-394
    - get: image-cryogenics-essentials
    - get: source
      passed:
      - check-for-changes
  - task: build
    image: image-cryogenics-essentials
    file: source/ci/tasks/build.yml
    params:
      DRAFT: false
  - do:
    - task: create-release-notes
      image: python-394
      file: cryogenics-concourse-tasks/release-automation/release-notes/task.yml
      input_mapping:
        git-repo: source
      params:
        USE_LATEST_PUBLISHED_TAG: true
    - task: format-release-notes
      image: image-cryogenics-essentials
      file: cryogenics-concourse-tasks/release-automation/format-release-notes/task.yml
      input_mapping:
        template-folder: cryogenics-concourse-tasks
      params:
        TEMPLATE_PATH: release-automation/release-notes-templates/release-notes-auto.md.erb
  - put: releases
    params:
      name: compiled-output/name
      body: release-notes/release-notes.md
      tag: compiled-output/tag
      globs:
      - compiled-output/cf-mgmt-linux
      - compiled-output/cf-mgmt-osx
      - compiled-output/cf-mgmt.exe
      - compiled-output/cf-mgmt-config-linux
      - compiled-output/cf-mgmt-config-osx
      - compiled-output/cf-mgmt-config.exe
  - load_var: github-release-url
    file: releases/url
  - load_var: version-number
    file: compiled-output/tag
  - put: gchat-cryo-notification
    params:
      text: |
        *cf-mgmt*: version `((.:version-number))` has been released!
        Next steps <users/all>:
          1. Review the release notes <((.:github-release-url))|here>.

- name: publish
  plan:
  - in_parallel:
    - get: image-cryogenics-essentials
    - get: source
      passed:
      - release
    - get: releases
      trigger: true
      passed:
      - release
  - task: prepare
    image: image-cryogenics-essentials
    file: source/ci/tasks/prepare.yml
  - put: docker-registry
    params:
      build: prepare-output
      tag_as_latest: true
      tag: prepare-output/version

- name: lint-pipeline
  plan:
  - in_parallel:
    - get: pull-request
      trigger: true
    - get: cryogenics-concourse-tasks
    - get: image-cryogenics-essentials
  - task: check-pipeline-for-stray-secrets
    image: image-cryogenics-essentials
    file: cryogenics-concourse-tasks/pipeline-linting/check-pipeline-for-stray-secrets/task.yml
    input_mapping:
      cryogenics-concourse-tasks: cryogenics-concourse-tasks
      pipeline-repo: pull-request
    params:
      PIPELINE_TO_CHECK: ./pipeline-repo/ci/pipelines/cf-mgmt/pipeline.yml

- name: bump-go-module
  serial: true
  plan:
  - in_parallel:
    - get: every-day
      trigger: true
    - get: image-cryogenics-essentials
    - get: source-repo
      resource: source
    - get: cryogenics-concourse-tasks
  - task: bump-go-module
    image: image-cryogenics-essentials
    file: cryogenics-concourse-tasks/deps-automation/bump-go-module/task.yml
    params:
      GIT_USERNAME: *github_user
      GIT_EMAIL: *github_email
  - try:
      load_var: go-module-update-branch
      file: destination-repo/.update-branch-name
      reveal: true
      on_success:
        do:
        - put: source-write-only
          params:
            repository: destination-repo
            branch: &go-module-branch ((.:go-module-update-branch))
        - task: create-go-module-bump-pull-request
          image: image-cryogenics-essentials
          file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
          params:
            BASE: main
            BRANCH: *go-module-branch
            LABELS: dependencies
            TITLE: Bump go module ((.:go-module-update-branch))
            MESSAGE: |
              This is an automatically generated Pull Request from the Cryogenics CI Bot.
              
              I have detected a new version of a go module and automatically bumped
              it to benefit from the latest changes.
              
              If this does not look right, please reach out to the mapbu-cryogenics team.
          input_mapping:
            source-repo: source-write-only
        
