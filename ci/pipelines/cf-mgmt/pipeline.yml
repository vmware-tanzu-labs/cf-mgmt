---
#!  WARNING: this pipeline is automatically set and manual changes will go away. 
#!
#!  To set pipeline manually run: 
#!    fly set-pipeline -p cf-mgmt -c <(ytt -f ci/pipelines/cf-mgmt/pipeline.yml --data-values-file ci/pipelines/cf-mgmt/values.yml)

#@ load("@ytt:data", "data")

#! ************************************
#! Secrets we need to run this pipeline
#! ************************************

dockerhub_password: &dockerhub_password ((dockerhub.password))
  #! dockerhub_password was needed on 2023-09-15 to publish releases to Docker. 
  #! Generated by using the associated username to log in to DockerHub webui and setting there. 
dockerhub_username: &dockerhub_username ((dockerhub.username))
  #! dockerhub_username was needed on 2023-09-15 to publish releases to Docker. 
  #! Generated by opening a DockerHub account
  #! This account is different to the cryogenics dockerhub account, it is part of the pivotalservices repo.
dockerhub_repository: &dockerhub_repository ((dockerhub.repository))
  #! dockerhub_repository was needed on 2023-09-15 to publish releases to Docker. This is not really a secret, this is the repo into which the cf-mgmt image is published.
dockerhub_tag: &dockerhub_tag ((dockerhub.tag))
  #! dockerhub_repository was needed on 2023-09-15 to publish releases to Docker. This is not really a secret, this is the tag we use when we publish new images.
github_access_token: &github_access_token ((github.access_token))
  #! github_access_token is required to create PRs against repos used in this pipeline. It lives in runway vault under the path 'runway_concourse/cryogenics/github'
github_ssh_key: &github_ssh_key ((github.ssh_key))
  #! github_ssh_key is required to pull and push the repos used in this pipeline. It lives in runway vault under the path 'runway_concourse/cryogenics/github'
toolsmiths_api_token: &toolsmiths_api_token ((toolsmiths.api_token))
  #! toolsmiths_api_token was needed on 2023-09-15 for claiming cf-deployment and TAS environments to run sats tests. It lives in runway vault under the path: 'runway_concourse/cryogenics/toolsmiths'
slack_webhook: &slack_webhook ((slack.webhook))
  #! slack_webhook was needed on 2023-09-15 for notifying the #mapbu-cryogenics-ci channel when builds are published.
harbor_robot_username: &harbor_robot_username ((harbor/robot-account.username))
harbor_robot_password: &harbor_robot_password ((harbor/robot-account.password))
  #! harbor_robot_{username,password} were needed on 2023-09-15 for accessing the cryogenics-essentials OCI image for running some of our tasks. The token can be generated by any team member who is logged in to https://harbor-repo.vmware.com/ using their own creds.



#! **************
#! End of secrets
#! **************

number_of_claim_env_retries: &number_of_claim_env_retries 5

groups:
- name: test
  jobs:
  - claim-cf
  - test
  - unclaim-cf
#@ for v in data.values.tas_versions:
  - #@ 'claim-tas-' + v["version_slug"]
  - #@ 'test-against-tas-' + v["version_slug"]
  - #@ 'unclaim-tas-' + v["version_slug"]
#@ end
  - merge
  - lint-pipeline
- name: bump
  jobs:
  - bump-ci-tasks
- name: release
  jobs:
  - check-for-changes
  - release
  - publish

resource_types:
- name: slack-notification
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cfcommunity/slack-notification-resource
    tag: latest

- name: pr-queue-resource
  type: docker-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cryogenics/pr-queue-resource
    tag: add-status-param

- name: pcf-pool
  type: docker-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/cftoolsmiths/toolsmiths-envs-resource

- name: pivnet
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/pivotalcf/pivnet-resource
    tag: latest-final
  type: registry-image

resources:
- name: cryogenics-essentials
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/cryogenics/essentials
    username: *harbor_robot_username
    password: *harbor_robot_password

- name: slack-cryo-notification
  type: slack-notification
  icon: bell-ring
  source:
    url: *slack_webhook

- name: every-week
  type: time
  source: 
    interval: 168h #! 24h*7days
    
- name: python-394
  type: docker-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/library/python
    tag: 3.9.4
    
- name: image-backup-and-restore
  type: docker-image
  icon: docker
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/pcfplatformrecovery/backup-and-restore

- name: image-buildroot
  type: docker-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/concourse/buildroot
    tag: git

#@ for/end v in data.values.tas_versions:
- icon: pool
  name: #@ 'tas-' + v["version_slug"] + '-env'
  source:
    api_token: *toolsmiths_api_token
    hostname: environments.toolsmiths.cf-app.com
    pool_name: #@ v["pool_name"]
  type: pcf-pool

- name: source
  type: git
  source:
    uri: git@github.com:vmware-tanzu-labs/cf-mgmt.git
    branch: main
    private_key: *github_ssh_key
    ignore_paths: ["README.md","docs/*"]

- name: source-production-files-only
  type: git
  source:
    uri: git@github.com:vmware-tanzu-labs/cf-mgmt.git
    branch: main
    private_key: *github_ssh_key
    ignore_paths:
    - README.md
    - 'docs/*'
    - ci/
    - .github
    - run-tests.sh
    - '**/*_test.go'

- name: cf-mgmt-bump-ci-tasks
  type: git
  source:
    uri: git@github.com:vmware-tanzu-labs/cf-mgmt.git
    private_key: *github_ssh_key

- name: releases
  type: github-release
  source:
    owner: vmware-tanzu-labs
    repository: cf-mgmt
    access_token: *github_access_token
    drafts: false

- name: docker-registry
  type: docker-image
  source:
    repository: *dockerhub_repository
    username: *dockerhub_username
    password: *dockerhub_password
    tag: *dockerhub_tag

- name: cf-deployment-env
  icon: pool
  type: pcf-pool
  source:
    api_token: *toolsmiths_api_token
    hostname: environments.toolsmiths.cf-app.com
    pool_name: cf-deployment

- name: pull-request
  type: pr-queue-resource
  check_every: 1h
  icon: source-pull
  source:
    repository: vmware-tanzu-labs/cf-mgmt
    disable_forks: true
    access_token: *github_access_token
    base_branch: main

- name: cryogenics-concourse-tasks
  type: git
  icon: github
  source:
    uri: git@github.com:pivotal/cryogenics-concourse-tasks.git
    private_key: *github_ssh_key
    
- name: bash
  type: registry-image
  source:
    repository: harbor-repo.vmware.com/dockerhub-proxy-cache/library/bash

jobs:
- name: claim-cf
  plan:
  - get: source
    resource: pull-request
    trigger: true
  - put: cf-deployment-env
    params:
      attempts: *number_of_claim_env_retries
      action: claim

- name: test
  plan:
  - in_parallel:
    - get: source
      resource: pull-request
      passed: [claim-cf]
    - get: cf-deployment-env
      trigger: true
      passed: [claim-cf]
    - get: cryogenics-concourse-tasks
  - in_parallel:
    - do:
      - task: unit-test
        file: source/ci/tasks/runTests.yml
    - do:
      - load_var: pooled-env
        file: cf-deployment-env/metadata
        format: json
      - task: integration-test
        file: source/ci/tasks/runIntegrationTests.yml
        params:
          SYSTEM_DOMAIN: ((.:pooled-env.name)).cf-app.com
  on_failure:
    put: pull-request
    params:
      merge: false
      status: failure

- name: unclaim-cf
  plan:
  - get: cf-deployment-env
    trigger: true
    passed: [test]
  - get: pull-request
    passed: [test]
  - put: cf-deployment-env
    params:
      action: unclaim
      env_file: cf-deployment-env/metadata

- name: merge
  plan:
  - get: pull-request
    trigger: true
    passed:
    - unclaim-cf
    - lint-pipeline
#@ for v in data.values.tas_versions:
    - #@ 'unclaim-tas-' + v["version_slug"]
#@ end
  - put: pull-request
    params:
      merge: true
      status: success

#@ for v in data.values.tas_versions:
- name: #@ 'claim-tas-' + v["version_slug"]
  plan:
  - get: pull-request
    trigger: true
  - put: #@ 'tas-' + v["version_slug"] +'-env'
    params:
      attempts: *number_of_claim_env_retries
      action: claim

- name: #@ 'test-against-tas-' + v["version_slug"]
  plan:
    - in_parallel:
      - get: source
        resource: pull-request
        passed:
        - #@ 'claim-tas-' + v["version_slug"]
      - get: #@ 'tas-' + v["version_slug"] +'-env'
        trigger: true
        passed:
        - #@ 'claim-tas-' + v["version_slug"]
    - task: integration-test
      file: source/ci/tasks/runIntegrationTestsAgainstTAS.yml
      input_mapping:
        env: #@ 'tas-' + v["version_slug"] +'-env'

- name: #@ 'unclaim-tas-' + v["version_slug"]
  plan:
  - get: pull-request
    passed:
    - #@ 'test-against-tas-' + v["version_slug"]
  - get: #@ 'tas-' + v["version_slug"] + '-env'
    trigger: true
    passed:
    - #@ 'test-against-tas-' + v["version_slug"]
  - put: #@ 'tas-' + v["version_slug"] + '-env'
    params:
      action: unclaim
      env_file: #@ 'tas-' + v["version_slug"] + '-env/metadata'
#@ end

- name: check-for-changes
  plan:
    - in_parallel:
      - get: every-week
        trigger: true
      - get: source
      - get: source-production-files-only

- name: release
  plan:
    - in_parallel:
      - get: source-production-files-only
        trigger: true
        passed:
        - check-for-changes
      - get: cryogenics-concourse-tasks
      - get: python-394
      - get: image-backup-and-restore
      - get: source
        passed:
        - check-for-changes
    - task: build
      file: source/ci/tasks/build.yml
      params:
        DRAFT: false
    - do:
      - task: create-release-notes
        file: cryogenics-concourse-tasks/release-automation/release-notes/task.yml
        image: python-394
        input_mapping:
          git-repo: source
        params:
          USE_LATEST_PUBLISHED_TAG: true
      - task: format-release-notes
        file: cryogenics-concourse-tasks/release-automation/format-release-notes/task.yml
        image: image-backup-and-restore
        input_mapping:
          template-folder: cryogenics-concourse-tasks
        params:
          TEMPLATE_PATH: release-automation/release-notes-templates/release-notes-auto.md.erb
    - put: releases
      params:
        name: compiled-output/name
        body: release-notes/release-notes.md
        tag: compiled-output/tag
        globs:
        - compiled-output/cf-mgmt-linux
        - compiled-output/cf-mgmt-osx
        - compiled-output/cf-mgmt.exe
        - compiled-output/cf-mgmt-config-linux
        - compiled-output/cf-mgmt-config-osx
        - compiled-output/cf-mgmt-config.exe
    - load_var: github-release-url
      file: releases/url
    - load_var: version-number
      file: compiled-output/tag
    - put: slack-cryo-notification
      params:
        text: |
          *cf-mgmt*: version `((.:version-number))` has been released 🎉
          Next steps (cc <!subteam^S028XABEHAP>):
            1. Review the release notes <((.:github-release-url))|here>.

- name: publish
  plan:
    - in_parallel:
      - get: image-buildroot
      - get: source
        passed:
         - release
      - get: releases
        trigger: true
        passed:
          - release
    - task: prepare
      file: source/ci/tasks/prepare.yml
      image: image-buildroot
    - put: docker-registry
      params:
        build: prepare-output
        tag_as_latest: true
        tag: prepare-output/version

- name: lint-pipeline
  plan:
    - in_parallel:
        - get: pull-request
          trigger: true
        - get: cryogenics-concourse-tasks
        - get: bash
    - task: check-pipeline-for-stray-secrets
      image: bash
      file: cryogenics-concourse-tasks/pipeline-linting/check-pipeline-for-stray-secrets/task.yml
      input_mapping:
        cryogenics-concourse-tasks: cryogenics-concourse-tasks
        pipeline-repo: pull-request
      params:
        PIPELINE_TO_CHECK: ./pipeline-repo/ci/pipelines/cf-mgmt/pipeline.yml

- name: bump-ci-tasks
  plan:
    - in_parallel:
      - get: cryogenics-essentials
        trigger: true
      - get: cryogenics-concourse-tasks
      - get: source
    - in_parallel:
      - load_var: cryogenics-essentials-version
        file: cryogenics-essentials/tag
      - task: bump-tasks
        image: cryogenics-essentials
        file: cryogenics-concourse-tasks/deps-automation/bump-concourse-tasks/task.yml
        input_mapping:
          repo: source
          image: cryogenics-essentials
        output_mapping:
          repo: source
    - put: cf-mgmt-bump-ci-tasks
      params:
        repository: source
        branch: &bump-ci-task-branch bump-cryogenics-essentials-to-v((.:cryogenics-essentials-version))
        force: true
    - task: create-pull-request
      file: cryogenics-concourse-tasks/github-automation/create-pr/task.yml
      image: cryogenics-essentials
      params:
        BASE: main
        BRANCH: *bump-ci-task-branch
        LABELS: dependencies
        TITLE: "[ci] Bump cryogenics/essentials to v((.:cryogenics-essentials-version))"
        MESSAGE: |
          This is an automatically generated Pull Request from the Cryogenics CI Bot.
          I have detected a new version of [cryogenics/essentials](https://hub.docker.com/r/cryogenics/essentials/tags) and automatically bumped
          this package to benefit from the latest changes.
          If this does not look right, please reach out to the [#mapbu-cryogenics](https://vmware.slack.com/archives/C01DXEYRKRU) team.
      input_mapping:
        source-repo: cf-mgmt-bump-ci-tasks

        
