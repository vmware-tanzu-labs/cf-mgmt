// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmwarepivotallabs/cf-mgmt/shareddomain"
)

type FakeCFClient struct {
	CreateSharedDomainStub        func(string, bool, string) (*cfclient.SharedDomain, error)
	createSharedDomainMutex       sync.RWMutex
	createSharedDomainArgsForCall []struct {
		arg1 string
		arg2 bool
		arg3 string
	}
	createSharedDomainReturns struct {
		result1 *cfclient.SharedDomain
		result2 error
	}
	createSharedDomainReturnsOnCall map[int]struct {
		result1 *cfclient.SharedDomain
		result2 error
	}
	DeleteSharedDomainStub        func(string, bool) error
	deleteSharedDomainMutex       sync.RWMutex
	deleteSharedDomainArgsForCall []struct {
		arg1 string
		arg2 bool
	}
	deleteSharedDomainReturns struct {
		result1 error
	}
	deleteSharedDomainReturnsOnCall map[int]struct {
		result1 error
	}
	ListSharedDomainsStub        func() ([]cfclient.SharedDomain, error)
	listSharedDomainsMutex       sync.RWMutex
	listSharedDomainsArgsForCall []struct {
	}
	listSharedDomainsReturns struct {
		result1 []cfclient.SharedDomain
		result2 error
	}
	listSharedDomainsReturnsOnCall map[int]struct {
		result1 []cfclient.SharedDomain
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) CreateSharedDomain(arg1 string, arg2 bool, arg3 string) (*cfclient.SharedDomain, error) {
	fake.createSharedDomainMutex.Lock()
	ret, specificReturn := fake.createSharedDomainReturnsOnCall[len(fake.createSharedDomainArgsForCall)]
	fake.createSharedDomainArgsForCall = append(fake.createSharedDomainArgsForCall, struct {
		arg1 string
		arg2 bool
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.CreateSharedDomainStub
	fakeReturns := fake.createSharedDomainReturns
	fake.recordInvocation("CreateSharedDomain", []interface{}{arg1, arg2, arg3})
	fake.createSharedDomainMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateSharedDomainCallCount() int {
	fake.createSharedDomainMutex.RLock()
	defer fake.createSharedDomainMutex.RUnlock()
	return len(fake.createSharedDomainArgsForCall)
}

func (fake *FakeCFClient) CreateSharedDomainCalls(stub func(string, bool, string) (*cfclient.SharedDomain, error)) {
	fake.createSharedDomainMutex.Lock()
	defer fake.createSharedDomainMutex.Unlock()
	fake.CreateSharedDomainStub = stub
}

func (fake *FakeCFClient) CreateSharedDomainArgsForCall(i int) (string, bool, string) {
	fake.createSharedDomainMutex.RLock()
	defer fake.createSharedDomainMutex.RUnlock()
	argsForCall := fake.createSharedDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFClient) CreateSharedDomainReturns(result1 *cfclient.SharedDomain, result2 error) {
	fake.createSharedDomainMutex.Lock()
	defer fake.createSharedDomainMutex.Unlock()
	fake.CreateSharedDomainStub = nil
	fake.createSharedDomainReturns = struct {
		result1 *cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateSharedDomainReturnsOnCall(i int, result1 *cfclient.SharedDomain, result2 error) {
	fake.createSharedDomainMutex.Lock()
	defer fake.createSharedDomainMutex.Unlock()
	fake.CreateSharedDomainStub = nil
	if fake.createSharedDomainReturnsOnCall == nil {
		fake.createSharedDomainReturnsOnCall = make(map[int]struct {
			result1 *cfclient.SharedDomain
			result2 error
		})
	}
	fake.createSharedDomainReturnsOnCall[i] = struct {
		result1 *cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DeleteSharedDomain(arg1 string, arg2 bool) error {
	fake.deleteSharedDomainMutex.Lock()
	ret, specificReturn := fake.deleteSharedDomainReturnsOnCall[len(fake.deleteSharedDomainArgsForCall)]
	fake.deleteSharedDomainArgsForCall = append(fake.deleteSharedDomainArgsForCall, struct {
		arg1 string
		arg2 bool
	}{arg1, arg2})
	stub := fake.DeleteSharedDomainStub
	fakeReturns := fake.deleteSharedDomainReturns
	fake.recordInvocation("DeleteSharedDomain", []interface{}{arg1, arg2})
	fake.deleteSharedDomainMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteSharedDomainCallCount() int {
	fake.deleteSharedDomainMutex.RLock()
	defer fake.deleteSharedDomainMutex.RUnlock()
	return len(fake.deleteSharedDomainArgsForCall)
}

func (fake *FakeCFClient) DeleteSharedDomainCalls(stub func(string, bool) error) {
	fake.deleteSharedDomainMutex.Lock()
	defer fake.deleteSharedDomainMutex.Unlock()
	fake.DeleteSharedDomainStub = stub
}

func (fake *FakeCFClient) DeleteSharedDomainArgsForCall(i int) (string, bool) {
	fake.deleteSharedDomainMutex.RLock()
	defer fake.deleteSharedDomainMutex.RUnlock()
	argsForCall := fake.deleteSharedDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) DeleteSharedDomainReturns(result1 error) {
	fake.deleteSharedDomainMutex.Lock()
	defer fake.deleteSharedDomainMutex.Unlock()
	fake.DeleteSharedDomainStub = nil
	fake.deleteSharedDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteSharedDomainReturnsOnCall(i int, result1 error) {
	fake.deleteSharedDomainMutex.Lock()
	defer fake.deleteSharedDomainMutex.Unlock()
	fake.DeleteSharedDomainStub = nil
	if fake.deleteSharedDomainReturnsOnCall == nil {
		fake.deleteSharedDomainReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteSharedDomainReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ListSharedDomains() ([]cfclient.SharedDomain, error) {
	fake.listSharedDomainsMutex.Lock()
	ret, specificReturn := fake.listSharedDomainsReturnsOnCall[len(fake.listSharedDomainsArgsForCall)]
	fake.listSharedDomainsArgsForCall = append(fake.listSharedDomainsArgsForCall, struct {
	}{})
	stub := fake.ListSharedDomainsStub
	fakeReturns := fake.listSharedDomainsReturns
	fake.recordInvocation("ListSharedDomains", []interface{}{})
	fake.listSharedDomainsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListSharedDomainsCallCount() int {
	fake.listSharedDomainsMutex.RLock()
	defer fake.listSharedDomainsMutex.RUnlock()
	return len(fake.listSharedDomainsArgsForCall)
}

func (fake *FakeCFClient) ListSharedDomainsCalls(stub func() ([]cfclient.SharedDomain, error)) {
	fake.listSharedDomainsMutex.Lock()
	defer fake.listSharedDomainsMutex.Unlock()
	fake.ListSharedDomainsStub = stub
}

func (fake *FakeCFClient) ListSharedDomainsReturns(result1 []cfclient.SharedDomain, result2 error) {
	fake.listSharedDomainsMutex.Lock()
	defer fake.listSharedDomainsMutex.Unlock()
	fake.ListSharedDomainsStub = nil
	fake.listSharedDomainsReturns = struct {
		result1 []cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListSharedDomainsReturnsOnCall(i int, result1 []cfclient.SharedDomain, result2 error) {
	fake.listSharedDomainsMutex.Lock()
	defer fake.listSharedDomainsMutex.Unlock()
	fake.ListSharedDomainsStub = nil
	if fake.listSharedDomainsReturnsOnCall == nil {
		fake.listSharedDomainsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.SharedDomain
			result2 error
		})
	}
	fake.listSharedDomainsReturnsOnCall[i] = struct {
		result1 []cfclient.SharedDomain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createSharedDomainMutex.RLock()
	defer fake.createSharedDomainMutex.RUnlock()
	fake.deleteSharedDomainMutex.RLock()
	defer fake.deleteSharedDomainMutex.RUnlock()
	fake.listSharedDomainsMutex.RLock()
	defer fake.listSharedDomainsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ shareddomain.CFClient = new(FakeCFClient)
