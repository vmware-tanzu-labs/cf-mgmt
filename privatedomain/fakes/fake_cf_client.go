// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmwarepivotallabs/cf-mgmt/privatedomain"
)

type FakeCFClient struct {
	CreateDomainStub        func(string, string) (*cfclient.Domain, error)
	createDomainMutex       sync.RWMutex
	createDomainArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createDomainReturns struct {
		result1 *cfclient.Domain
		result2 error
	}
	createDomainReturnsOnCall map[int]struct {
		result1 *cfclient.Domain
		result2 error
	}
	DeleteDomainStub        func(string) error
	deleteDomainMutex       sync.RWMutex
	deleteDomainArgsForCall []struct {
		arg1 string
	}
	deleteDomainReturns struct {
		result1 error
	}
	deleteDomainReturnsOnCall map[int]struct {
		result1 error
	}
	ListDomainsStub        func() ([]cfclient.Domain, error)
	listDomainsMutex       sync.RWMutex
	listDomainsArgsForCall []struct {
	}
	listDomainsReturns struct {
		result1 []cfclient.Domain
		result2 error
	}
	listDomainsReturnsOnCall map[int]struct {
		result1 []cfclient.Domain
		result2 error
	}
	ListOrgPrivateDomainsStub        func(string) ([]cfclient.Domain, error)
	listOrgPrivateDomainsMutex       sync.RWMutex
	listOrgPrivateDomainsArgsForCall []struct {
		arg1 string
	}
	listOrgPrivateDomainsReturns struct {
		result1 []cfclient.Domain
		result2 error
	}
	listOrgPrivateDomainsReturnsOnCall map[int]struct {
		result1 []cfclient.Domain
		result2 error
	}
	ShareOrgPrivateDomainStub        func(string, string) (*cfclient.Domain, error)
	shareOrgPrivateDomainMutex       sync.RWMutex
	shareOrgPrivateDomainArgsForCall []struct {
		arg1 string
		arg2 string
	}
	shareOrgPrivateDomainReturns struct {
		result1 *cfclient.Domain
		result2 error
	}
	shareOrgPrivateDomainReturnsOnCall map[int]struct {
		result1 *cfclient.Domain
		result2 error
	}
	UnshareOrgPrivateDomainStub        func(string, string) error
	unshareOrgPrivateDomainMutex       sync.RWMutex
	unshareOrgPrivateDomainArgsForCall []struct {
		arg1 string
		arg2 string
	}
	unshareOrgPrivateDomainReturns struct {
		result1 error
	}
	unshareOrgPrivateDomainReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) CreateDomain(arg1 string, arg2 string) (*cfclient.Domain, error) {
	fake.createDomainMutex.Lock()
	ret, specificReturn := fake.createDomainReturnsOnCall[len(fake.createDomainArgsForCall)]
	fake.createDomainArgsForCall = append(fake.createDomainArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CreateDomainStub
	fakeReturns := fake.createDomainReturns
	fake.recordInvocation("CreateDomain", []interface{}{arg1, arg2})
	fake.createDomainMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateDomainCallCount() int {
	fake.createDomainMutex.RLock()
	defer fake.createDomainMutex.RUnlock()
	return len(fake.createDomainArgsForCall)
}

func (fake *FakeCFClient) CreateDomainCalls(stub func(string, string) (*cfclient.Domain, error)) {
	fake.createDomainMutex.Lock()
	defer fake.createDomainMutex.Unlock()
	fake.CreateDomainStub = stub
}

func (fake *FakeCFClient) CreateDomainArgsForCall(i int) (string, string) {
	fake.createDomainMutex.RLock()
	defer fake.createDomainMutex.RUnlock()
	argsForCall := fake.createDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) CreateDomainReturns(result1 *cfclient.Domain, result2 error) {
	fake.createDomainMutex.Lock()
	defer fake.createDomainMutex.Unlock()
	fake.CreateDomainStub = nil
	fake.createDomainReturns = struct {
		result1 *cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateDomainReturnsOnCall(i int, result1 *cfclient.Domain, result2 error) {
	fake.createDomainMutex.Lock()
	defer fake.createDomainMutex.Unlock()
	fake.CreateDomainStub = nil
	if fake.createDomainReturnsOnCall == nil {
		fake.createDomainReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Domain
			result2 error
		})
	}
	fake.createDomainReturnsOnCall[i] = struct {
		result1 *cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DeleteDomain(arg1 string) error {
	fake.deleteDomainMutex.Lock()
	ret, specificReturn := fake.deleteDomainReturnsOnCall[len(fake.deleteDomainArgsForCall)]
	fake.deleteDomainArgsForCall = append(fake.deleteDomainArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteDomainStub
	fakeReturns := fake.deleteDomainReturns
	fake.recordInvocation("DeleteDomain", []interface{}{arg1})
	fake.deleteDomainMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteDomainCallCount() int {
	fake.deleteDomainMutex.RLock()
	defer fake.deleteDomainMutex.RUnlock()
	return len(fake.deleteDomainArgsForCall)
}

func (fake *FakeCFClient) DeleteDomainCalls(stub func(string) error) {
	fake.deleteDomainMutex.Lock()
	defer fake.deleteDomainMutex.Unlock()
	fake.DeleteDomainStub = stub
}

func (fake *FakeCFClient) DeleteDomainArgsForCall(i int) string {
	fake.deleteDomainMutex.RLock()
	defer fake.deleteDomainMutex.RUnlock()
	argsForCall := fake.deleteDomainArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteDomainReturns(result1 error) {
	fake.deleteDomainMutex.Lock()
	defer fake.deleteDomainMutex.Unlock()
	fake.DeleteDomainStub = nil
	fake.deleteDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteDomainReturnsOnCall(i int, result1 error) {
	fake.deleteDomainMutex.Lock()
	defer fake.deleteDomainMutex.Unlock()
	fake.DeleteDomainStub = nil
	if fake.deleteDomainReturnsOnCall == nil {
		fake.deleteDomainReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteDomainReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ListDomains() ([]cfclient.Domain, error) {
	fake.listDomainsMutex.Lock()
	ret, specificReturn := fake.listDomainsReturnsOnCall[len(fake.listDomainsArgsForCall)]
	fake.listDomainsArgsForCall = append(fake.listDomainsArgsForCall, struct {
	}{})
	stub := fake.ListDomainsStub
	fakeReturns := fake.listDomainsReturns
	fake.recordInvocation("ListDomains", []interface{}{})
	fake.listDomainsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListDomainsCallCount() int {
	fake.listDomainsMutex.RLock()
	defer fake.listDomainsMutex.RUnlock()
	return len(fake.listDomainsArgsForCall)
}

func (fake *FakeCFClient) ListDomainsCalls(stub func() ([]cfclient.Domain, error)) {
	fake.listDomainsMutex.Lock()
	defer fake.listDomainsMutex.Unlock()
	fake.ListDomainsStub = stub
}

func (fake *FakeCFClient) ListDomainsReturns(result1 []cfclient.Domain, result2 error) {
	fake.listDomainsMutex.Lock()
	defer fake.listDomainsMutex.Unlock()
	fake.ListDomainsStub = nil
	fake.listDomainsReturns = struct {
		result1 []cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListDomainsReturnsOnCall(i int, result1 []cfclient.Domain, result2 error) {
	fake.listDomainsMutex.Lock()
	defer fake.listDomainsMutex.Unlock()
	fake.ListDomainsStub = nil
	if fake.listDomainsReturnsOnCall == nil {
		fake.listDomainsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Domain
			result2 error
		})
	}
	fake.listDomainsReturnsOnCall[i] = struct {
		result1 []cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgPrivateDomains(arg1 string) ([]cfclient.Domain, error) {
	fake.listOrgPrivateDomainsMutex.Lock()
	ret, specificReturn := fake.listOrgPrivateDomainsReturnsOnCall[len(fake.listOrgPrivateDomainsArgsForCall)]
	fake.listOrgPrivateDomainsArgsForCall = append(fake.listOrgPrivateDomainsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ListOrgPrivateDomainsStub
	fakeReturns := fake.listOrgPrivateDomainsReturns
	fake.recordInvocation("ListOrgPrivateDomains", []interface{}{arg1})
	fake.listOrgPrivateDomainsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListOrgPrivateDomainsCallCount() int {
	fake.listOrgPrivateDomainsMutex.RLock()
	defer fake.listOrgPrivateDomainsMutex.RUnlock()
	return len(fake.listOrgPrivateDomainsArgsForCall)
}

func (fake *FakeCFClient) ListOrgPrivateDomainsCalls(stub func(string) ([]cfclient.Domain, error)) {
	fake.listOrgPrivateDomainsMutex.Lock()
	defer fake.listOrgPrivateDomainsMutex.Unlock()
	fake.ListOrgPrivateDomainsStub = stub
}

func (fake *FakeCFClient) ListOrgPrivateDomainsArgsForCall(i int) string {
	fake.listOrgPrivateDomainsMutex.RLock()
	defer fake.listOrgPrivateDomainsMutex.RUnlock()
	argsForCall := fake.listOrgPrivateDomainsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListOrgPrivateDomainsReturns(result1 []cfclient.Domain, result2 error) {
	fake.listOrgPrivateDomainsMutex.Lock()
	defer fake.listOrgPrivateDomainsMutex.Unlock()
	fake.ListOrgPrivateDomainsStub = nil
	fake.listOrgPrivateDomainsReturns = struct {
		result1 []cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListOrgPrivateDomainsReturnsOnCall(i int, result1 []cfclient.Domain, result2 error) {
	fake.listOrgPrivateDomainsMutex.Lock()
	defer fake.listOrgPrivateDomainsMutex.Unlock()
	fake.ListOrgPrivateDomainsStub = nil
	if fake.listOrgPrivateDomainsReturnsOnCall == nil {
		fake.listOrgPrivateDomainsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Domain
			result2 error
		})
	}
	fake.listOrgPrivateDomainsReturnsOnCall[i] = struct {
		result1 []cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ShareOrgPrivateDomain(arg1 string, arg2 string) (*cfclient.Domain, error) {
	fake.shareOrgPrivateDomainMutex.Lock()
	ret, specificReturn := fake.shareOrgPrivateDomainReturnsOnCall[len(fake.shareOrgPrivateDomainArgsForCall)]
	fake.shareOrgPrivateDomainArgsForCall = append(fake.shareOrgPrivateDomainArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.ShareOrgPrivateDomainStub
	fakeReturns := fake.shareOrgPrivateDomainReturns
	fake.recordInvocation("ShareOrgPrivateDomain", []interface{}{arg1, arg2})
	fake.shareOrgPrivateDomainMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ShareOrgPrivateDomainCallCount() int {
	fake.shareOrgPrivateDomainMutex.RLock()
	defer fake.shareOrgPrivateDomainMutex.RUnlock()
	return len(fake.shareOrgPrivateDomainArgsForCall)
}

func (fake *FakeCFClient) ShareOrgPrivateDomainCalls(stub func(string, string) (*cfclient.Domain, error)) {
	fake.shareOrgPrivateDomainMutex.Lock()
	defer fake.shareOrgPrivateDomainMutex.Unlock()
	fake.ShareOrgPrivateDomainStub = stub
}

func (fake *FakeCFClient) ShareOrgPrivateDomainArgsForCall(i int) (string, string) {
	fake.shareOrgPrivateDomainMutex.RLock()
	defer fake.shareOrgPrivateDomainMutex.RUnlock()
	argsForCall := fake.shareOrgPrivateDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) ShareOrgPrivateDomainReturns(result1 *cfclient.Domain, result2 error) {
	fake.shareOrgPrivateDomainMutex.Lock()
	defer fake.shareOrgPrivateDomainMutex.Unlock()
	fake.ShareOrgPrivateDomainStub = nil
	fake.shareOrgPrivateDomainReturns = struct {
		result1 *cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ShareOrgPrivateDomainReturnsOnCall(i int, result1 *cfclient.Domain, result2 error) {
	fake.shareOrgPrivateDomainMutex.Lock()
	defer fake.shareOrgPrivateDomainMutex.Unlock()
	fake.ShareOrgPrivateDomainStub = nil
	if fake.shareOrgPrivateDomainReturnsOnCall == nil {
		fake.shareOrgPrivateDomainReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Domain
			result2 error
		})
	}
	fake.shareOrgPrivateDomainReturnsOnCall[i] = struct {
		result1 *cfclient.Domain
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) UnshareOrgPrivateDomain(arg1 string, arg2 string) error {
	fake.unshareOrgPrivateDomainMutex.Lock()
	ret, specificReturn := fake.unshareOrgPrivateDomainReturnsOnCall[len(fake.unshareOrgPrivateDomainArgsForCall)]
	fake.unshareOrgPrivateDomainArgsForCall = append(fake.unshareOrgPrivateDomainArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.UnshareOrgPrivateDomainStub
	fakeReturns := fake.unshareOrgPrivateDomainReturns
	fake.recordInvocation("UnshareOrgPrivateDomain", []interface{}{arg1, arg2})
	fake.unshareOrgPrivateDomainMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainCallCount() int {
	fake.unshareOrgPrivateDomainMutex.RLock()
	defer fake.unshareOrgPrivateDomainMutex.RUnlock()
	return len(fake.unshareOrgPrivateDomainArgsForCall)
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainCalls(stub func(string, string) error) {
	fake.unshareOrgPrivateDomainMutex.Lock()
	defer fake.unshareOrgPrivateDomainMutex.Unlock()
	fake.UnshareOrgPrivateDomainStub = stub
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainArgsForCall(i int) (string, string) {
	fake.unshareOrgPrivateDomainMutex.RLock()
	defer fake.unshareOrgPrivateDomainMutex.RUnlock()
	argsForCall := fake.unshareOrgPrivateDomainArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainReturns(result1 error) {
	fake.unshareOrgPrivateDomainMutex.Lock()
	defer fake.unshareOrgPrivateDomainMutex.Unlock()
	fake.UnshareOrgPrivateDomainStub = nil
	fake.unshareOrgPrivateDomainReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) UnshareOrgPrivateDomainReturnsOnCall(i int, result1 error) {
	fake.unshareOrgPrivateDomainMutex.Lock()
	defer fake.unshareOrgPrivateDomainMutex.Unlock()
	fake.UnshareOrgPrivateDomainStub = nil
	if fake.unshareOrgPrivateDomainReturnsOnCall == nil {
		fake.unshareOrgPrivateDomainReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unshareOrgPrivateDomainReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createDomainMutex.RLock()
	defer fake.createDomainMutex.RUnlock()
	fake.deleteDomainMutex.RLock()
	defer fake.deleteDomainMutex.RUnlock()
	fake.listDomainsMutex.RLock()
	defer fake.listDomainsMutex.RUnlock()
	fake.listOrgPrivateDomainsMutex.RLock()
	defer fake.listOrgPrivateDomainsMutex.RUnlock()
	fake.shareOrgPrivateDomainMutex.RLock()
	defer fake.shareOrgPrivateDomainMutex.RUnlock()
	fake.unshareOrgPrivateDomainMutex.RLock()
	defer fake.unshareOrgPrivateDomainMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ privatedomain.CFClient = new(FakeCFClient)
