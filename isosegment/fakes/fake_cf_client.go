// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/url"
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmwarepivotallabs/cf-mgmt/isosegment"
)

type FakeCFClient struct {
	AddIsolationSegmentToOrgStub        func(string, string) error
	addIsolationSegmentToOrgMutex       sync.RWMutex
	addIsolationSegmentToOrgArgsForCall []struct {
		arg1 string
		arg2 string
	}
	addIsolationSegmentToOrgReturns struct {
		result1 error
	}
	addIsolationSegmentToOrgReturnsOnCall map[int]struct {
		result1 error
	}
	AddIsolationSegmentToSpaceStub        func(string, string) error
	addIsolationSegmentToSpaceMutex       sync.RWMutex
	addIsolationSegmentToSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	addIsolationSegmentToSpaceReturns struct {
		result1 error
	}
	addIsolationSegmentToSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	CreateIsolationSegmentStub        func(string) (*cfclient.IsolationSegment, error)
	createIsolationSegmentMutex       sync.RWMutex
	createIsolationSegmentArgsForCall []struct {
		arg1 string
	}
	createIsolationSegmentReturns struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}
	createIsolationSegmentReturnsOnCall map[int]struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}
	DefaultIsolationSegmentForOrgStub        func(string, string) error
	defaultIsolationSegmentForOrgMutex       sync.RWMutex
	defaultIsolationSegmentForOrgArgsForCall []struct {
		arg1 string
		arg2 string
	}
	defaultIsolationSegmentForOrgReturns struct {
		result1 error
	}
	defaultIsolationSegmentForOrgReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteIsolationSegmentByGUIDStub        func(string) error
	deleteIsolationSegmentByGUIDMutex       sync.RWMutex
	deleteIsolationSegmentByGUIDArgsForCall []struct {
		arg1 string
	}
	deleteIsolationSegmentByGUIDReturns struct {
		result1 error
	}
	deleteIsolationSegmentByGUIDReturnsOnCall map[int]struct {
		result1 error
	}
	GetIsolationSegmentByGUIDStub        func(string) (*cfclient.IsolationSegment, error)
	getIsolationSegmentByGUIDMutex       sync.RWMutex
	getIsolationSegmentByGUIDArgsForCall []struct {
		arg1 string
	}
	getIsolationSegmentByGUIDReturns struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}
	getIsolationSegmentByGUIDReturnsOnCall map[int]struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}
	IsolationSegmentForSpaceStub        func(string, string) error
	isolationSegmentForSpaceMutex       sync.RWMutex
	isolationSegmentForSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	isolationSegmentForSpaceReturns struct {
		result1 error
	}
	isolationSegmentForSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	ListIsolationSegmentsStub        func() ([]cfclient.IsolationSegment, error)
	listIsolationSegmentsMutex       sync.RWMutex
	listIsolationSegmentsArgsForCall []struct {
	}
	listIsolationSegmentsReturns struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}
	listIsolationSegmentsReturnsOnCall map[int]struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}
	ListIsolationSegmentsByQueryStub        func(url.Values) ([]cfclient.IsolationSegment, error)
	listIsolationSegmentsByQueryMutex       sync.RWMutex
	listIsolationSegmentsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listIsolationSegmentsByQueryReturns struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}
	listIsolationSegmentsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}
	RemoveIsolationSegmentFromOrgStub        func(string, string) error
	removeIsolationSegmentFromOrgMutex       sync.RWMutex
	removeIsolationSegmentFromOrgArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeIsolationSegmentFromOrgReturns struct {
		result1 error
	}
	removeIsolationSegmentFromOrgReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveIsolationSegmentFromSpaceStub        func(string, string) error
	removeIsolationSegmentFromSpaceMutex       sync.RWMutex
	removeIsolationSegmentFromSpaceArgsForCall []struct {
		arg1 string
		arg2 string
	}
	removeIsolationSegmentFromSpaceReturns struct {
		result1 error
	}
	removeIsolationSegmentFromSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	ResetDefaultIsolationSegmentForOrgStub        func(string) error
	resetDefaultIsolationSegmentForOrgMutex       sync.RWMutex
	resetDefaultIsolationSegmentForOrgArgsForCall []struct {
		arg1 string
	}
	resetDefaultIsolationSegmentForOrgReturns struct {
		result1 error
	}
	resetDefaultIsolationSegmentForOrgReturnsOnCall map[int]struct {
		result1 error
	}
	ResetIsolationSegmentForSpaceStub        func(string) error
	resetIsolationSegmentForSpaceMutex       sync.RWMutex
	resetIsolationSegmentForSpaceArgsForCall []struct {
		arg1 string
	}
	resetIsolationSegmentForSpaceReturns struct {
		result1 error
	}
	resetIsolationSegmentForSpaceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFClient) AddIsolationSegmentToOrg(arg1 string, arg2 string) error {
	fake.addIsolationSegmentToOrgMutex.Lock()
	ret, specificReturn := fake.addIsolationSegmentToOrgReturnsOnCall[len(fake.addIsolationSegmentToOrgArgsForCall)]
	fake.addIsolationSegmentToOrgArgsForCall = append(fake.addIsolationSegmentToOrgArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AddIsolationSegmentToOrgStub
	fakeReturns := fake.addIsolationSegmentToOrgReturns
	fake.recordInvocation("AddIsolationSegmentToOrg", []interface{}{arg1, arg2})
	fake.addIsolationSegmentToOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgCallCount() int {
	fake.addIsolationSegmentToOrgMutex.RLock()
	defer fake.addIsolationSegmentToOrgMutex.RUnlock()
	return len(fake.addIsolationSegmentToOrgArgsForCall)
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgCalls(stub func(string, string) error) {
	fake.addIsolationSegmentToOrgMutex.Lock()
	defer fake.addIsolationSegmentToOrgMutex.Unlock()
	fake.AddIsolationSegmentToOrgStub = stub
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgArgsForCall(i int) (string, string) {
	fake.addIsolationSegmentToOrgMutex.RLock()
	defer fake.addIsolationSegmentToOrgMutex.RUnlock()
	argsForCall := fake.addIsolationSegmentToOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgReturns(result1 error) {
	fake.addIsolationSegmentToOrgMutex.Lock()
	defer fake.addIsolationSegmentToOrgMutex.Unlock()
	fake.AddIsolationSegmentToOrgStub = nil
	fake.addIsolationSegmentToOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AddIsolationSegmentToOrgReturnsOnCall(i int, result1 error) {
	fake.addIsolationSegmentToOrgMutex.Lock()
	defer fake.addIsolationSegmentToOrgMutex.Unlock()
	fake.AddIsolationSegmentToOrgStub = nil
	if fake.addIsolationSegmentToOrgReturnsOnCall == nil {
		fake.addIsolationSegmentToOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addIsolationSegmentToOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AddIsolationSegmentToSpace(arg1 string, arg2 string) error {
	fake.addIsolationSegmentToSpaceMutex.Lock()
	ret, specificReturn := fake.addIsolationSegmentToSpaceReturnsOnCall[len(fake.addIsolationSegmentToSpaceArgsForCall)]
	fake.addIsolationSegmentToSpaceArgsForCall = append(fake.addIsolationSegmentToSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.AddIsolationSegmentToSpaceStub
	fakeReturns := fake.addIsolationSegmentToSpaceReturns
	fake.recordInvocation("AddIsolationSegmentToSpace", []interface{}{arg1, arg2})
	fake.addIsolationSegmentToSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceCallCount() int {
	fake.addIsolationSegmentToSpaceMutex.RLock()
	defer fake.addIsolationSegmentToSpaceMutex.RUnlock()
	return len(fake.addIsolationSegmentToSpaceArgsForCall)
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceCalls(stub func(string, string) error) {
	fake.addIsolationSegmentToSpaceMutex.Lock()
	defer fake.addIsolationSegmentToSpaceMutex.Unlock()
	fake.AddIsolationSegmentToSpaceStub = stub
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceArgsForCall(i int) (string, string) {
	fake.addIsolationSegmentToSpaceMutex.RLock()
	defer fake.addIsolationSegmentToSpaceMutex.RUnlock()
	argsForCall := fake.addIsolationSegmentToSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceReturns(result1 error) {
	fake.addIsolationSegmentToSpaceMutex.Lock()
	defer fake.addIsolationSegmentToSpaceMutex.Unlock()
	fake.AddIsolationSegmentToSpaceStub = nil
	fake.addIsolationSegmentToSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) AddIsolationSegmentToSpaceReturnsOnCall(i int, result1 error) {
	fake.addIsolationSegmentToSpaceMutex.Lock()
	defer fake.addIsolationSegmentToSpaceMutex.Unlock()
	fake.AddIsolationSegmentToSpaceStub = nil
	if fake.addIsolationSegmentToSpaceReturnsOnCall == nil {
		fake.addIsolationSegmentToSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addIsolationSegmentToSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) CreateIsolationSegment(arg1 string) (*cfclient.IsolationSegment, error) {
	fake.createIsolationSegmentMutex.Lock()
	ret, specificReturn := fake.createIsolationSegmentReturnsOnCall[len(fake.createIsolationSegmentArgsForCall)]
	fake.createIsolationSegmentArgsForCall = append(fake.createIsolationSegmentArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CreateIsolationSegmentStub
	fakeReturns := fake.createIsolationSegmentReturns
	fake.recordInvocation("CreateIsolationSegment", []interface{}{arg1})
	fake.createIsolationSegmentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) CreateIsolationSegmentCallCount() int {
	fake.createIsolationSegmentMutex.RLock()
	defer fake.createIsolationSegmentMutex.RUnlock()
	return len(fake.createIsolationSegmentArgsForCall)
}

func (fake *FakeCFClient) CreateIsolationSegmentCalls(stub func(string) (*cfclient.IsolationSegment, error)) {
	fake.createIsolationSegmentMutex.Lock()
	defer fake.createIsolationSegmentMutex.Unlock()
	fake.CreateIsolationSegmentStub = stub
}

func (fake *FakeCFClient) CreateIsolationSegmentArgsForCall(i int) string {
	fake.createIsolationSegmentMutex.RLock()
	defer fake.createIsolationSegmentMutex.RUnlock()
	argsForCall := fake.createIsolationSegmentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) CreateIsolationSegmentReturns(result1 *cfclient.IsolationSegment, result2 error) {
	fake.createIsolationSegmentMutex.Lock()
	defer fake.createIsolationSegmentMutex.Unlock()
	fake.CreateIsolationSegmentStub = nil
	fake.createIsolationSegmentReturns = struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) CreateIsolationSegmentReturnsOnCall(i int, result1 *cfclient.IsolationSegment, result2 error) {
	fake.createIsolationSegmentMutex.Lock()
	defer fake.createIsolationSegmentMutex.Unlock()
	fake.CreateIsolationSegmentStub = nil
	if fake.createIsolationSegmentReturnsOnCall == nil {
		fake.createIsolationSegmentReturnsOnCall = make(map[int]struct {
			result1 *cfclient.IsolationSegment
			result2 error
		})
	}
	fake.createIsolationSegmentReturnsOnCall[i] = struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrg(arg1 string, arg2 string) error {
	fake.defaultIsolationSegmentForOrgMutex.Lock()
	ret, specificReturn := fake.defaultIsolationSegmentForOrgReturnsOnCall[len(fake.defaultIsolationSegmentForOrgArgsForCall)]
	fake.defaultIsolationSegmentForOrgArgsForCall = append(fake.defaultIsolationSegmentForOrgArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.DefaultIsolationSegmentForOrgStub
	fakeReturns := fake.defaultIsolationSegmentForOrgReturns
	fake.recordInvocation("DefaultIsolationSegmentForOrg", []interface{}{arg1, arg2})
	fake.defaultIsolationSegmentForOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgCallCount() int {
	fake.defaultIsolationSegmentForOrgMutex.RLock()
	defer fake.defaultIsolationSegmentForOrgMutex.RUnlock()
	return len(fake.defaultIsolationSegmentForOrgArgsForCall)
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgCalls(stub func(string, string) error) {
	fake.defaultIsolationSegmentForOrgMutex.Lock()
	defer fake.defaultIsolationSegmentForOrgMutex.Unlock()
	fake.DefaultIsolationSegmentForOrgStub = stub
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgArgsForCall(i int) (string, string) {
	fake.defaultIsolationSegmentForOrgMutex.RLock()
	defer fake.defaultIsolationSegmentForOrgMutex.RUnlock()
	argsForCall := fake.defaultIsolationSegmentForOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgReturns(result1 error) {
	fake.defaultIsolationSegmentForOrgMutex.Lock()
	defer fake.defaultIsolationSegmentForOrgMutex.Unlock()
	fake.DefaultIsolationSegmentForOrgStub = nil
	fake.defaultIsolationSegmentForOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DefaultIsolationSegmentForOrgReturnsOnCall(i int, result1 error) {
	fake.defaultIsolationSegmentForOrgMutex.Lock()
	defer fake.defaultIsolationSegmentForOrgMutex.Unlock()
	fake.DefaultIsolationSegmentForOrgStub = nil
	if fake.defaultIsolationSegmentForOrgReturnsOnCall == nil {
		fake.defaultIsolationSegmentForOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.defaultIsolationSegmentForOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUID(arg1 string) error {
	fake.deleteIsolationSegmentByGUIDMutex.Lock()
	ret, specificReturn := fake.deleteIsolationSegmentByGUIDReturnsOnCall[len(fake.deleteIsolationSegmentByGUIDArgsForCall)]
	fake.deleteIsolationSegmentByGUIDArgsForCall = append(fake.deleteIsolationSegmentByGUIDArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteIsolationSegmentByGUIDStub
	fakeReturns := fake.deleteIsolationSegmentByGUIDReturns
	fake.recordInvocation("DeleteIsolationSegmentByGUID", []interface{}{arg1})
	fake.deleteIsolationSegmentByGUIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDCallCount() int {
	fake.deleteIsolationSegmentByGUIDMutex.RLock()
	defer fake.deleteIsolationSegmentByGUIDMutex.RUnlock()
	return len(fake.deleteIsolationSegmentByGUIDArgsForCall)
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDCalls(stub func(string) error) {
	fake.deleteIsolationSegmentByGUIDMutex.Lock()
	defer fake.deleteIsolationSegmentByGUIDMutex.Unlock()
	fake.DeleteIsolationSegmentByGUIDStub = stub
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDArgsForCall(i int) string {
	fake.deleteIsolationSegmentByGUIDMutex.RLock()
	defer fake.deleteIsolationSegmentByGUIDMutex.RUnlock()
	argsForCall := fake.deleteIsolationSegmentByGUIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDReturns(result1 error) {
	fake.deleteIsolationSegmentByGUIDMutex.Lock()
	defer fake.deleteIsolationSegmentByGUIDMutex.Unlock()
	fake.DeleteIsolationSegmentByGUIDStub = nil
	fake.deleteIsolationSegmentByGUIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) DeleteIsolationSegmentByGUIDReturnsOnCall(i int, result1 error) {
	fake.deleteIsolationSegmentByGUIDMutex.Lock()
	defer fake.deleteIsolationSegmentByGUIDMutex.Unlock()
	fake.DeleteIsolationSegmentByGUIDStub = nil
	if fake.deleteIsolationSegmentByGUIDReturnsOnCall == nil {
		fake.deleteIsolationSegmentByGUIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteIsolationSegmentByGUIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) GetIsolationSegmentByGUID(arg1 string) (*cfclient.IsolationSegment, error) {
	fake.getIsolationSegmentByGUIDMutex.Lock()
	ret, specificReturn := fake.getIsolationSegmentByGUIDReturnsOnCall[len(fake.getIsolationSegmentByGUIDArgsForCall)]
	fake.getIsolationSegmentByGUIDArgsForCall = append(fake.getIsolationSegmentByGUIDArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetIsolationSegmentByGUIDStub
	fakeReturns := fake.getIsolationSegmentByGUIDReturns
	fake.recordInvocation("GetIsolationSegmentByGUID", []interface{}{arg1})
	fake.getIsolationSegmentByGUIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDCallCount() int {
	fake.getIsolationSegmentByGUIDMutex.RLock()
	defer fake.getIsolationSegmentByGUIDMutex.RUnlock()
	return len(fake.getIsolationSegmentByGUIDArgsForCall)
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDCalls(stub func(string) (*cfclient.IsolationSegment, error)) {
	fake.getIsolationSegmentByGUIDMutex.Lock()
	defer fake.getIsolationSegmentByGUIDMutex.Unlock()
	fake.GetIsolationSegmentByGUIDStub = stub
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDArgsForCall(i int) string {
	fake.getIsolationSegmentByGUIDMutex.RLock()
	defer fake.getIsolationSegmentByGUIDMutex.RUnlock()
	argsForCall := fake.getIsolationSegmentByGUIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDReturns(result1 *cfclient.IsolationSegment, result2 error) {
	fake.getIsolationSegmentByGUIDMutex.Lock()
	defer fake.getIsolationSegmentByGUIDMutex.Unlock()
	fake.GetIsolationSegmentByGUIDStub = nil
	fake.getIsolationSegmentByGUIDReturns = struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) GetIsolationSegmentByGUIDReturnsOnCall(i int, result1 *cfclient.IsolationSegment, result2 error) {
	fake.getIsolationSegmentByGUIDMutex.Lock()
	defer fake.getIsolationSegmentByGUIDMutex.Unlock()
	fake.GetIsolationSegmentByGUIDStub = nil
	if fake.getIsolationSegmentByGUIDReturnsOnCall == nil {
		fake.getIsolationSegmentByGUIDReturnsOnCall = make(map[int]struct {
			result1 *cfclient.IsolationSegment
			result2 error
		})
	}
	fake.getIsolationSegmentByGUIDReturnsOnCall[i] = struct {
		result1 *cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) IsolationSegmentForSpace(arg1 string, arg2 string) error {
	fake.isolationSegmentForSpaceMutex.Lock()
	ret, specificReturn := fake.isolationSegmentForSpaceReturnsOnCall[len(fake.isolationSegmentForSpaceArgsForCall)]
	fake.isolationSegmentForSpaceArgsForCall = append(fake.isolationSegmentForSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.IsolationSegmentForSpaceStub
	fakeReturns := fake.isolationSegmentForSpaceReturns
	fake.recordInvocation("IsolationSegmentForSpace", []interface{}{arg1, arg2})
	fake.isolationSegmentForSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) IsolationSegmentForSpaceCallCount() int {
	fake.isolationSegmentForSpaceMutex.RLock()
	defer fake.isolationSegmentForSpaceMutex.RUnlock()
	return len(fake.isolationSegmentForSpaceArgsForCall)
}

func (fake *FakeCFClient) IsolationSegmentForSpaceCalls(stub func(string, string) error) {
	fake.isolationSegmentForSpaceMutex.Lock()
	defer fake.isolationSegmentForSpaceMutex.Unlock()
	fake.IsolationSegmentForSpaceStub = stub
}

func (fake *FakeCFClient) IsolationSegmentForSpaceArgsForCall(i int) (string, string) {
	fake.isolationSegmentForSpaceMutex.RLock()
	defer fake.isolationSegmentForSpaceMutex.RUnlock()
	argsForCall := fake.isolationSegmentForSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) IsolationSegmentForSpaceReturns(result1 error) {
	fake.isolationSegmentForSpaceMutex.Lock()
	defer fake.isolationSegmentForSpaceMutex.Unlock()
	fake.IsolationSegmentForSpaceStub = nil
	fake.isolationSegmentForSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) IsolationSegmentForSpaceReturnsOnCall(i int, result1 error) {
	fake.isolationSegmentForSpaceMutex.Lock()
	defer fake.isolationSegmentForSpaceMutex.Unlock()
	fake.IsolationSegmentForSpaceStub = nil
	if fake.isolationSegmentForSpaceReturnsOnCall == nil {
		fake.isolationSegmentForSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.isolationSegmentForSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ListIsolationSegments() ([]cfclient.IsolationSegment, error) {
	fake.listIsolationSegmentsMutex.Lock()
	ret, specificReturn := fake.listIsolationSegmentsReturnsOnCall[len(fake.listIsolationSegmentsArgsForCall)]
	fake.listIsolationSegmentsArgsForCall = append(fake.listIsolationSegmentsArgsForCall, struct {
	}{})
	stub := fake.ListIsolationSegmentsStub
	fakeReturns := fake.listIsolationSegmentsReturns
	fake.recordInvocation("ListIsolationSegments", []interface{}{})
	fake.listIsolationSegmentsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListIsolationSegmentsCallCount() int {
	fake.listIsolationSegmentsMutex.RLock()
	defer fake.listIsolationSegmentsMutex.RUnlock()
	return len(fake.listIsolationSegmentsArgsForCall)
}

func (fake *FakeCFClient) ListIsolationSegmentsCalls(stub func() ([]cfclient.IsolationSegment, error)) {
	fake.listIsolationSegmentsMutex.Lock()
	defer fake.listIsolationSegmentsMutex.Unlock()
	fake.ListIsolationSegmentsStub = stub
}

func (fake *FakeCFClient) ListIsolationSegmentsReturns(result1 []cfclient.IsolationSegment, result2 error) {
	fake.listIsolationSegmentsMutex.Lock()
	defer fake.listIsolationSegmentsMutex.Unlock()
	fake.ListIsolationSegmentsStub = nil
	fake.listIsolationSegmentsReturns = struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListIsolationSegmentsReturnsOnCall(i int, result1 []cfclient.IsolationSegment, result2 error) {
	fake.listIsolationSegmentsMutex.Lock()
	defer fake.listIsolationSegmentsMutex.Unlock()
	fake.ListIsolationSegmentsStub = nil
	if fake.listIsolationSegmentsReturnsOnCall == nil {
		fake.listIsolationSegmentsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.IsolationSegment
			result2 error
		})
	}
	fake.listIsolationSegmentsReturnsOnCall[i] = struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListIsolationSegmentsByQuery(arg1 url.Values) ([]cfclient.IsolationSegment, error) {
	fake.listIsolationSegmentsByQueryMutex.Lock()
	ret, specificReturn := fake.listIsolationSegmentsByQueryReturnsOnCall[len(fake.listIsolationSegmentsByQueryArgsForCall)]
	fake.listIsolationSegmentsByQueryArgsForCall = append(fake.listIsolationSegmentsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListIsolationSegmentsByQueryStub
	fakeReturns := fake.listIsolationSegmentsByQueryReturns
	fake.recordInvocation("ListIsolationSegmentsByQuery", []interface{}{arg1})
	fake.listIsolationSegmentsByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryCallCount() int {
	fake.listIsolationSegmentsByQueryMutex.RLock()
	defer fake.listIsolationSegmentsByQueryMutex.RUnlock()
	return len(fake.listIsolationSegmentsByQueryArgsForCall)
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryCalls(stub func(url.Values) ([]cfclient.IsolationSegment, error)) {
	fake.listIsolationSegmentsByQueryMutex.Lock()
	defer fake.listIsolationSegmentsByQueryMutex.Unlock()
	fake.ListIsolationSegmentsByQueryStub = stub
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryArgsForCall(i int) url.Values {
	fake.listIsolationSegmentsByQueryMutex.RLock()
	defer fake.listIsolationSegmentsByQueryMutex.RUnlock()
	argsForCall := fake.listIsolationSegmentsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryReturns(result1 []cfclient.IsolationSegment, result2 error) {
	fake.listIsolationSegmentsByQueryMutex.Lock()
	defer fake.listIsolationSegmentsByQueryMutex.Unlock()
	fake.ListIsolationSegmentsByQueryStub = nil
	fake.listIsolationSegmentsByQueryReturns = struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) ListIsolationSegmentsByQueryReturnsOnCall(i int, result1 []cfclient.IsolationSegment, result2 error) {
	fake.listIsolationSegmentsByQueryMutex.Lock()
	defer fake.listIsolationSegmentsByQueryMutex.Unlock()
	fake.ListIsolationSegmentsByQueryStub = nil
	if fake.listIsolationSegmentsByQueryReturnsOnCall == nil {
		fake.listIsolationSegmentsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.IsolationSegment
			result2 error
		})
	}
	fake.listIsolationSegmentsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.IsolationSegment
		result2 error
	}{result1, result2}
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrg(arg1 string, arg2 string) error {
	fake.removeIsolationSegmentFromOrgMutex.Lock()
	ret, specificReturn := fake.removeIsolationSegmentFromOrgReturnsOnCall[len(fake.removeIsolationSegmentFromOrgArgsForCall)]
	fake.removeIsolationSegmentFromOrgArgsForCall = append(fake.removeIsolationSegmentFromOrgArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.RemoveIsolationSegmentFromOrgStub
	fakeReturns := fake.removeIsolationSegmentFromOrgReturns
	fake.recordInvocation("RemoveIsolationSegmentFromOrg", []interface{}{arg1, arg2})
	fake.removeIsolationSegmentFromOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgCallCount() int {
	fake.removeIsolationSegmentFromOrgMutex.RLock()
	defer fake.removeIsolationSegmentFromOrgMutex.RUnlock()
	return len(fake.removeIsolationSegmentFromOrgArgsForCall)
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgCalls(stub func(string, string) error) {
	fake.removeIsolationSegmentFromOrgMutex.Lock()
	defer fake.removeIsolationSegmentFromOrgMutex.Unlock()
	fake.RemoveIsolationSegmentFromOrgStub = stub
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgArgsForCall(i int) (string, string) {
	fake.removeIsolationSegmentFromOrgMutex.RLock()
	defer fake.removeIsolationSegmentFromOrgMutex.RUnlock()
	argsForCall := fake.removeIsolationSegmentFromOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgReturns(result1 error) {
	fake.removeIsolationSegmentFromOrgMutex.Lock()
	defer fake.removeIsolationSegmentFromOrgMutex.Unlock()
	fake.RemoveIsolationSegmentFromOrgStub = nil
	fake.removeIsolationSegmentFromOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromOrgReturnsOnCall(i int, result1 error) {
	fake.removeIsolationSegmentFromOrgMutex.Lock()
	defer fake.removeIsolationSegmentFromOrgMutex.Unlock()
	fake.RemoveIsolationSegmentFromOrgStub = nil
	if fake.removeIsolationSegmentFromOrgReturnsOnCall == nil {
		fake.removeIsolationSegmentFromOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeIsolationSegmentFromOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpace(arg1 string, arg2 string) error {
	fake.removeIsolationSegmentFromSpaceMutex.Lock()
	ret, specificReturn := fake.removeIsolationSegmentFromSpaceReturnsOnCall[len(fake.removeIsolationSegmentFromSpaceArgsForCall)]
	fake.removeIsolationSegmentFromSpaceArgsForCall = append(fake.removeIsolationSegmentFromSpaceArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.RemoveIsolationSegmentFromSpaceStub
	fakeReturns := fake.removeIsolationSegmentFromSpaceReturns
	fake.recordInvocation("RemoveIsolationSegmentFromSpace", []interface{}{arg1, arg2})
	fake.removeIsolationSegmentFromSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceCallCount() int {
	fake.removeIsolationSegmentFromSpaceMutex.RLock()
	defer fake.removeIsolationSegmentFromSpaceMutex.RUnlock()
	return len(fake.removeIsolationSegmentFromSpaceArgsForCall)
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceCalls(stub func(string, string) error) {
	fake.removeIsolationSegmentFromSpaceMutex.Lock()
	defer fake.removeIsolationSegmentFromSpaceMutex.Unlock()
	fake.RemoveIsolationSegmentFromSpaceStub = stub
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceArgsForCall(i int) (string, string) {
	fake.removeIsolationSegmentFromSpaceMutex.RLock()
	defer fake.removeIsolationSegmentFromSpaceMutex.RUnlock()
	argsForCall := fake.removeIsolationSegmentFromSpaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceReturns(result1 error) {
	fake.removeIsolationSegmentFromSpaceMutex.Lock()
	defer fake.removeIsolationSegmentFromSpaceMutex.Unlock()
	fake.RemoveIsolationSegmentFromSpaceStub = nil
	fake.removeIsolationSegmentFromSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) RemoveIsolationSegmentFromSpaceReturnsOnCall(i int, result1 error) {
	fake.removeIsolationSegmentFromSpaceMutex.Lock()
	defer fake.removeIsolationSegmentFromSpaceMutex.Unlock()
	fake.RemoveIsolationSegmentFromSpaceStub = nil
	if fake.removeIsolationSegmentFromSpaceReturnsOnCall == nil {
		fake.removeIsolationSegmentFromSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeIsolationSegmentFromSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrg(arg1 string) error {
	fake.resetDefaultIsolationSegmentForOrgMutex.Lock()
	ret, specificReturn := fake.resetDefaultIsolationSegmentForOrgReturnsOnCall[len(fake.resetDefaultIsolationSegmentForOrgArgsForCall)]
	fake.resetDefaultIsolationSegmentForOrgArgsForCall = append(fake.resetDefaultIsolationSegmentForOrgArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ResetDefaultIsolationSegmentForOrgStub
	fakeReturns := fake.resetDefaultIsolationSegmentForOrgReturns
	fake.recordInvocation("ResetDefaultIsolationSegmentForOrg", []interface{}{arg1})
	fake.resetDefaultIsolationSegmentForOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgCallCount() int {
	fake.resetDefaultIsolationSegmentForOrgMutex.RLock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.RUnlock()
	return len(fake.resetDefaultIsolationSegmentForOrgArgsForCall)
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgCalls(stub func(string) error) {
	fake.resetDefaultIsolationSegmentForOrgMutex.Lock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.Unlock()
	fake.ResetDefaultIsolationSegmentForOrgStub = stub
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgArgsForCall(i int) string {
	fake.resetDefaultIsolationSegmentForOrgMutex.RLock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.RUnlock()
	argsForCall := fake.resetDefaultIsolationSegmentForOrgArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgReturns(result1 error) {
	fake.resetDefaultIsolationSegmentForOrgMutex.Lock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.Unlock()
	fake.ResetDefaultIsolationSegmentForOrgStub = nil
	fake.resetDefaultIsolationSegmentForOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ResetDefaultIsolationSegmentForOrgReturnsOnCall(i int, result1 error) {
	fake.resetDefaultIsolationSegmentForOrgMutex.Lock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.Unlock()
	fake.ResetDefaultIsolationSegmentForOrgStub = nil
	if fake.resetDefaultIsolationSegmentForOrgReturnsOnCall == nil {
		fake.resetDefaultIsolationSegmentForOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.resetDefaultIsolationSegmentForOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpace(arg1 string) error {
	fake.resetIsolationSegmentForSpaceMutex.Lock()
	ret, specificReturn := fake.resetIsolationSegmentForSpaceReturnsOnCall[len(fake.resetIsolationSegmentForSpaceArgsForCall)]
	fake.resetIsolationSegmentForSpaceArgsForCall = append(fake.resetIsolationSegmentForSpaceArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ResetIsolationSegmentForSpaceStub
	fakeReturns := fake.resetIsolationSegmentForSpaceReturns
	fake.recordInvocation("ResetIsolationSegmentForSpace", []interface{}{arg1})
	fake.resetIsolationSegmentForSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceCallCount() int {
	fake.resetIsolationSegmentForSpaceMutex.RLock()
	defer fake.resetIsolationSegmentForSpaceMutex.RUnlock()
	return len(fake.resetIsolationSegmentForSpaceArgsForCall)
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceCalls(stub func(string) error) {
	fake.resetIsolationSegmentForSpaceMutex.Lock()
	defer fake.resetIsolationSegmentForSpaceMutex.Unlock()
	fake.ResetIsolationSegmentForSpaceStub = stub
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceArgsForCall(i int) string {
	fake.resetIsolationSegmentForSpaceMutex.RLock()
	defer fake.resetIsolationSegmentForSpaceMutex.RUnlock()
	argsForCall := fake.resetIsolationSegmentForSpaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceReturns(result1 error) {
	fake.resetIsolationSegmentForSpaceMutex.Lock()
	defer fake.resetIsolationSegmentForSpaceMutex.Unlock()
	fake.ResetIsolationSegmentForSpaceStub = nil
	fake.resetIsolationSegmentForSpaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) ResetIsolationSegmentForSpaceReturnsOnCall(i int, result1 error) {
	fake.resetIsolationSegmentForSpaceMutex.Lock()
	defer fake.resetIsolationSegmentForSpaceMutex.Unlock()
	fake.ResetIsolationSegmentForSpaceStub = nil
	if fake.resetIsolationSegmentForSpaceReturnsOnCall == nil {
		fake.resetIsolationSegmentForSpaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.resetIsolationSegmentForSpaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addIsolationSegmentToOrgMutex.RLock()
	defer fake.addIsolationSegmentToOrgMutex.RUnlock()
	fake.addIsolationSegmentToSpaceMutex.RLock()
	defer fake.addIsolationSegmentToSpaceMutex.RUnlock()
	fake.createIsolationSegmentMutex.RLock()
	defer fake.createIsolationSegmentMutex.RUnlock()
	fake.defaultIsolationSegmentForOrgMutex.RLock()
	defer fake.defaultIsolationSegmentForOrgMutex.RUnlock()
	fake.deleteIsolationSegmentByGUIDMutex.RLock()
	defer fake.deleteIsolationSegmentByGUIDMutex.RUnlock()
	fake.getIsolationSegmentByGUIDMutex.RLock()
	defer fake.getIsolationSegmentByGUIDMutex.RUnlock()
	fake.isolationSegmentForSpaceMutex.RLock()
	defer fake.isolationSegmentForSpaceMutex.RUnlock()
	fake.listIsolationSegmentsMutex.RLock()
	defer fake.listIsolationSegmentsMutex.RUnlock()
	fake.listIsolationSegmentsByQueryMutex.RLock()
	defer fake.listIsolationSegmentsByQueryMutex.RUnlock()
	fake.removeIsolationSegmentFromOrgMutex.RLock()
	defer fake.removeIsolationSegmentFromOrgMutex.RUnlock()
	fake.removeIsolationSegmentFromSpaceMutex.RLock()
	defer fake.removeIsolationSegmentFromSpaceMutex.RUnlock()
	fake.resetDefaultIsolationSegmentForOrgMutex.RLock()
	defer fake.resetDefaultIsolationSegmentForOrgMutex.RUnlock()
	fake.resetIsolationSegmentForSpaceMutex.RLock()
	defer fake.resetIsolationSegmentForSpaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ isosegment.CFClient = new(FakeCFClient)
