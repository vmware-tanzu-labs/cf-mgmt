// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/cloudfoundry-community/go-cfclient/v3/client"
	"github.com/cloudfoundry-community/go-cfclient/v3/resource"
	"github.com/vmwarepivotallabs/cf-mgmt/securitygroup"
)

type FakeCFSecurityGroupClient struct {
	BindRunningSecurityGroupStub        func(context.Context, string, []string) ([]string, error)
	bindRunningSecurityGroupMutex       sync.RWMutex
	bindRunningSecurityGroupArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	bindRunningSecurityGroupReturns struct {
		result1 []string
		result2 error
	}
	bindRunningSecurityGroupReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	BindStagingSecurityGroupStub        func(context.Context, string, []string) ([]string, error)
	bindStagingSecurityGroupMutex       sync.RWMutex
	bindStagingSecurityGroupArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}
	bindStagingSecurityGroupReturns struct {
		result1 []string
		result2 error
	}
	bindStagingSecurityGroupReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	CreateStub        func(context.Context, *resource.SecurityGroupCreate) (*resource.SecurityGroup, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 context.Context
		arg2 *resource.SecurityGroupCreate
	}
	createReturns struct {
		result1 *resource.SecurityGroup
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *resource.SecurityGroup
		result2 error
	}
	GetStub        func(context.Context, string) (*resource.SecurityGroup, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	getReturns struct {
		result1 *resource.SecurityGroup
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *resource.SecurityGroup
		result2 error
	}
	ListAllStub        func(context.Context, *client.SecurityGroupListOptions) ([]*resource.SecurityGroup, error)
	listAllMutex       sync.RWMutex
	listAllArgsForCall []struct {
		arg1 context.Context
		arg2 *client.SecurityGroupListOptions
	}
	listAllReturns struct {
		result1 []*resource.SecurityGroup
		result2 error
	}
	listAllReturnsOnCall map[int]struct {
		result1 []*resource.SecurityGroup
		result2 error
	}
	ListRunningForSpaceAllStub        func(context.Context, string, *client.SecurityGroupSpaceListOptions) ([]*resource.SecurityGroup, error)
	listRunningForSpaceAllMutex       sync.RWMutex
	listRunningForSpaceAllArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *client.SecurityGroupSpaceListOptions
	}
	listRunningForSpaceAllReturns struct {
		result1 []*resource.SecurityGroup
		result2 error
	}
	listRunningForSpaceAllReturnsOnCall map[int]struct {
		result1 []*resource.SecurityGroup
		result2 error
	}
	UnBindRunningSecurityGroupStub        func(context.Context, string, string) error
	unBindRunningSecurityGroupMutex       sync.RWMutex
	unBindRunningSecurityGroupArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	unBindRunningSecurityGroupReturns struct {
		result1 error
	}
	unBindRunningSecurityGroupReturnsOnCall map[int]struct {
		result1 error
	}
	UnBindStagingSecurityGroupStub        func(context.Context, string, string) error
	unBindStagingSecurityGroupMutex       sync.RWMutex
	unBindStagingSecurityGroupArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	unBindStagingSecurityGroupReturns struct {
		result1 error
	}
	unBindStagingSecurityGroupReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateStub        func(context.Context, string, *resource.SecurityGroupUpdate) (*resource.SecurityGroup, error)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 *resource.SecurityGroupUpdate
	}
	updateReturns struct {
		result1 *resource.SecurityGroup
		result2 error
	}
	updateReturnsOnCall map[int]struct {
		result1 *resource.SecurityGroup
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCFSecurityGroupClient) BindRunningSecurityGroup(arg1 context.Context, arg2 string, arg3 []string) ([]string, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.bindRunningSecurityGroupMutex.Lock()
	ret, specificReturn := fake.bindRunningSecurityGroupReturnsOnCall[len(fake.bindRunningSecurityGroupArgsForCall)]
	fake.bindRunningSecurityGroupArgsForCall = append(fake.bindRunningSecurityGroupArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3Copy})
	stub := fake.BindRunningSecurityGroupStub
	fakeReturns := fake.bindRunningSecurityGroupReturns
	fake.recordInvocation("BindRunningSecurityGroup", []interface{}{arg1, arg2, arg3Copy})
	fake.bindRunningSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSecurityGroupClient) BindRunningSecurityGroupCallCount() int {
	fake.bindRunningSecurityGroupMutex.RLock()
	defer fake.bindRunningSecurityGroupMutex.RUnlock()
	return len(fake.bindRunningSecurityGroupArgsForCall)
}

func (fake *FakeCFSecurityGroupClient) BindRunningSecurityGroupCalls(stub func(context.Context, string, []string) ([]string, error)) {
	fake.bindRunningSecurityGroupMutex.Lock()
	defer fake.bindRunningSecurityGroupMutex.Unlock()
	fake.BindRunningSecurityGroupStub = stub
}

func (fake *FakeCFSecurityGroupClient) BindRunningSecurityGroupArgsForCall(i int) (context.Context, string, []string) {
	fake.bindRunningSecurityGroupMutex.RLock()
	defer fake.bindRunningSecurityGroupMutex.RUnlock()
	argsForCall := fake.bindRunningSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFSecurityGroupClient) BindRunningSecurityGroupReturns(result1 []string, result2 error) {
	fake.bindRunningSecurityGroupMutex.Lock()
	defer fake.bindRunningSecurityGroupMutex.Unlock()
	fake.BindRunningSecurityGroupStub = nil
	fake.bindRunningSecurityGroupReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) BindRunningSecurityGroupReturnsOnCall(i int, result1 []string, result2 error) {
	fake.bindRunningSecurityGroupMutex.Lock()
	defer fake.bindRunningSecurityGroupMutex.Unlock()
	fake.BindRunningSecurityGroupStub = nil
	if fake.bindRunningSecurityGroupReturnsOnCall == nil {
		fake.bindRunningSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.bindRunningSecurityGroupReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) BindStagingSecurityGroup(arg1 context.Context, arg2 string, arg3 []string) ([]string, error) {
	var arg3Copy []string
	if arg3 != nil {
		arg3Copy = make([]string, len(arg3))
		copy(arg3Copy, arg3)
	}
	fake.bindStagingSecurityGroupMutex.Lock()
	ret, specificReturn := fake.bindStagingSecurityGroupReturnsOnCall[len(fake.bindStagingSecurityGroupArgsForCall)]
	fake.bindStagingSecurityGroupArgsForCall = append(fake.bindStagingSecurityGroupArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 []string
	}{arg1, arg2, arg3Copy})
	stub := fake.BindStagingSecurityGroupStub
	fakeReturns := fake.bindStagingSecurityGroupReturns
	fake.recordInvocation("BindStagingSecurityGroup", []interface{}{arg1, arg2, arg3Copy})
	fake.bindStagingSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSecurityGroupClient) BindStagingSecurityGroupCallCount() int {
	fake.bindStagingSecurityGroupMutex.RLock()
	defer fake.bindStagingSecurityGroupMutex.RUnlock()
	return len(fake.bindStagingSecurityGroupArgsForCall)
}

func (fake *FakeCFSecurityGroupClient) BindStagingSecurityGroupCalls(stub func(context.Context, string, []string) ([]string, error)) {
	fake.bindStagingSecurityGroupMutex.Lock()
	defer fake.bindStagingSecurityGroupMutex.Unlock()
	fake.BindStagingSecurityGroupStub = stub
}

func (fake *FakeCFSecurityGroupClient) BindStagingSecurityGroupArgsForCall(i int) (context.Context, string, []string) {
	fake.bindStagingSecurityGroupMutex.RLock()
	defer fake.bindStagingSecurityGroupMutex.RUnlock()
	argsForCall := fake.bindStagingSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFSecurityGroupClient) BindStagingSecurityGroupReturns(result1 []string, result2 error) {
	fake.bindStagingSecurityGroupMutex.Lock()
	defer fake.bindStagingSecurityGroupMutex.Unlock()
	fake.BindStagingSecurityGroupStub = nil
	fake.bindStagingSecurityGroupReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) BindStagingSecurityGroupReturnsOnCall(i int, result1 []string, result2 error) {
	fake.bindStagingSecurityGroupMutex.Lock()
	defer fake.bindStagingSecurityGroupMutex.Unlock()
	fake.BindStagingSecurityGroupStub = nil
	if fake.bindStagingSecurityGroupReturnsOnCall == nil {
		fake.bindStagingSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.bindStagingSecurityGroupReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) Create(arg1 context.Context, arg2 *resource.SecurityGroupCreate) (*resource.SecurityGroup, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 context.Context
		arg2 *resource.SecurityGroupCreate
	}{arg1, arg2})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1, arg2})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSecurityGroupClient) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeCFSecurityGroupClient) CreateCalls(stub func(context.Context, *resource.SecurityGroupCreate) (*resource.SecurityGroup, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeCFSecurityGroupClient) CreateArgsForCall(i int) (context.Context, *resource.SecurityGroupCreate) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFSecurityGroupClient) CreateReturns(result1 *resource.SecurityGroup, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *resource.SecurityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) CreateReturnsOnCall(i int, result1 *resource.SecurityGroup, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *resource.SecurityGroup
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *resource.SecurityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) Get(arg1 context.Context, arg2 string) (*resource.SecurityGroup, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSecurityGroupClient) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeCFSecurityGroupClient) GetCalls(stub func(context.Context, string) (*resource.SecurityGroup, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeCFSecurityGroupClient) GetArgsForCall(i int) (context.Context, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFSecurityGroupClient) GetReturns(result1 *resource.SecurityGroup, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *resource.SecurityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) GetReturnsOnCall(i int, result1 *resource.SecurityGroup, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *resource.SecurityGroup
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *resource.SecurityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) ListAll(arg1 context.Context, arg2 *client.SecurityGroupListOptions) ([]*resource.SecurityGroup, error) {
	fake.listAllMutex.Lock()
	ret, specificReturn := fake.listAllReturnsOnCall[len(fake.listAllArgsForCall)]
	fake.listAllArgsForCall = append(fake.listAllArgsForCall, struct {
		arg1 context.Context
		arg2 *client.SecurityGroupListOptions
	}{arg1, arg2})
	stub := fake.ListAllStub
	fakeReturns := fake.listAllReturns
	fake.recordInvocation("ListAll", []interface{}{arg1, arg2})
	fake.listAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSecurityGroupClient) ListAllCallCount() int {
	fake.listAllMutex.RLock()
	defer fake.listAllMutex.RUnlock()
	return len(fake.listAllArgsForCall)
}

func (fake *FakeCFSecurityGroupClient) ListAllCalls(stub func(context.Context, *client.SecurityGroupListOptions) ([]*resource.SecurityGroup, error)) {
	fake.listAllMutex.Lock()
	defer fake.listAllMutex.Unlock()
	fake.ListAllStub = stub
}

func (fake *FakeCFSecurityGroupClient) ListAllArgsForCall(i int) (context.Context, *client.SecurityGroupListOptions) {
	fake.listAllMutex.RLock()
	defer fake.listAllMutex.RUnlock()
	argsForCall := fake.listAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCFSecurityGroupClient) ListAllReturns(result1 []*resource.SecurityGroup, result2 error) {
	fake.listAllMutex.Lock()
	defer fake.listAllMutex.Unlock()
	fake.ListAllStub = nil
	fake.listAllReturns = struct {
		result1 []*resource.SecurityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) ListAllReturnsOnCall(i int, result1 []*resource.SecurityGroup, result2 error) {
	fake.listAllMutex.Lock()
	defer fake.listAllMutex.Unlock()
	fake.ListAllStub = nil
	if fake.listAllReturnsOnCall == nil {
		fake.listAllReturnsOnCall = make(map[int]struct {
			result1 []*resource.SecurityGroup
			result2 error
		})
	}
	fake.listAllReturnsOnCall[i] = struct {
		result1 []*resource.SecurityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) ListRunningForSpaceAll(arg1 context.Context, arg2 string, arg3 *client.SecurityGroupSpaceListOptions) ([]*resource.SecurityGroup, error) {
	fake.listRunningForSpaceAllMutex.Lock()
	ret, specificReturn := fake.listRunningForSpaceAllReturnsOnCall[len(fake.listRunningForSpaceAllArgsForCall)]
	fake.listRunningForSpaceAllArgsForCall = append(fake.listRunningForSpaceAllArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *client.SecurityGroupSpaceListOptions
	}{arg1, arg2, arg3})
	stub := fake.ListRunningForSpaceAllStub
	fakeReturns := fake.listRunningForSpaceAllReturns
	fake.recordInvocation("ListRunningForSpaceAll", []interface{}{arg1, arg2, arg3})
	fake.listRunningForSpaceAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSecurityGroupClient) ListRunningForSpaceAllCallCount() int {
	fake.listRunningForSpaceAllMutex.RLock()
	defer fake.listRunningForSpaceAllMutex.RUnlock()
	return len(fake.listRunningForSpaceAllArgsForCall)
}

func (fake *FakeCFSecurityGroupClient) ListRunningForSpaceAllCalls(stub func(context.Context, string, *client.SecurityGroupSpaceListOptions) ([]*resource.SecurityGroup, error)) {
	fake.listRunningForSpaceAllMutex.Lock()
	defer fake.listRunningForSpaceAllMutex.Unlock()
	fake.ListRunningForSpaceAllStub = stub
}

func (fake *FakeCFSecurityGroupClient) ListRunningForSpaceAllArgsForCall(i int) (context.Context, string, *client.SecurityGroupSpaceListOptions) {
	fake.listRunningForSpaceAllMutex.RLock()
	defer fake.listRunningForSpaceAllMutex.RUnlock()
	argsForCall := fake.listRunningForSpaceAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFSecurityGroupClient) ListRunningForSpaceAllReturns(result1 []*resource.SecurityGroup, result2 error) {
	fake.listRunningForSpaceAllMutex.Lock()
	defer fake.listRunningForSpaceAllMutex.Unlock()
	fake.ListRunningForSpaceAllStub = nil
	fake.listRunningForSpaceAllReturns = struct {
		result1 []*resource.SecurityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) ListRunningForSpaceAllReturnsOnCall(i int, result1 []*resource.SecurityGroup, result2 error) {
	fake.listRunningForSpaceAllMutex.Lock()
	defer fake.listRunningForSpaceAllMutex.Unlock()
	fake.ListRunningForSpaceAllStub = nil
	if fake.listRunningForSpaceAllReturnsOnCall == nil {
		fake.listRunningForSpaceAllReturnsOnCall = make(map[int]struct {
			result1 []*resource.SecurityGroup
			result2 error
		})
	}
	fake.listRunningForSpaceAllReturnsOnCall[i] = struct {
		result1 []*resource.SecurityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) UnBindRunningSecurityGroup(arg1 context.Context, arg2 string, arg3 string) error {
	fake.unBindRunningSecurityGroupMutex.Lock()
	ret, specificReturn := fake.unBindRunningSecurityGroupReturnsOnCall[len(fake.unBindRunningSecurityGroupArgsForCall)]
	fake.unBindRunningSecurityGroupArgsForCall = append(fake.unBindRunningSecurityGroupArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UnBindRunningSecurityGroupStub
	fakeReturns := fake.unBindRunningSecurityGroupReturns
	fake.recordInvocation("UnBindRunningSecurityGroup", []interface{}{arg1, arg2, arg3})
	fake.unBindRunningSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFSecurityGroupClient) UnBindRunningSecurityGroupCallCount() int {
	fake.unBindRunningSecurityGroupMutex.RLock()
	defer fake.unBindRunningSecurityGroupMutex.RUnlock()
	return len(fake.unBindRunningSecurityGroupArgsForCall)
}

func (fake *FakeCFSecurityGroupClient) UnBindRunningSecurityGroupCalls(stub func(context.Context, string, string) error) {
	fake.unBindRunningSecurityGroupMutex.Lock()
	defer fake.unBindRunningSecurityGroupMutex.Unlock()
	fake.UnBindRunningSecurityGroupStub = stub
}

func (fake *FakeCFSecurityGroupClient) UnBindRunningSecurityGroupArgsForCall(i int) (context.Context, string, string) {
	fake.unBindRunningSecurityGroupMutex.RLock()
	defer fake.unBindRunningSecurityGroupMutex.RUnlock()
	argsForCall := fake.unBindRunningSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFSecurityGroupClient) UnBindRunningSecurityGroupReturns(result1 error) {
	fake.unBindRunningSecurityGroupMutex.Lock()
	defer fake.unBindRunningSecurityGroupMutex.Unlock()
	fake.UnBindRunningSecurityGroupStub = nil
	fake.unBindRunningSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFSecurityGroupClient) UnBindRunningSecurityGroupReturnsOnCall(i int, result1 error) {
	fake.unBindRunningSecurityGroupMutex.Lock()
	defer fake.unBindRunningSecurityGroupMutex.Unlock()
	fake.UnBindRunningSecurityGroupStub = nil
	if fake.unBindRunningSecurityGroupReturnsOnCall == nil {
		fake.unBindRunningSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unBindRunningSecurityGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFSecurityGroupClient) UnBindStagingSecurityGroup(arg1 context.Context, arg2 string, arg3 string) error {
	fake.unBindStagingSecurityGroupMutex.Lock()
	ret, specificReturn := fake.unBindStagingSecurityGroupReturnsOnCall[len(fake.unBindStagingSecurityGroupArgsForCall)]
	fake.unBindStagingSecurityGroupArgsForCall = append(fake.unBindStagingSecurityGroupArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UnBindStagingSecurityGroupStub
	fakeReturns := fake.unBindStagingSecurityGroupReturns
	fake.recordInvocation("UnBindStagingSecurityGroup", []interface{}{arg1, arg2, arg3})
	fake.unBindStagingSecurityGroupMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCFSecurityGroupClient) UnBindStagingSecurityGroupCallCount() int {
	fake.unBindStagingSecurityGroupMutex.RLock()
	defer fake.unBindStagingSecurityGroupMutex.RUnlock()
	return len(fake.unBindStagingSecurityGroupArgsForCall)
}

func (fake *FakeCFSecurityGroupClient) UnBindStagingSecurityGroupCalls(stub func(context.Context, string, string) error) {
	fake.unBindStagingSecurityGroupMutex.Lock()
	defer fake.unBindStagingSecurityGroupMutex.Unlock()
	fake.UnBindStagingSecurityGroupStub = stub
}

func (fake *FakeCFSecurityGroupClient) UnBindStagingSecurityGroupArgsForCall(i int) (context.Context, string, string) {
	fake.unBindStagingSecurityGroupMutex.RLock()
	defer fake.unBindStagingSecurityGroupMutex.RUnlock()
	argsForCall := fake.unBindStagingSecurityGroupArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFSecurityGroupClient) UnBindStagingSecurityGroupReturns(result1 error) {
	fake.unBindStagingSecurityGroupMutex.Lock()
	defer fake.unBindStagingSecurityGroupMutex.Unlock()
	fake.UnBindStagingSecurityGroupStub = nil
	fake.unBindStagingSecurityGroupReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFSecurityGroupClient) UnBindStagingSecurityGroupReturnsOnCall(i int, result1 error) {
	fake.unBindStagingSecurityGroupMutex.Lock()
	defer fake.unBindStagingSecurityGroupMutex.Unlock()
	fake.UnBindStagingSecurityGroupStub = nil
	if fake.unBindStagingSecurityGroupReturnsOnCall == nil {
		fake.unBindStagingSecurityGroupReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.unBindStagingSecurityGroupReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCFSecurityGroupClient) Update(arg1 context.Context, arg2 string, arg3 *resource.SecurityGroupUpdate) (*resource.SecurityGroup, error) {
	fake.updateMutex.Lock()
	ret, specificReturn := fake.updateReturnsOnCall[len(fake.updateArgsForCall)]
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 *resource.SecurityGroupUpdate
	}{arg1, arg2, arg3})
	stub := fake.UpdateStub
	fakeReturns := fake.updateReturns
	fake.recordInvocation("Update", []interface{}{arg1, arg2, arg3})
	fake.updateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCFSecurityGroupClient) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeCFSecurityGroupClient) UpdateCalls(stub func(context.Context, string, *resource.SecurityGroupUpdate) (*resource.SecurityGroup, error)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeCFSecurityGroupClient) UpdateArgsForCall(i int) (context.Context, string, *resource.SecurityGroupUpdate) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCFSecurityGroupClient) UpdateReturns(result1 *resource.SecurityGroup, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	fake.updateReturns = struct {
		result1 *resource.SecurityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) UpdateReturnsOnCall(i int, result1 *resource.SecurityGroup, result2 error) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = nil
	if fake.updateReturnsOnCall == nil {
		fake.updateReturnsOnCall = make(map[int]struct {
			result1 *resource.SecurityGroup
			result2 error
		})
	}
	fake.updateReturnsOnCall[i] = struct {
		result1 *resource.SecurityGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeCFSecurityGroupClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.bindRunningSecurityGroupMutex.RLock()
	defer fake.bindRunningSecurityGroupMutex.RUnlock()
	fake.bindStagingSecurityGroupMutex.RLock()
	defer fake.bindStagingSecurityGroupMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listAllMutex.RLock()
	defer fake.listAllMutex.RUnlock()
	fake.listRunningForSpaceAllMutex.RLock()
	defer fake.listRunningForSpaceAllMutex.RUnlock()
	fake.unBindRunningSecurityGroupMutex.RLock()
	defer fake.unBindRunningSecurityGroupMutex.RUnlock()
	fake.unBindStagingSecurityGroupMutex.RLock()
	defer fake.unBindStagingSecurityGroupMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCFSecurityGroupClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ securitygroup.CFSecurityGroupClient = new(FakeCFSecurityGroupClient)
