// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmwarepivotallabs/cf-mgmt/securitygroup"
)

type FakeManager struct {
	AssignDefaultSecurityGroupsStub        func() error
	assignDefaultSecurityGroupsMutex       sync.RWMutex
	assignDefaultSecurityGroupsArgsForCall []struct {
	}
	assignDefaultSecurityGroupsReturns struct {
		result1 error
	}
	assignDefaultSecurityGroupsReturnsOnCall map[int]struct {
		result1 error
	}
	CreateApplicationSecurityGroupsStub        func() error
	createApplicationSecurityGroupsMutex       sync.RWMutex
	createApplicationSecurityGroupsArgsForCall []struct {
	}
	createApplicationSecurityGroupsReturns struct {
		result1 error
	}
	createApplicationSecurityGroupsReturnsOnCall map[int]struct {
		result1 error
	}
	CreateGlobalSecurityGroupsStub        func() error
	createGlobalSecurityGroupsMutex       sync.RWMutex
	createGlobalSecurityGroupsArgsForCall []struct {
	}
	createGlobalSecurityGroupsReturns struct {
		result1 error
	}
	createGlobalSecurityGroupsReturnsOnCall map[int]struct {
		result1 error
	}
	GetSecurityGroupRulesStub        func(string) ([]byte, error)
	getSecurityGroupRulesMutex       sync.RWMutex
	getSecurityGroupRulesArgsForCall []struct {
		arg1 string
	}
	getSecurityGroupRulesReturns struct {
		result1 []byte
		result2 error
	}
	getSecurityGroupRulesReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	ListDefaultSecurityGroupsStub        func() (map[string]cfclient.SecGroup, error)
	listDefaultSecurityGroupsMutex       sync.RWMutex
	listDefaultSecurityGroupsArgsForCall []struct {
	}
	listDefaultSecurityGroupsReturns struct {
		result1 map[string]cfclient.SecGroup
		result2 error
	}
	listDefaultSecurityGroupsReturnsOnCall map[int]struct {
		result1 map[string]cfclient.SecGroup
		result2 error
	}
	ListNonDefaultSecurityGroupsStub        func() (map[string]cfclient.SecGroup, error)
	listNonDefaultSecurityGroupsMutex       sync.RWMutex
	listNonDefaultSecurityGroupsArgsForCall []struct {
	}
	listNonDefaultSecurityGroupsReturns struct {
		result1 map[string]cfclient.SecGroup
		result2 error
	}
	listNonDefaultSecurityGroupsReturnsOnCall map[int]struct {
		result1 map[string]cfclient.SecGroup
		result2 error
	}
	ListSpaceSecurityGroupsStub        func(string) (map[string]string, error)
	listSpaceSecurityGroupsMutex       sync.RWMutex
	listSpaceSecurityGroupsArgsForCall []struct {
		arg1 string
	}
	listSpaceSecurityGroupsReturns struct {
		result1 map[string]string
		result2 error
	}
	listSpaceSecurityGroupsReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) AssignDefaultSecurityGroups() error {
	fake.assignDefaultSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.assignDefaultSecurityGroupsReturnsOnCall[len(fake.assignDefaultSecurityGroupsArgsForCall)]
	fake.assignDefaultSecurityGroupsArgsForCall = append(fake.assignDefaultSecurityGroupsArgsForCall, struct {
	}{})
	stub := fake.AssignDefaultSecurityGroupsStub
	fakeReturns := fake.assignDefaultSecurityGroupsReturns
	fake.recordInvocation("AssignDefaultSecurityGroups", []interface{}{})
	fake.assignDefaultSecurityGroupsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) AssignDefaultSecurityGroupsCallCount() int {
	fake.assignDefaultSecurityGroupsMutex.RLock()
	defer fake.assignDefaultSecurityGroupsMutex.RUnlock()
	return len(fake.assignDefaultSecurityGroupsArgsForCall)
}

func (fake *FakeManager) AssignDefaultSecurityGroupsCalls(stub func() error) {
	fake.assignDefaultSecurityGroupsMutex.Lock()
	defer fake.assignDefaultSecurityGroupsMutex.Unlock()
	fake.AssignDefaultSecurityGroupsStub = stub
}

func (fake *FakeManager) AssignDefaultSecurityGroupsReturns(result1 error) {
	fake.assignDefaultSecurityGroupsMutex.Lock()
	defer fake.assignDefaultSecurityGroupsMutex.Unlock()
	fake.AssignDefaultSecurityGroupsStub = nil
	fake.assignDefaultSecurityGroupsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) AssignDefaultSecurityGroupsReturnsOnCall(i int, result1 error) {
	fake.assignDefaultSecurityGroupsMutex.Lock()
	defer fake.assignDefaultSecurityGroupsMutex.Unlock()
	fake.AssignDefaultSecurityGroupsStub = nil
	if fake.assignDefaultSecurityGroupsReturnsOnCall == nil {
		fake.assignDefaultSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.assignDefaultSecurityGroupsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) CreateApplicationSecurityGroups() error {
	fake.createApplicationSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.createApplicationSecurityGroupsReturnsOnCall[len(fake.createApplicationSecurityGroupsArgsForCall)]
	fake.createApplicationSecurityGroupsArgsForCall = append(fake.createApplicationSecurityGroupsArgsForCall, struct {
	}{})
	stub := fake.CreateApplicationSecurityGroupsStub
	fakeReturns := fake.createApplicationSecurityGroupsReturns
	fake.recordInvocation("CreateApplicationSecurityGroups", []interface{}{})
	fake.createApplicationSecurityGroupsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) CreateApplicationSecurityGroupsCallCount() int {
	fake.createApplicationSecurityGroupsMutex.RLock()
	defer fake.createApplicationSecurityGroupsMutex.RUnlock()
	return len(fake.createApplicationSecurityGroupsArgsForCall)
}

func (fake *FakeManager) CreateApplicationSecurityGroupsCalls(stub func() error) {
	fake.createApplicationSecurityGroupsMutex.Lock()
	defer fake.createApplicationSecurityGroupsMutex.Unlock()
	fake.CreateApplicationSecurityGroupsStub = stub
}

func (fake *FakeManager) CreateApplicationSecurityGroupsReturns(result1 error) {
	fake.createApplicationSecurityGroupsMutex.Lock()
	defer fake.createApplicationSecurityGroupsMutex.Unlock()
	fake.CreateApplicationSecurityGroupsStub = nil
	fake.createApplicationSecurityGroupsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) CreateApplicationSecurityGroupsReturnsOnCall(i int, result1 error) {
	fake.createApplicationSecurityGroupsMutex.Lock()
	defer fake.createApplicationSecurityGroupsMutex.Unlock()
	fake.CreateApplicationSecurityGroupsStub = nil
	if fake.createApplicationSecurityGroupsReturnsOnCall == nil {
		fake.createApplicationSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createApplicationSecurityGroupsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) CreateGlobalSecurityGroups() error {
	fake.createGlobalSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.createGlobalSecurityGroupsReturnsOnCall[len(fake.createGlobalSecurityGroupsArgsForCall)]
	fake.createGlobalSecurityGroupsArgsForCall = append(fake.createGlobalSecurityGroupsArgsForCall, struct {
	}{})
	stub := fake.CreateGlobalSecurityGroupsStub
	fakeReturns := fake.createGlobalSecurityGroupsReturns
	fake.recordInvocation("CreateGlobalSecurityGroups", []interface{}{})
	fake.createGlobalSecurityGroupsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) CreateGlobalSecurityGroupsCallCount() int {
	fake.createGlobalSecurityGroupsMutex.RLock()
	defer fake.createGlobalSecurityGroupsMutex.RUnlock()
	return len(fake.createGlobalSecurityGroupsArgsForCall)
}

func (fake *FakeManager) CreateGlobalSecurityGroupsCalls(stub func() error) {
	fake.createGlobalSecurityGroupsMutex.Lock()
	defer fake.createGlobalSecurityGroupsMutex.Unlock()
	fake.CreateGlobalSecurityGroupsStub = stub
}

func (fake *FakeManager) CreateGlobalSecurityGroupsReturns(result1 error) {
	fake.createGlobalSecurityGroupsMutex.Lock()
	defer fake.createGlobalSecurityGroupsMutex.Unlock()
	fake.CreateGlobalSecurityGroupsStub = nil
	fake.createGlobalSecurityGroupsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) CreateGlobalSecurityGroupsReturnsOnCall(i int, result1 error) {
	fake.createGlobalSecurityGroupsMutex.Lock()
	defer fake.createGlobalSecurityGroupsMutex.Unlock()
	fake.CreateGlobalSecurityGroupsStub = nil
	if fake.createGlobalSecurityGroupsReturnsOnCall == nil {
		fake.createGlobalSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createGlobalSecurityGroupsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) GetSecurityGroupRules(arg1 string) ([]byte, error) {
	fake.getSecurityGroupRulesMutex.Lock()
	ret, specificReturn := fake.getSecurityGroupRulesReturnsOnCall[len(fake.getSecurityGroupRulesArgsForCall)]
	fake.getSecurityGroupRulesArgsForCall = append(fake.getSecurityGroupRulesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetSecurityGroupRulesStub
	fakeReturns := fake.getSecurityGroupRulesReturns
	fake.recordInvocation("GetSecurityGroupRules", []interface{}{arg1})
	fake.getSecurityGroupRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) GetSecurityGroupRulesCallCount() int {
	fake.getSecurityGroupRulesMutex.RLock()
	defer fake.getSecurityGroupRulesMutex.RUnlock()
	return len(fake.getSecurityGroupRulesArgsForCall)
}

func (fake *FakeManager) GetSecurityGroupRulesCalls(stub func(string) ([]byte, error)) {
	fake.getSecurityGroupRulesMutex.Lock()
	defer fake.getSecurityGroupRulesMutex.Unlock()
	fake.GetSecurityGroupRulesStub = stub
}

func (fake *FakeManager) GetSecurityGroupRulesArgsForCall(i int) string {
	fake.getSecurityGroupRulesMutex.RLock()
	defer fake.getSecurityGroupRulesMutex.RUnlock()
	argsForCall := fake.getSecurityGroupRulesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) GetSecurityGroupRulesReturns(result1 []byte, result2 error) {
	fake.getSecurityGroupRulesMutex.Lock()
	defer fake.getSecurityGroupRulesMutex.Unlock()
	fake.GetSecurityGroupRulesStub = nil
	fake.getSecurityGroupRulesReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) GetSecurityGroupRulesReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getSecurityGroupRulesMutex.Lock()
	defer fake.getSecurityGroupRulesMutex.Unlock()
	fake.GetSecurityGroupRulesStub = nil
	if fake.getSecurityGroupRulesReturnsOnCall == nil {
		fake.getSecurityGroupRulesReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getSecurityGroupRulesReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListDefaultSecurityGroups() (map[string]cfclient.SecGroup, error) {
	fake.listDefaultSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.listDefaultSecurityGroupsReturnsOnCall[len(fake.listDefaultSecurityGroupsArgsForCall)]
	fake.listDefaultSecurityGroupsArgsForCall = append(fake.listDefaultSecurityGroupsArgsForCall, struct {
	}{})
	stub := fake.ListDefaultSecurityGroupsStub
	fakeReturns := fake.listDefaultSecurityGroupsReturns
	fake.recordInvocation("ListDefaultSecurityGroups", []interface{}{})
	fake.listDefaultSecurityGroupsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) ListDefaultSecurityGroupsCallCount() int {
	fake.listDefaultSecurityGroupsMutex.RLock()
	defer fake.listDefaultSecurityGroupsMutex.RUnlock()
	return len(fake.listDefaultSecurityGroupsArgsForCall)
}

func (fake *FakeManager) ListDefaultSecurityGroupsCalls(stub func() (map[string]cfclient.SecGroup, error)) {
	fake.listDefaultSecurityGroupsMutex.Lock()
	defer fake.listDefaultSecurityGroupsMutex.Unlock()
	fake.ListDefaultSecurityGroupsStub = stub
}

func (fake *FakeManager) ListDefaultSecurityGroupsReturns(result1 map[string]cfclient.SecGroup, result2 error) {
	fake.listDefaultSecurityGroupsMutex.Lock()
	defer fake.listDefaultSecurityGroupsMutex.Unlock()
	fake.ListDefaultSecurityGroupsStub = nil
	fake.listDefaultSecurityGroupsReturns = struct {
		result1 map[string]cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListDefaultSecurityGroupsReturnsOnCall(i int, result1 map[string]cfclient.SecGroup, result2 error) {
	fake.listDefaultSecurityGroupsMutex.Lock()
	defer fake.listDefaultSecurityGroupsMutex.Unlock()
	fake.ListDefaultSecurityGroupsStub = nil
	if fake.listDefaultSecurityGroupsReturnsOnCall == nil {
		fake.listDefaultSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 map[string]cfclient.SecGroup
			result2 error
		})
	}
	fake.listDefaultSecurityGroupsReturnsOnCall[i] = struct {
		result1 map[string]cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListNonDefaultSecurityGroups() (map[string]cfclient.SecGroup, error) {
	fake.listNonDefaultSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.listNonDefaultSecurityGroupsReturnsOnCall[len(fake.listNonDefaultSecurityGroupsArgsForCall)]
	fake.listNonDefaultSecurityGroupsArgsForCall = append(fake.listNonDefaultSecurityGroupsArgsForCall, struct {
	}{})
	stub := fake.ListNonDefaultSecurityGroupsStub
	fakeReturns := fake.listNonDefaultSecurityGroupsReturns
	fake.recordInvocation("ListNonDefaultSecurityGroups", []interface{}{})
	fake.listNonDefaultSecurityGroupsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) ListNonDefaultSecurityGroupsCallCount() int {
	fake.listNonDefaultSecurityGroupsMutex.RLock()
	defer fake.listNonDefaultSecurityGroupsMutex.RUnlock()
	return len(fake.listNonDefaultSecurityGroupsArgsForCall)
}

func (fake *FakeManager) ListNonDefaultSecurityGroupsCalls(stub func() (map[string]cfclient.SecGroup, error)) {
	fake.listNonDefaultSecurityGroupsMutex.Lock()
	defer fake.listNonDefaultSecurityGroupsMutex.Unlock()
	fake.ListNonDefaultSecurityGroupsStub = stub
}

func (fake *FakeManager) ListNonDefaultSecurityGroupsReturns(result1 map[string]cfclient.SecGroup, result2 error) {
	fake.listNonDefaultSecurityGroupsMutex.Lock()
	defer fake.listNonDefaultSecurityGroupsMutex.Unlock()
	fake.ListNonDefaultSecurityGroupsStub = nil
	fake.listNonDefaultSecurityGroupsReturns = struct {
		result1 map[string]cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListNonDefaultSecurityGroupsReturnsOnCall(i int, result1 map[string]cfclient.SecGroup, result2 error) {
	fake.listNonDefaultSecurityGroupsMutex.Lock()
	defer fake.listNonDefaultSecurityGroupsMutex.Unlock()
	fake.ListNonDefaultSecurityGroupsStub = nil
	if fake.listNonDefaultSecurityGroupsReturnsOnCall == nil {
		fake.listNonDefaultSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 map[string]cfclient.SecGroup
			result2 error
		})
	}
	fake.listNonDefaultSecurityGroupsReturnsOnCall[i] = struct {
		result1 map[string]cfclient.SecGroup
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListSpaceSecurityGroups(arg1 string) (map[string]string, error) {
	fake.listSpaceSecurityGroupsMutex.Lock()
	ret, specificReturn := fake.listSpaceSecurityGroupsReturnsOnCall[len(fake.listSpaceSecurityGroupsArgsForCall)]
	fake.listSpaceSecurityGroupsArgsForCall = append(fake.listSpaceSecurityGroupsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ListSpaceSecurityGroupsStub
	fakeReturns := fake.listSpaceSecurityGroupsReturns
	fake.recordInvocation("ListSpaceSecurityGroups", []interface{}{arg1})
	fake.listSpaceSecurityGroupsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) ListSpaceSecurityGroupsCallCount() int {
	fake.listSpaceSecurityGroupsMutex.RLock()
	defer fake.listSpaceSecurityGroupsMutex.RUnlock()
	return len(fake.listSpaceSecurityGroupsArgsForCall)
}

func (fake *FakeManager) ListSpaceSecurityGroupsCalls(stub func(string) (map[string]string, error)) {
	fake.listSpaceSecurityGroupsMutex.Lock()
	defer fake.listSpaceSecurityGroupsMutex.Unlock()
	fake.ListSpaceSecurityGroupsStub = stub
}

func (fake *FakeManager) ListSpaceSecurityGroupsArgsForCall(i int) string {
	fake.listSpaceSecurityGroupsMutex.RLock()
	defer fake.listSpaceSecurityGroupsMutex.RUnlock()
	argsForCall := fake.listSpaceSecurityGroupsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) ListSpaceSecurityGroupsReturns(result1 map[string]string, result2 error) {
	fake.listSpaceSecurityGroupsMutex.Lock()
	defer fake.listSpaceSecurityGroupsMutex.Unlock()
	fake.ListSpaceSecurityGroupsStub = nil
	fake.listSpaceSecurityGroupsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListSpaceSecurityGroupsReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.listSpaceSecurityGroupsMutex.Lock()
	defer fake.listSpaceSecurityGroupsMutex.Unlock()
	fake.ListSpaceSecurityGroupsStub = nil
	if fake.listSpaceSecurityGroupsReturnsOnCall == nil {
		fake.listSpaceSecurityGroupsReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.listSpaceSecurityGroupsReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.assignDefaultSecurityGroupsMutex.RLock()
	defer fake.assignDefaultSecurityGroupsMutex.RUnlock()
	fake.createApplicationSecurityGroupsMutex.RLock()
	defer fake.createApplicationSecurityGroupsMutex.RUnlock()
	fake.createGlobalSecurityGroupsMutex.RLock()
	defer fake.createGlobalSecurityGroupsMutex.RUnlock()
	fake.getSecurityGroupRulesMutex.RLock()
	defer fake.getSecurityGroupRulesMutex.RUnlock()
	fake.listDefaultSecurityGroupsMutex.RLock()
	defer fake.listDefaultSecurityGroupsMutex.RUnlock()
	fake.listNonDefaultSecurityGroupsMutex.RLock()
	defer fake.listNonDefaultSecurityGroupsMutex.RUnlock()
	fake.listSpaceSecurityGroupsMutex.RLock()
	defer fake.listSpaceSecurityGroupsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ securitygroup.Manager = new(FakeManager)
