// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmwarepivotallabs/cf-mgmt/uaa"
)

type FakeManager struct {
	CreateExternalUserStub        func(string, string, string, string) (string, error)
	createExternalUserMutex       sync.RWMutex
	createExternalUserArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	createExternalUserReturns struct {
		result1 string
		result2 error
	}
	createExternalUserReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ListUsersStub        func() (*uaa.Users, error)
	listUsersMutex       sync.RWMutex
	listUsersArgsForCall []struct {
	}
	listUsersReturns struct {
		result1 *uaa.Users
		result2 error
	}
	listUsersReturnsOnCall map[int]struct {
		result1 *uaa.Users
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) CreateExternalUser(arg1 string, arg2 string, arg3 string, arg4 string) (string, error) {
	fake.createExternalUserMutex.Lock()
	ret, specificReturn := fake.createExternalUserReturnsOnCall[len(fake.createExternalUserArgsForCall)]
	fake.createExternalUserArgsForCall = append(fake.createExternalUserArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateExternalUserStub
	fakeReturns := fake.createExternalUserReturns
	fake.recordInvocation("CreateExternalUser", []interface{}{arg1, arg2, arg3, arg4})
	fake.createExternalUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) CreateExternalUserCallCount() int {
	fake.createExternalUserMutex.RLock()
	defer fake.createExternalUserMutex.RUnlock()
	return len(fake.createExternalUserArgsForCall)
}

func (fake *FakeManager) CreateExternalUserCalls(stub func(string, string, string, string) (string, error)) {
	fake.createExternalUserMutex.Lock()
	defer fake.createExternalUserMutex.Unlock()
	fake.CreateExternalUserStub = stub
}

func (fake *FakeManager) CreateExternalUserArgsForCall(i int) (string, string, string, string) {
	fake.createExternalUserMutex.RLock()
	defer fake.createExternalUserMutex.RUnlock()
	argsForCall := fake.createExternalUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeManager) CreateExternalUserReturns(result1 string, result2 error) {
	fake.createExternalUserMutex.Lock()
	defer fake.createExternalUserMutex.Unlock()
	fake.CreateExternalUserStub = nil
	fake.createExternalUserReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) CreateExternalUserReturnsOnCall(i int, result1 string, result2 error) {
	fake.createExternalUserMutex.Lock()
	defer fake.createExternalUserMutex.Unlock()
	fake.CreateExternalUserStub = nil
	if fake.createExternalUserReturnsOnCall == nil {
		fake.createExternalUserReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createExternalUserReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListUsers() (*uaa.Users, error) {
	fake.listUsersMutex.Lock()
	ret, specificReturn := fake.listUsersReturnsOnCall[len(fake.listUsersArgsForCall)]
	fake.listUsersArgsForCall = append(fake.listUsersArgsForCall, struct {
	}{})
	stub := fake.ListUsersStub
	fakeReturns := fake.listUsersReturns
	fake.recordInvocation("ListUsers", []interface{}{})
	fake.listUsersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManager) ListUsersCallCount() int {
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	return len(fake.listUsersArgsForCall)
}

func (fake *FakeManager) ListUsersCalls(stub func() (*uaa.Users, error)) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = stub
}

func (fake *FakeManager) ListUsersReturns(result1 *uaa.Users, result2 error) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = nil
	fake.listUsersReturns = struct {
		result1 *uaa.Users
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) ListUsersReturnsOnCall(i int, result1 *uaa.Users, result2 error) {
	fake.listUsersMutex.Lock()
	defer fake.listUsersMutex.Unlock()
	fake.ListUsersStub = nil
	if fake.listUsersReturnsOnCall == nil {
		fake.listUsersReturnsOnCall = make(map[int]struct {
			result1 *uaa.Users
			result2 error
		})
	}
	fake.listUsersReturnsOnCall[i] = struct {
		result1 *uaa.Users
		result2 error
	}{result1, result2}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createExternalUserMutex.RLock()
	defer fake.createExternalUserMutex.RUnlock()
	fake.listUsersMutex.RLock()
	defer fake.listUsersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ uaa.Manager = new(FakeManager)
